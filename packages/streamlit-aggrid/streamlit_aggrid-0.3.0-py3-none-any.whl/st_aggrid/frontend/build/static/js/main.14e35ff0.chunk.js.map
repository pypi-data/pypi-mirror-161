{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","loadColumnsState","className","args","theme","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","ModuleRegistry","register","ClientSideRowModelModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","console","log","head","appendChild","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","LicenseManager","setLicenseKey","frame_dtypes","update_mode","allow_unsafe_jscode","fit_columns_on_grid_load","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","numberColumnFilter","shortDateTimeFormat","valueFormatter","params","dateFormatter","value","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","numberFormatter","precision","customCurrencyFormat","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","assign","warn","JSON","parse","row_data","gridHeight","height","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","updateEvents","this","update_on","doReturn","forEach","element","addEventListener","debounce","columnsState","columns_state","applyColumnState","applyOrder","event","idx","forEachDetailGridInfo","i","attachUpdateEvents","fitColumns","selectIndex","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","data_return_mode","forEachLeafNode","row","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","selected","d","id","forEachNode","isSelected","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","rowIndex","colState","getColumnState","Streamlit","setComponentValue","width","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.14e35ff0.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport { ReactNode } from \"react\"\n\nimport { AgGridReact } from \"@ag-grid-community/react\"\n\nimport { ModuleRegistry, ColumnApi, GridApi, DetailGridInfo } from \"@ag-grid-community/core\"\n\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\"\nimport { LicenseManager } from \"@ag-grid-enterprise/core\"\nimport { GridChartsModule } from \"@ag-grid-enterprise/charts\"\nimport { SparklinesModule } from \"@ag-grid-enterprise/sparklines\"\nimport { ColumnsToolPanelModule } from \"@ag-grid-enterprise/column-tool-panel\"\nimport { ExcelExportModule } from \"@ag-grid-enterprise/excel-export\"\nimport { FiltersToolPanelModule } from \"@ag-grid-enterprise/filter-tool-panel\"\nimport { MasterDetailModule } from \"@ag-grid-enterprise/master-detail\"\nimport { MenuModule } from \"@ag-grid-enterprise/menu\"\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\"\nimport { RichSelectModule } from \"@ag-grid-enterprise/rich-select\"\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\"\nimport { SetFilterModule } from \"@ag-grid-enterprise/set-filter\"\nimport { MultiFilterModule } from \"@ag-grid-enterprise/multi-filter\"\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\"\nimport { StatusBarModule } from \"@ag-grid-enterprise/status-bar\"\n\nimport { parseISO, compareAsc } from \"date-fns\"\nimport { format } from \"date-fns-tz\"\nimport deepMap from \"./utils\"\nimport { duration } from \"moment\"\n\nimport { debounce } from \"lodash\"\n\nimport \"./AgGrid.scss\"\nimport \"./scrollbar.css\"\ninterface State {\n  rowData: any\n  gridHeight: number\n  should_update: boolean\n}\n\ntype CSSDict = { [key: string]: { [key: string]: string } }\n\nfunction getCSS(styles: CSSDict): string {\n  var css = []\n  for (let selector in styles) {\n    let style = selector + \" {\"\n\n    for (let prop in styles[selector]) {\n      style += prop + \": \" + styles[selector][prop] + \";\"\n    }\n\n    style += \"}\"\n\n    css.push(style)\n  }\n\n  return css.join(\"\\n\")\n}\n\nfunction addCustomCSS(custom_css: CSSDict): void {\n  var css = getCSS(custom_css)\n  var styleSheet = document.createElement(\"style\")\n  styleSheet.type = \"text/css\"\n  styleSheet.innerText = css\n  console.log(`Adding cutom css: `, css)\n  document.head.appendChild(styleSheet)\n}\n\nclass AgGrid extends StreamlitComponentBase<State> {\n  private frameDtypes: any\n  private api!: GridApi\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private manualUpdateRequested: boolean = false\n  private allowUnsafeJsCode: boolean = false\n  private fitColumnsOnGridLoad: boolean = false\n  private gridOptions: any\n\n  constructor(props: any) {\n    super(props)\n    ModuleRegistry.register(ClientSideRowModelModule)\n\n    if (props.args.custom_css) {\n      addCustomCSS(props.args.custom_css)\n    }\n\n    if (props.args.enable_enterprise_modules) {\n      ModuleRegistry.registerModules([\n        ExcelExportModule,\n        GridChartsModule,\n        SparklinesModule,\n        ColumnsToolPanelModule,\n        FiltersToolPanelModule,\n        MasterDetailModule,\n        MenuModule,\n        RangeSelectionModule,\n        RichSelectModule,\n        RowGroupingModule,\n        SetFilterModule,\n        MultiFilterModule,\n        SideBarModule,\n        StatusBarModule,\n      ])\n      if (\"license_key\" in props.args) {\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\n      }\n    }\n\n    this.frameDtypes = this.props.args.frame_dtypes\n    this.manualUpdateRequested = this.props.args.update_mode === 1\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\n\n    this.columnFormaters = {\n      columnTypes: {\n        dateColumnFilter: {\n          filter: \"agDateColumnFilter\",\n          filterParams: {\n            comparator: (filterValue: any, cellValue: string) =>\n              compareAsc(parseISO(cellValue), filterValue),\n          },\n        },\n        numberColumnFilter: {\n          filter: \"agNumberColumnFilter\",\n        },\n        shortDateTimeFormat: {\n          valueFormatter: (params: any) =>\n            this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        customDateTimeFormat: {\n          valueFormatter: (params: any) =>\n            this.dateFormatter(\n              params.value,\n              params.column.colDef.custom_format_string\n            ),\n        },\n        customNumericFormat: {\n          valueFormatter: (params: any) =>\n            this.numberFormatter(\n              params.value,\n              params.column.colDef.precision ?? 2\n            ),\n        },\n        customCurrencyFormat: {\n          valueFormatter: (params: any) =>\n            this.currencyFormatter(\n              params.value,\n              params.column.colDef.custom_currency_symbol\n            ),\n        },\n        timedeltaFormat: {\n          valueFormatter: (params: any) =>\n            duration(params.value).humanize(true),\n        },\n      },\n    }\n\n    let gridOptions = Object.assign(\n      {},\n      this.columnFormaters,\n      this.props.args.gridOptions\n    )\n\n    if (this.allowUnsafeJsCode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\")\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\n    }\n    this.gridOptions = gridOptions\n\n    this.state = {\n      rowData: JSON.parse(props.args.row_data),\n      gridHeight: this.props.args.height,\n      should_update: false,\n    }\n  }\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    if (props.args.reload_data) {\n      let new_row_data = JSON.parse(props.args.row_data)\n\n      return {\n        rowData: new_row_data,\n        gridHeight: props.args.height,\n        should_update: true,\n      }\n    } else {\n      return {\n        gridHeight: props.args.height,\n      }\n    }\n  }\n\n  private convertStringToFunction(v: string) {\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\n\n    let funcReg = new RegExp(\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\n    )\n\n    let match = funcReg.exec(v)\n\n    if (match) {\n      const funcStr = match[1]\n      // eslint-disable-next-line\n      return new Function(\"return \" + funcStr)()\n    } else {\n      return v\n    }\n  }\n\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\n    return deepMap(obj, this.convertStringToFunction)\n  }\n\n  private attachUpdateEvents(api: GridApi) {\n    let updateEvents = this.props.args.update_on[0]\n    const doReturn = (e: any) => this.returnGridValue(e)\n\n    updateEvents.forEach((element: any) => {\n      if (Array.isArray(element)) {\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\n        console.log(\"Attached arr\", element)\n      } else {\n        api.addEventListener(element, doReturn)\n      }\n    })\n  }\n\n  private loadColumnsState() {\n    const columnsState = this.props.args.columns_state\n\n    if (columnsState != null) {\n      //console.dir(columnsState)\n      this.columnApi.applyColumnState({ state: columnsState, applyOrder: true})\n    }\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.api.forEachDetailGridInfo((i: any) => {\n      console.log(i)\n    })\n\n    this.attachUpdateEvents(this.api)\n\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\n      //console.log(i)\n      if (i.api !== undefined) {\n      this.attachUpdateEvents(i.api)\n      }\n    })\n\n    this.api.addEventListener(\"firstDataRendered\", (e: any) =>\n      this.fitColumns()\n    )\n\n    this.api.setRowData(this.state.rowData)\n\n    for (var idx in this.gridOptions[\"preSelectedRows\"]) {\n      this.api.selectIndex(this.gridOptions[\"preSelectedRows\"][idx], true, true)\n    }\n  }\n\n  private fitColumns() {\n    if (this.fitColumnsOnGridLoad) {\n      this.api.sizeColumnsToFit()\n    } else {\n      this.columnApi.autoSizeAllColumns()\n    }\n  }\n\n  private dateFormatter(isoString: string, formaterString: string): String {\n    try {\n      let date = parseISO(isoString)\n      return format(date, formaterString)\n    } catch {\n      return isoString\n    } finally {\n    }\n  }\n\n  private currencyFormatter(number: any, currencySymbol: string): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return currencySymbol + n.toFixed(2)\n    } else {\n      return number\n    }\n  }\n\n  private numberFormatter(number: any, precision: number): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return n.toFixed(precision)\n    } else {\n      return number\n    }\n  }\n\n  private returnGridValue(e: any) {\n    let returnData: any[] = []\n    let returnMode = this.props.args.data_return_mode\n\n    switch (returnMode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\n        break\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n    }\n\n      let selected : any  = {}\n      this.api.forEachDetailGridInfo((d:DetailGridInfo) => {\n        selected[d.id] = []\n        d.api?.forEachNode((n: any) => {\n          if (n.isSelected()) {\n            selected[d.id].push(n)\n          }\n        })\n      })\n\n    //console.log(selected)\n    let returnValue = {\n      originalDtypes: this.frameDtypes,\n      rowData: returnData,\n      selectedRows: this.api.getSelectedRows(),\n      selectedItems: this.api\n        .getSelectedNodes()\n        .map((n) => ({ rowIndex: n.rowIndex, ...n.data })),\n      colState: this.columnApi.getColumnState(),\n    }\n\n    Streamlit.setComponentValue(returnValue)\n  }\n\n  private ManualUpdateButton(props: any) {\n    if (props.manual_update) {\n      return <button onClick={props.onClick}>Update</button>\n    } else {\n      return <span></span>\n    }\n  }\n\n  private defineContainerHeight() {\n    if (\"domLayout\" in this.gridOptions) {\n      if (this.gridOptions[\"domLayout\"] === \"autoHeight\") {\n        return {\n          width: this.props.width,\n        }\n      }\n    }\n    return {\n      width: this.props.width,\n      height: this.state.gridHeight,\n    }\n  }\n\n  public render = (): ReactNode => {\n    if (this.api !== undefined) {\n      if (this.state.should_update) {\n        this.api.setRowData(this.state.rowData)\n      }\n    }\n    this.loadColumnsState()\n    \n\n    return (\n      <div\n        className={\"ag-theme-\" + this.props.args.theme}\n        style={this.defineContainerHeight()}\n      >\n        <this.ManualUpdateButton\n          manual_update={this.manualUpdateRequested}\n          onClick={(e: any) => this.returnGridValue(e)}\n        />\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          gridOptions={this.gridOptions}\n        ></AgGridReact>\n      </div>\n    )\n  }\n}\n\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}