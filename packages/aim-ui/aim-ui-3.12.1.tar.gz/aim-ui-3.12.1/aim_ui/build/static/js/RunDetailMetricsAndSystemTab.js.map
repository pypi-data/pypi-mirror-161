{"version":3,"sources":["pages/RunDetail/RunMetricCard.tsx","pages/RunDetail/RunDetailMetricsAndSystemTab.tsx","config/charts/index.ts","components/LineChart/LineChart.tsx","pages/RunDetail/hooks/useRunMetricsBatch.tsx"],"names":["RunMetricCard","batch","index","ErrorBoundary","className","LineChart","data","key","xValues","iters","yValues","values","color","dasharray","selectors","axesScaleType","xAxis","ScaleEnum","Linear","yAxis","ignoreOutliers","highlightMode","HighlightEnum","Off","curveInterpolation","CurveEnum","component","tint","size","weight","isSystemMetric","name","formatSystemMetricName","contextToString","context","split","map","label","i","monospace","COLORS","length","memo","RunDetailMetricsAndSystemTab","runHash","runTraces","runBatch","isSystem","isRunBatchLoading","useRunMetricsBatch","React","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","BusyLoaderWrapper","isLoading","height","_","isEmpty","IllustrationBlock","title","RENDER_LINES_OPTIMIZED_LIMIT","GRID_SIZE","S","M","L","CHART_GRID_PATTERN","1","2","3","4","5","6","7","8","9","forwardRef","props","ref","nameKey","aggregatedData","aggregationConfig","syncHoverState","axesScaleRange","alignmentConfig","chartTitle","zoom","onZoomChange","readOnly","resizeMode","visBoxRef","useRef","margin","top","right","bottom","left","width","plotBoxRef","parentRef","visAreaRef","svgNodeRef","bgRectNodeRef","plotNodeRef","axesNodeRef","linesNodeRef","attributesNodeRef","xAxisLabelNodeRef","yAxisLabelNodeRef","highlightedNodeRef","axesRef","linesRef","attributesRef","humanizerConfigRef","rafIDRef","unableToDrawConditions","renderChart","clearArea","drawArea","processLineChartData","processedData","processedAggrData","min","max","drawAxes","xScale","current","yScale","drawBgTickLines","y","x","drawLines","selectChildren","classed","drawHoverAttributes","drawBrush","drawUnableToRender","renderArr","draw","resizeObserverCallback","useCallback","entries","window","requestAnimationFrame","observerReturnCallback","cancelAnimationFrame","useResizeObserver","useImperativeHandle","setActiveLineAndCircle","lineKey","focusedStateActive","force","updateHoverAttributes","xValue","dataSelector","clearHoverAttributes","setFocusedState","focusedState","classNames","zoomMode","active","displayName","runsBatchRequestRef","runDetailAppModel","getRunMetricsBatch","metric","isNil","call","abort"],"mappings":"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","file":"static/js/RunDetailMetricsAndSystemTab.js?version=cecf4b6a7d9141a2c135","sourcesContent":["import React, { memo } from 'react';\n\nimport LineChart from 'components/LineChart/LineChart';\nimport { Badge, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport { HighlightEnum } from 'components/HighlightModesPopover/HighlightModesPopover';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { CurveEnum, ScaleEnum } from 'utils/d3';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\n\nimport { IRunMetricCardProps } from './types';\n\nfunction RunMetricCard({\n  batch,\n  index,\n}: IRunMetricCardProps): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <div className='RunDetailMetricsTab__container__chartContainer'>\n        <div className='RunDetailMetricsTab__container__chartContainer__chartBox'>\n          <ErrorBoundary>\n            <LineChart\n              data={[\n                {\n                  key: batch.key,\n                  data: {\n                    xValues: [...batch.iters],\n                    yValues: [...batch.values],\n                  },\n                  color: '#1c2852',\n                  dasharray: 'none',\n                  selectors: [batch.key],\n                },\n              ]}\n              index={index}\n              axesScaleType={{\n                xAxis: ScaleEnum.Linear,\n                yAxis: ScaleEnum.Linear,\n              }}\n              ignoreOutliers={false}\n              highlightMode={HighlightEnum.Off}\n              curveInterpolation={CurveEnum.Linear}\n            />\n          </ErrorBoundary>\n        </div>\n        <div className='RunDetailMetricsTab__container__chartContainer__metricDetailBox'>\n          <Text\n            component='h4'\n            tint={100}\n            size={18}\n            weight={600}\n            className='RunDetailMetricsTab__container__chartContainer__metricDetailBox__metricName'\n          >\n            {isSystemMetric(batch?.name)\n              ? formatSystemMetricName(batch?.name)\n              : batch?.name}\n          </Text>\n          {contextToString(batch?.context)\n            ?.split(',')\n            .map((label: string, i: number) => (\n              <Badge\n                key={i}\n                monospace\n                size='large'\n                color={COLORS[0][(i + index) % COLORS[0].length]}\n                label={label || 'Empty context'}\n              />\n            ))}\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunMetricCard);\n","import React, { memo } from 'react';\nimport _ from 'lodash-es';\n\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport { IRunBatch, IRunDetailMetricsAndSystemTabProps } from './types';\nimport RunMetricCard from './RunMetricCard';\nimport useRunMetricsBatch from './hooks/useRunMetricsBatch';\n\nfunction RunDetailMetricsAndSystemTab({\n  runHash,\n  runTraces,\n  runBatch,\n  isSystem,\n  isRunBatchLoading,\n}: IRunDetailMetricsAndSystemTabProps): React.FunctionComponentElement<React.ReactNode> {\n  useRunMetricsBatch({ runBatch, runTraces, runHash });\n\n  React.useEffect(() => {\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs[isSystem ? 'system' : 'metrics']\n        .tabView,\n    );\n  }, [isSystem]);\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunBatchLoading}\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(runBatch) ? (\n          <div className='RunDetailMetricsTab'>\n            <div className='RunDetailMetricsTab__container'>\n              {runBatch.map((batch: IRunBatch, i: number) => {\n                return (\n                  <RunMetricCard key={batch.key} batch={batch} index={i} />\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='runDetailParamsTabLoader'\n            title={`No tracked ${isSystem ? 'system' : ''} metrics`}\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default memo(RunDetailMetricsAndSystemTab);\n","export const RENDER_LINES_OPTIMIZED_LIMIT = 100;\n\nexport const GRID_SIZE = {\n  S: 4,\n  M: 6,\n  L: 12,\n};\n\nconst { S, M, L } = GRID_SIZE;\n// Chart grid pattern based on a 12-column grid layout\nexport const CHART_GRID_PATTERN: { [key: number]: number[] } = {\n  1: [L],\n  2: [M, M],\n  3: [S, S, S],\n  4: [M, M, M, M],\n  5: [S, S, S, M, M],\n  6: [S, S, S, S, S, S],\n  7: [S, S, S, M, M, M, M],\n  8: [S, S, S, S, S, S, M, M],\n  9: [S, S, S, S, S, S, S, S, S],\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { RENDER_LINES_OPTIMIZED_LIMIT } from 'config/charts';\n\nimport useResizeObserver from 'hooks/window/useResizeObserver';\n\nimport {\n  IAttributesRef,\n  ILineChartProps,\n} from 'types/components/LineChart/LineChart';\nimport { IFocusedState } from 'types/services/models/metrics/metricsAppModel';\n\nimport {\n  drawArea,\n  clearArea,\n  drawAxes,\n  drawLines,\n  processLineChartData,\n  drawBrush,\n  drawHoverAttributes,\n  drawUnableToRender,\n} from 'utils/d3';\n\nimport './LineChart.scss';\n\nconst LineChart = React.forwardRef(function LineChart(\n  props: ILineChartProps,\n  ref,\n): React.FunctionComponentElement<React.ReactNode> {\n  const {\n    data,\n    index = 0,\n    nameKey = '',\n    aggregatedData,\n    aggregationConfig,\n    syncHoverState,\n    axesScaleType,\n    axesScaleRange,\n    ignoreOutliers,\n    alignmentConfig,\n    highlightMode,\n    curveInterpolation,\n    chartTitle,\n    zoom,\n    onZoomChange,\n    readOnly = false,\n    resizeMode,\n  } = props;\n\n  // boxes\n  const visBoxRef = React.useRef({\n    margin: {\n      top: 30,\n      right: 20,\n      bottom: 30,\n      left: 60,\n    },\n    height: 0,\n    width: 0,\n  });\n  const plotBoxRef = React.useRef({\n    height: 0,\n    width: 0,\n  });\n\n  // containers\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const visAreaRef = React.useRef<HTMLDivElement>(null);\n\n  // d3 node elements\n  const svgNodeRef = React.useRef(null);\n  const bgRectNodeRef = React.useRef(null);\n  const plotNodeRef = React.useRef(null);\n  const axesNodeRef = React.useRef(null);\n  const linesNodeRef = React.useRef<any>(null);\n  const attributesNodeRef = React.useRef(null);\n  const xAxisLabelNodeRef = React.useRef(null);\n  const yAxisLabelNodeRef = React.useRef(null);\n  const highlightedNodeRef = React.useRef(null);\n\n  // methods and values refs\n  const axesRef = React.useRef({});\n  const linesRef = React.useRef({});\n  const attributesRef = React.useRef<IAttributesRef>({});\n  const humanizerConfigRef = React.useRef({});\n  const rafIDRef = React.useRef<number>();\n\n  const unableToDrawConditions: { condition: boolean; text?: string }[] = [];\n\n  function draw() {\n    drawArea({\n      index,\n      nameKey,\n      visBoxRef,\n      plotBoxRef,\n      parentRef,\n      visAreaRef,\n      svgNodeRef,\n      bgRectNodeRef,\n      plotNodeRef,\n      axesNodeRef,\n      linesNodeRef,\n      attributesNodeRef,\n      chartTitle,\n    });\n\n    const { processedData, processedAggrData, min, max } = processLineChartData(\n      {\n        data,\n        ignoreOutliers,\n        visBoxRef,\n        axesScaleType,\n        axesScaleRange,\n        aggregatedData,\n        aggregationConfig,\n        unableToDrawConditions,\n        attributesRef,\n      },\n    );\n\n    drawAxes({\n      svgNodeRef,\n      axesNodeRef,\n      axesRef,\n      plotBoxRef,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      visBoxRef,\n      alignmentConfig,\n      axesScaleType,\n      humanizerConfigRef,\n      drawBgTickLines: { y: true, x: false },\n    });\n\n    drawLines({\n      index,\n      processedData,\n      nameKey,\n      linesNodeRef,\n      linesRef,\n      curveInterpolation,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      highlightMode,\n      aggregationConfig,\n      processedAggrData,\n      readOnly,\n    });\n\n    // render lines with low quality if lines count are more than 'RENDER_LINES_OPTIMIZED_LIMIT'\n    if (!readOnly && linesNodeRef.current) {\n      const linesCount = linesNodeRef.current.selectChildren().size();\n      if (linesCount > RENDER_LINES_OPTIMIZED_LIMIT) {\n        linesNodeRef.current.classed('optimizeRendering', true);\n      }\n    }\n\n    if (!readOnly) {\n      drawHoverAttributes({\n        index,\n        nameKey,\n        data,\n        axesScaleType,\n        highlightMode,\n        syncHoverState,\n        visAreaRef,\n        attributesRef,\n        plotBoxRef,\n        visBoxRef,\n        svgNodeRef,\n        bgRectNodeRef,\n        attributesNodeRef,\n        xAxisLabelNodeRef,\n        yAxisLabelNodeRef,\n        linesNodeRef,\n        highlightedNodeRef,\n        aggregationConfig,\n        alignmentConfig,\n      });\n    }\n\n    drawBrush({\n      index,\n      plotBoxRef,\n      plotNodeRef,\n      visBoxRef,\n      axesRef,\n      attributesRef,\n      linesRef,\n      svgNodeRef,\n      axesScaleType,\n      min,\n      max,\n      axesScaleRange,\n      zoom,\n      onZoomChange,\n      readOnly,\n      unableToDrawConditions,\n    });\n\n    drawUnableToRender({\n      renderArr: unableToDrawConditions,\n      visAreaRef,\n      attributesRef,\n      readOnly,\n      syncHoverState,\n    });\n  }\n\n  function renderChart() {\n    clearArea({ visAreaRef });\n    draw();\n  }\n\n  const resizeObserverCallback: ResizeObserverCallback = React.useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries?.length) {\n        rafIDRef.current = window.requestAnimationFrame(renderChart);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      data,\n      zoom,\n      ignoreOutliers,\n      highlightMode,\n      axesScaleType,\n      axesScaleRange,\n      curveInterpolation,\n      aggregationConfig,\n      readOnly,\n      alignmentConfig,\n      resizeMode,\n    ],\n  );\n\n  const observerReturnCallback = React.useCallback(() => {\n    if (rafIDRef.current) {\n      window.cancelAnimationFrame(rafIDRef.current);\n    }\n  }, []);\n\n  useResizeObserver(resizeObserverCallback, parentRef, observerReturnCallback);\n\n  React.useEffect(() => {\n    rafIDRef.current = window.requestAnimationFrame(renderChart);\n    return () => {\n      if (rafIDRef.current) {\n        window.cancelAnimationFrame(rafIDRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    data,\n    zoom,\n    ignoreOutliers,\n    highlightMode,\n    axesScaleType,\n    axesScaleRange,\n    curveInterpolation,\n    aggregationConfig,\n    readOnly,\n    alignmentConfig,\n    resizeMode,\n  ]);\n\n  React.useImperativeHandle(ref, () => ({\n    setActiveLineAndCircle: (\n      lineKey: string,\n      focusedStateActive: boolean = false,\n      force: boolean = false,\n    ) => {\n      attributesRef.current.setActiveLineAndCircle?.(\n        lineKey,\n        focusedStateActive,\n        force,\n      );\n    },\n    updateHoverAttributes: (xValue: number, dataSelector?: string) => {\n      attributesRef.current.updateHoverAttributes?.(xValue, dataSelector);\n    },\n    clearHoverAttributes: () => {\n      attributesRef.current.clearHoverAttributes?.();\n    },\n    setFocusedState: (focusedState: IFocusedState) => {\n      attributesRef.current.focusedState = focusedState;\n    },\n  }));\n\n  return (\n    <ErrorBoundary>\n      <div\n        ref={parentRef}\n        className={classNames('LineChart', {\n          zoomMode: !readOnly && zoom?.active,\n        })}\n      >\n        <div ref={visAreaRef} />\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\nexport default React.memo(LineChart);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\n\nfunction useRunMetricsBatch({ runBatch, runTraces, runHash }: any) {\n  React.useEffect(() => {\n    const runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n      runTraces.metric,\n      runHash,\n    );\n    if (!runBatch && !_.isNil(runTraces)) {\n      runsBatchRequestRef.call();\n    }\n    return () => {\n      runsBatchRequestRef.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runTraces, runHash]);\n}\n\nexport default useRunMetricsBatch;\n"],"sourceRoot":""}