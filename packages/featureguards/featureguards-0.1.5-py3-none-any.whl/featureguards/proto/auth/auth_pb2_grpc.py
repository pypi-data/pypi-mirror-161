# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import auth_pb2 as auth_dot_auth__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
            '/auth.Auth/Authenticate',
            request_serializer=auth_dot_auth__pb2.AuthenticateRequest.
            SerializeToString,
            response_deserializer=auth_dot_auth__pb2.AuthenticateResponse.
            FromString,
        )
        self.Refresh = channel.unary_unary(
            '/auth.Auth/Refresh',
            request_serializer=auth_dot_auth__pb2.RefreshRequest.
            SerializeToString,
            response_deserializer=auth_dot_auth__pb2.RefreshResponse.
            FromString,
        )


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Web apps should never call this directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Refresh can be called via web too.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Authenticate':
        grpc.unary_unary_rpc_method_handler(
            servicer.Authenticate,
            request_deserializer=auth_dot_auth__pb2.AuthenticateRequest.
            FromString,
            response_serializer=auth_dot_auth__pb2.AuthenticateResponse.
            SerializeToString,
        ),
        'Refresh':
        grpc.unary_unary_rpc_method_handler(
            servicer.Refresh,
            request_deserializer=auth_dot_auth__pb2.RefreshRequest.FromString,
            response_serializer=auth_dot_auth__pb2.RefreshResponse.
            SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))


# This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/auth.Auth/Authenticate',
            auth_dot_auth__pb2.AuthenticateRequest.SerializeToString,
            auth_dot_auth__pb2.AuthenticateResponse.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)

    @staticmethod
    def Refresh(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/auth.Auth/Refresh',
            auth_dot_auth__pb2.RefreshRequest.SerializeToString,
            auth_dot_auth__pb2.RefreshResponse.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)
