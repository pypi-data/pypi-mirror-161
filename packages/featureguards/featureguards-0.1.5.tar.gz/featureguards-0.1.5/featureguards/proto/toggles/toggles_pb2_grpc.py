# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import toggles_pb2 as toggles_dot_toggles__pb2


class TogglesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fetch = channel.unary_unary(
            '/toggles.Toggles/Fetch',
            request_serializer=toggles_dot_toggles__pb2.FetchRequest.
            SerializeToString,
            response_deserializer=toggles_dot_toggles__pb2.FetchResponse.
            FromString,
        )
        self.Listen = channel.unary_stream(
            '/toggles.Toggles/Listen',
            request_serializer=toggles_dot_toggles__pb2.ListenRequest.
            SerializeToString,
            response_deserializer=toggles_dot_toggles__pb2.ListenPayload.
            FromString,
        )


class TogglesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TogglesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Fetch':
        grpc.unary_unary_rpc_method_handler(
            servicer.Fetch,
            request_deserializer=toggles_dot_toggles__pb2.FetchRequest.
            FromString,
            response_serializer=toggles_dot_toggles__pb2.FetchResponse.
            SerializeToString,
        ),
        'Listen':
        grpc.unary_stream_rpc_method_handler(
            servicer.Listen,
            request_deserializer=toggles_dot_toggles__pb2.ListenRequest.
            FromString,
            response_serializer=toggles_dot_toggles__pb2.ListenPayload.
            SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'toggles.Toggles', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))


# This class is part of an EXPERIMENTAL API.
class Toggles(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Fetch(request,
              target,
              options=(),
              channel_credentials=None,
              call_credentials=None,
              insecure=False,
              compression=None,
              wait_for_ready=None,
              timeout=None,
              metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/toggles.Toggles/Fetch',
            toggles_dot_toggles__pb2.FetchRequest.SerializeToString,
            toggles_dot_toggles__pb2.FetchResponse.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
               target,
               options=(),
               channel_credentials=None,
               call_credentials=None,
               insecure=False,
               compression=None,
               wait_for_ready=None,
               timeout=None,
               metadata=None):
        return grpc.experimental.unary_stream(
            request, target, '/toggles.Toggles/Listen',
            toggles_dot_toggles__pb2.ListenRequest.SerializeToString,
            toggles_dot_toggles__pb2.ListenPayload.FromString, options,
            channel_credentials, insecure, call_credentials, compression,
            wait_for_ready, timeout, metadata)
