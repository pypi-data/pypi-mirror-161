{"version":3,"sources":["VTKStreamlit.tsx","index.tsx"],"names":["VTKStreamlit","renderData","useStreamlit","viewerRef","useRef","React","useState","viewerState","setViewerState","viewerSceneRef","actionStackRef","undefined","file","setFile","handleScreenshot","useCallback","current","useEffect","args","Streamlit","setComponentValue","scene","length","map","id","ref","isequal","dispatchActionStack","dispatch","findIndex","a","type","actions","reverse","filter","action","i","array","ids","debouncedDispatch","debounce","leading","maxWait","currFile","loadFile","config","Blob","height","includes","setFrameHeight","parseInt","replace","cssStyle","useMemo","border","borderRadius","toolbar","sider","style","width","display","flexDirection","Content","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e89a8fb9.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from \"react\"\n\nimport { Streamlit } from \"streamlit-component-lib\"\nimport { useStreamlit } from \"streamlit-component-lib-react-hooks\"\n\nimport { VTKViewer, VTKViewerDrawer, VTKFloatingToolbar } from \"pollination-viewer\"\n\nimport { Layout } from \"antd\"\n\nimport './VTKStreamlit.css'\n\nimport isequal from \"lodash.isequal\"\nimport debounce from \"lodash.debounce\"\n\nconst HEIGHT = 640\n\nconst VTKStreamlit: React.FunctionComponent = () => {\n\n  const renderData = useStreamlit()\n\n  const viewerRef = useRef<any>(null)\n\n  // state returned to streamlit\n  const [viewerState, setViewerState] = React.useState<any>({})\n  const viewerSceneRef = useRef<any[]>([])\n\n  // stack of actions to dispatch via vtkjs\n  const actionStackRef = useRef<any[]>([])\n\n  // file to be loaded\n  const [file, setFile] = React.useState<Uint8Array | undefined>(undefined)\n\n  const handleScreenshot = useCallback(() => {\n    if (!viewerRef.current) return\n    viewerRef.current.handleScreenshot('VTKJSStreamlit', false)\n  }, [])\n\n  useEffect(() => {\n    if (renderData && renderData.args[\"subscribe\"]) {\n      Streamlit.setComponentValue(viewerState)\n    } else if (viewerState.scene && viewerState.scene.length > 0) {\n      const scene = viewerState.scene.map(({id}: {id: string}) => id)\n      const ref = viewerSceneRef.current.map(({id}: {id: string}) => id)\n\n      if (isequal(scene, ref)) return\n      \n      viewerSceneRef.current = [...viewerState.scene]\n\n      Streamlit.setComponentValue({\n        scene: viewerSceneRef.current\n      })\n    }\n  }, [viewerState, renderData])\n\n  // aggreate and dispatch actions on a debounced interval\n  const dispatchActionStack = useCallback(() => {\n    if (viewerRef.current && viewerRef.current.dispatch &&\n      actionStackRef.current && actionStackRef.current.length > 0) {\n\n      // handles screenshot as a special case\n      const screenshotIndex = actionStackRef.current.findIndex(a => a.type === \"streamlit-screenshot\")\n      if (screenshotIndex !== -1) handleScreenshot()\n\n      // filters type === \"strealit-screenshot\", and actions with duplicate types\n      // any action with ids [] will be dispatched\n      const actions = [...actionStackRef.current].reverse()\n        .filter((action, i, array) =>\n          (action.type !== \"streamlit-screenshot\" &&\n            typeof action.ids !== 'undefined') ||\n          array.findIndex(a => a.type === action.type) === i\n        )\n\n      viewerRef.current.dispatch(actions)\n      actionStackRef.current = []\n    }\n  }, [handleScreenshot])\n\n  const debouncedDispatch = useCallback(debounce(dispatchActionStack, 250, { leading:true, maxWait: 750 }), [dispatchActionStack])\n\n  useEffect(() => {\n    if (renderData && typeof renderData.args[\"action_stack\"] !== undefined\n      && viewerRef.current && viewerRef.current.dispatch) {\n      actionStackRef.current = [\n        ...actionStackRef.current,\n        ...renderData.args[\"action_stack\"]\n      ]\n      if (actionStackRef.current.length > 0) {\n        debouncedDispatch()\n      }\n    }\n  }, [renderData, debouncedDispatch])\n\n  useEffect(() => {\n    if (renderData && renderData.args[\"file\"]) {\n      setFile(currFile => {\n        if (!currFile) return renderData.args[\"file\"]\n        const equal = isequal(renderData.args[\"file\"], currFile)\n        return equal ? currFile : renderData.args[\"file\"]\n      })\n    }\n  }, [renderData])\n  \n  const loadFile = (file: Uint8Array) => {\n    if (viewerRef.current && viewerRef.current.dispatch && viewerRef.current.loadFile) {\n\n      if(renderData && renderData.args[\"clear\"]) viewerRef.current.dispatch({ type: 'remove-all' }, true)\n\n      const scene = viewerSceneRef.current\n      if (!scene) return\n\n      const config = scene.length > 0 ? scene : undefined\n      viewerRef.current.loadFile(new Blob([file]), 'vtkjs', config)\n    }\n  }\n\n  useEffect(() => {\n    if (!file) return\n    loadFile(file)\n    // eslint-disable-next-line\n  }, [file])\n\n  useEffect(() => {\n    if (!renderData) return\n    \n    if (typeof renderData.args[\"style\"] !== 'undefined' && \n        renderData.args[\"style\"].height && \n        renderData.args[\"style\"].height.includes('px')) {\n          Streamlit.setFrameHeight(parseInt(renderData.args[\"style\"].height.replace('px', '')))\n    }\n  }, [renderData])\n\n  // initial state of streamlit component\n  useEffect(() => {\n    Streamlit.setFrameHeight(HEIGHT)\n  }, [])\n\n  const cssStyle = useMemo(() => {\n    return renderData && typeof renderData.args[\"style\"] !== 'undefined' ? \n      renderData.args[\"style\"] : \n      { border: \"1px solid #d0d7de\", borderRadius: \"2px\", height: `${HEIGHT}px` }\n  }, [renderData])\n\n  const toolbar = renderData && typeof renderData.args[\"toolbar\"] !== 'undefined' ? renderData.args[\"toolbar\"] : true\n  const sider = renderData && typeof renderData.args[\"sider\"] !== 'undefined' ? renderData.args[\"sider\"] : true\n\n  return (\n    <div style={{ width: '100%', height: `${HEIGHT}px`, border: \"1px solid #d0d7de\", borderRadius: \"2px\", ...cssStyle, display: 'flex' }}>\n      <Layout style={{ flexDirection: 'row' }}>\n        {sider &&\n          <VTKViewerDrawer dispatch={viewerRef.current?.dispatch} viewerState={viewerState} handleScreenshot={handleScreenshot} />\n        }\n        <Layout>\n          {toolbar &&\n            <VTKFloatingToolbar dispatch={viewerRef.current?.dispatch} viewerState={viewerState} handleScreenshot={handleScreenshot} />\n          }\n          <Layout.Content style={{ display: 'flex', flexDirection: 'column' }}>\n            <VTKViewer setViewerState={setViewerState} ref={viewerRef} />\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    </div>\n  )\n}\n\nexport default VTKStreamlit","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ErrorBoundary } from \"streamlit-component-lib-react-hooks\"\nimport VTKStreamlit from \"./VTKStreamlit\"\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <VTKStreamlit />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}