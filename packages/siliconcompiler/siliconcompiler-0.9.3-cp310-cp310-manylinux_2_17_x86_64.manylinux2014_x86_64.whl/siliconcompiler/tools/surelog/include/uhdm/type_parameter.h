/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   type_parameter.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_TYPE_PARAMETER_H
#define UHDM_TYPE_PARAMETER_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/SymbolFactory.h>
#include <uhdm/containers.h>
#include <uhdm/typespec.h>




namespace UHDM {
class typespec;
class typespec;


class type_parameter final : public typespec {
  UHDM_IMPLEMENT_RTTI(type_parameter, typespec)
public:
  // Implicit constructor used to initialize all members,
  // comment: type_parameter();
  virtual ~type_parameter() final = default;


  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; if (data) uhdmParentType_ = data->UhdmType(); return true;}

  virtual unsigned int UhdmParentType() const final { return uhdmParentType_; }

  virtual bool UhdmParentType(unsigned int data) final { uhdmParentType_ = data; return true;}

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true;}

  virtual type_parameter* DeepClone(Serializer* serializer, ElaboratorListener* elab_listener, BaseClass* parent) const override;

  const typespec* Typespec() const { return typespec_; }

  bool Typespec(typespec* data) { typespec_ = data; return true;}

  bool VpiLocalParam() const { return vpiLocalParam_; }

  bool VpiLocalParam(bool data) { vpiLocalParam_ = data; return true;}

  bool VpiFullName(const std::string& data);

  const std::string&  VpiFullName() const;

  const typespec* Expr() const { return expr_; }

  bool Expr(typespec* data) { expr_ = data; return true;}

  bool VpiImported(const std::string& data);

  const std::string& VpiImported() const;

  virtual unsigned int VpiType() const final { return vpiTypeParameter; }


  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmtype_parameter; }

protected:
  void DeepCopy(type_parameter* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:

  BaseClass* vpiParent_ = nullptr;

  unsigned int uhdmParentType_ = 0;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  typespec* typespec_ = nullptr;

  bool vpiLocalParam_ = 0;

  SymbolFactory::ID vpiFullName_ = 0;

  typespec* expr_ = nullptr;

  SymbolFactory::ID vpiImported_ = 0;

};


typedef FactoryT<type_parameter> type_parameterFactory;


typedef FactoryT<std::vector<type_parameter *>> VectorOftype_parameterFactory;

}  // namespace UHDM

#endif
