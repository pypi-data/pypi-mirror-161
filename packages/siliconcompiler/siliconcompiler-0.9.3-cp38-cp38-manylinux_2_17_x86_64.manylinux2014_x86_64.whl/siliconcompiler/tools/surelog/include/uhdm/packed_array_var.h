/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   packed_array_var.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#ifndef UHDM_PACKED_ARRAY_VAR_H
#define UHDM_PACKED_ARRAY_VAR_H

#include <uhdm/sv_vpi_user.h>
#include <uhdm/uhdm_vpi_user.h>

#include <uhdm/SymbolFactory.h>
#include <uhdm/containers.h>
#include <uhdm/variables.h>

#include <uhdm/enum_struct_union_packed_var_group.h>



namespace UHDM {
class expr;
class expr;
class expr;


class packed_array_var final : public variables {
  UHDM_IMPLEMENT_RTTI(packed_array_var, variables)
public:
  // Implicit constructor used to initialize all members,
  // comment: packed_array_var();
  virtual ~packed_array_var() final = default;


  virtual const BaseClass* VpiParent() const final { return vpiParent_; }

  virtual bool VpiParent(BaseClass* data) final { vpiParent_ = data; if (data) uhdmParentType_ = data->UhdmType(); return true;}

  virtual unsigned int UhdmParentType() const final { return uhdmParentType_; }

  virtual bool UhdmParentType(unsigned int data) final { uhdmParentType_ = data; return true;}

  virtual bool VpiFile(const std::string& data) final;

  virtual const std::string& VpiFile() const final;

  virtual unsigned int UhdmId() const final { return uhdmId_; }

  virtual bool UhdmId(unsigned int data) final { uhdmId_ = data; return true;}

  virtual packed_array_var* DeepClone(Serializer* serializer, ElaboratorListener* elab_listener, BaseClass* parent) const override;

  bool VpiPackedArrayMember() const { return vpiPackedArrayMember_; }

  bool VpiPackedArrayMember(bool data) { vpiPackedArrayMember_ = data; return true;}

  bool VpiConstantSelect() const { return vpiConstantSelect_; }

  bool VpiConstantSelect(bool data) { vpiConstantSelect_ = data; return true;}

  bool VpiPacked() const { return vpiPacked_; }

  bool VpiPacked(bool data) { vpiPacked_ = data; return true;}

  VectorOfrange* Ranges() const { return ranges_; }

  bool Ranges(VectorOfrange* data) { ranges_ = data; return true;}

  const expr* Left_expr() const { return left_expr_; }

  bool Left_expr(expr* data) { left_expr_ = data; return true;}

  const expr* Right_expr() const { return right_expr_; }

  bool Right_expr(expr* data) { right_expr_ = data; return true;}

  VectorOfvar_bit* Var_bits() const { return var_bits_; }

  bool Var_bits(VectorOfvar_bit* data) { var_bits_ = data; return true;}

  VectorOfany* Elements() const { return elements_; }

  bool Elements(VectorOfany* data) {if (!enum_struct_union_packed_var_groupGroupCompliant(data)) return false; elements_ = data; return true;}

  const expr* Expr_index() const { return expr_index_; }

  bool Expr_index(expr* data) { expr_index_ = data; return true;}

  virtual unsigned int VpiType() const final { return vpiPackedArrayVar; }


  virtual  UHDM_OBJECT_TYPE UhdmType() const final { return uhdmpacked_array_var; }

protected:
  void DeepCopy(packed_array_var* clone, Serializer* serializer,
                ElaboratorListener* elaborator, BaseClass* parent) const;

private:

  BaseClass* vpiParent_ = nullptr;

  unsigned int uhdmParentType_ = 0;

  SymbolFactory::ID vpiFile_ = 0;

  unsigned int uhdmId_ = 0;

  bool vpiPackedArrayMember_ = 0;

  bool vpiConstantSelect_ = 0;

  bool vpiPacked_ = 0;

  VectorOfrange* ranges_ = nullptr;

  expr* left_expr_ = nullptr;

  expr* right_expr_ = nullptr;

  VectorOfvar_bit* var_bits_ = nullptr;

  VectorOfany* elements_ = nullptr;

  expr* expr_index_ = nullptr;

};


typedef FactoryT<packed_array_var> packed_array_varFactory;


typedef FactoryT<std::vector<packed_array_var *>> VectorOfpacked_array_varFactory;

}  // namespace UHDM

#endif
