/*
 Do not modify, auto-generated by model_gen.tcl

 Copyright 2019-2020 Alain Dargelas

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * File:   vpi_listener.h
 * Author:
 *
 * Created on December 14, 2019, 10:03 PM
 */

#include <string>
#include <vector>
#include <uhdm/BaseClass.h>
#include <uhdm/sv_vpi_user.h>
#include <uhdm/VpiListener.h>

#ifndef UHDM_VPI_LISTENER_H
#define UHDM_VPI_LISTENER_H

namespace UHDM {

void listen_designs (const std::vector<vpiHandle>& designs, UHDM::VpiListener* listener);

void listen_any(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);

void listen_ordered_wait(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_enum_const(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_reg(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_chandle_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_cont_assign(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_switch_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_table_entry(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_enum_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_property_inst(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_byte_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_clocked_seq(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_event_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_named_event(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_repeat_control(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_let_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_disable_fork(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_any_pattern(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_param_assign(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_assume(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_integer_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_user_systf(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_string_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_clocking_io_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_short_int_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_tf_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_function(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_ports(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_implication(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_case_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_int_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_atomic_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_package(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_logic_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_if_else(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_alias_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_class_defn(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_module_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constraint_ordering(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_for_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_case_property_item(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_part_select(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_force(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_sequence_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_named_begin(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constraint_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_disable(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_indexed_part_select(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_gate_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_unsupported_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_always(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_integer_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_array_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_hier_path(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_wait_fork(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_bit_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_class_obj(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_primitive(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_net_loads(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_tchk_term(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_interface(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_return_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_disables(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_property_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_design(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_dist_item(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_bit_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_struct_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_modport(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_array_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_forever_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_interface_tf_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_short_real_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_port_bit(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_chandle_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_immediate_assume(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_net_drivers(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_method_func_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_operation(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_case_item(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_assign_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_property_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_named_fork(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_distribution(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_prop_formal_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_import(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_if_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_switch_tran(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_seq_formal_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_null_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_let_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_enum_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_method_task_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_process_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_def_param(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_spec_param(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_typespec_member(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_deassign(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_class_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_var_select(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_gen_scope_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_tagged_pattern(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_gate(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_task(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_named_event_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_immediate_cover(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_time_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_var_bit(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_io_decl(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_interface_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_primitive_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_short_real_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_immediate_assert(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_parameter(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_attribute(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_port(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_program_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_while_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_repeat(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_fork_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_struct_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_gen_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_packed_array_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_final_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constant(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_delay_control(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_property_spec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_prim_term(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_expect_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_event_control(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_class_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_path_term(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_sequence_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constr_if_else(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_restrict(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_byte_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_extends(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_real_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_virtual_interface_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_ref_obj(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constr_foreach(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_release(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_type_parameter(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_task_func(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_func_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_cover(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_array_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_variables(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_scope(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_wait_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_integer_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constraint(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_interface_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_cont_assign_bit(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_void_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_unsupported_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_udp_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_program(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_union_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_tchk(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_nets(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_range(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_bit_select(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_module(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_long_int_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_soft_disable(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_case_property(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_simple_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_clocked_property(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_struct_pattern(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_logic_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_task_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_assert_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_logic_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_break_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_sys_func_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_enum_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_unsupported_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_constr_if(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_int_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_waits(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_packed_array_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_union_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_event_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_gen_scope(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_ref_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_udp_defn(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_net_bit(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_delay_term(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_sequence_inst(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_short_int_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_time_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_thread_obj(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_initial(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_do_while(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_string_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_sys_task_call(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_mod_path(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_foreach_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_assignment(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_struct_net(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_time_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_continue_stmt(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_packed_array_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_instance_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_reg_array(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_begin(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_instance(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_real_typespec(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_udp(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_long_int_var(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_clocking_block(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_concurrent_assertions(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);
void listen_multiclock_sequence_expr(vpiHandle object, UHDM::VpiListener* listener, UHDM::VisitedContainer* visited);


 };

#endif
