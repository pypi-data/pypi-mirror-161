#!python
import os
import time
import multiprocessing
import dddm
import wimprates as wr
import numpy as np
import argparse
import json

assert wr.__version__ != '0.2.2'


def main():
    print("run_dddm_multinest.py::\tstart")
    args = parse_arguments()

    if 'multinest' in args.sampler:
        rank = get_multiprocessing_rank()
    time.sleep(5)

    print(f"run_dddm_multinest.py::\tstart for mw = {args.mw}, log-cross-section = "
          f"{args.log_cross_section}. Fitting {args.nparams} parameters")
    cx = get_context(args)

    stats = cx.get_sampler_for_detector(
        wimp_mass=float(args.mw),
        cross_section=10 ** float(args.log_cross_section),
        sampler_name=args.sampler,
        detector_name=dddm.utils.to_str_tuple(args.sub_experiments),
        prior=get_prior(args),
        halo_name='shm' if not args.shielding else 'shielded_shm',
        detector_kwargs=dict(n_energy_bins=args.bins),
        halo_kwargs=None,
        sampler_kwargs=dict(nlive=args.nlive,
                            tol=args.tol,
                            notes=args.notes,
                            verbose=args.verbose,
                            detector_name=args.target
                            ),
        fit_parameters=dddm.statistics.get_param_list()[:args.nparams],
    )

    log = stats.log

    if args.multicore_hash != "":
        stats.get_save_dir(_hash=args.multicore_hash)
    stats.run()
    if args.multicore_hash == "" or ('multinest' in args.sampler and rank == 0):
        log.info('saving the results')
        stats.save_results()
        stats.save_sub_configs()
    assert stats.log_dict['did_run']

    log.info(f"run_dddm_multinest::\t"
             f"finished for mw = {args.mw}, sigma = {args.log_cross_section}")
    print("finished, bye bye")


def get_context(args):
    cx = dddm.base_context()
    if args.context_from_json is not None:
        context = open_json(args.context_from_json)

        cx.set_paths(context)

    print(cx.show_folders())
    return cx


def get_multiprocessing_rank():
    # MPI functionality only used for multinest
    try:
        from mpi4py import MPI
        rank = MPI.COMM_WORLD.Get_rank()
    except (ModuleNotFoundError, ImportError) as e:
        raise ModuleNotFoundError('Cannot run in multicore mode as'
                                  ' mpi4py is not installed') from e
    print(f"MPI-info\tn_cores: {multiprocessing.cpu_count()}\t"
          f"pid: {os.getpid()}\t"
          f"ppid: {os.getppid()}\trank{rank}")
    return rank


def get_prior(args):
    prior = dict(dddm.priors.get_priors(args.priors_from))
    if 'fixed' not in args.priors_from:
        prior['log_mass'] = {
            'range': [int(np.log10(args.mw)) - 2.5, int(np.log10(args.mw)) + 3.5],
            'prior_type': 'flat'}
        prior['log_cross_section'] = {
            'range': [int(args.log_cross_section) - 7, int(args.log_cross_section) + 5],
            'prior_type': 'flat'}
    prior['log_mass']['param'] = prior['log_mass']['range']
    prior['log_cross_section']['param'] = prior['log_cross_section']['range']
    return prior


def parse_arguments():
    parser = argparse.ArgumentParser(description="DDDM run fit for combined targets")
    parser.add_argument(
        '-sampler',
        type=str,
        default='multinest',
        help="sampler (multinest or nestle)")
    parser.add_argument('-mw',
                        type=np.float64,
                        default=50.,
                        help="wimp mass")
    parser.add_argument(
        '-context_from_json',
        type=str,
        default=None,
        help="Get the context from a json file")
    parser.add_argument(
        '-log_cross_section',
        type=np.float64,
        default=-45,
        help="wimp cross-section")
    parser.add_argument(
        '-nlive',
        type=int,
        default=1024,
        help="live points used by multinest")
    parser.add_argument(
        '-tol',
        type=float,
        default=0.1,
        help="tolerance for optimisation (see multinest option dlogz)")
    parser.add_argument(
        '-notes',
        type=str,
        default="default",
        help="notes on particular settings")
    parser.add_argument(
        '-bins',
        type=int,
        default=10,
        help="the number of energy bins")
    parser.add_argument(
        '-nparams',
        type=int,
        default=2,
        help="Number of parameters to fit")
    parser.add_argument(
        '-priors_from',
        type=str,
        default="Pato_2010",
        help="Obtain priors from paper <priors_from>")
    parser.add_argument(
        '-verbose',
        type=float,
        default=0,
        help="Set to 0 (no print statements), 1 (some print statements) "
             "or >1 (a lot of print statements). Set the level of print "
             "statements while fitting.")
    parser.add_argument(
        '-multicore_hash',
        type=str,
        default="",
        help="no / default, override internal determination if we need "
             "to take into account earth shielding.")

    parser.add_argument(
        '-target',
        type=str,
        default='Combined',
        help="Target material of the detector (Xe/Ge/Ar)")
    parser.add_argument('-sub_experiments', nargs='*',
                        help="Extra directories to look for data")
    parser.add_argument('--poisson', action='store_true',
                        help="add poisson noise to data")
    parser.add_argument('--shielding', action='store_true',
                        help="add shielding to simulation")
    return parser.parse_args()


def open_json(path):
    if not os.path.exists(path):
        raise FileNotFoundError(f'{path} does not exist!')
    with open(path) as file:
        json_file = json.load(file)
    return json_file


if __name__ == '__main__':
    main()
