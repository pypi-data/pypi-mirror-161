# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spacesense.common.proto.backend.backend_pb2 as backend__pb2


class BackendStub(object):
    """backend service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetS1ARD = channel.unary_stream(
            "/Backend/GetS1ARD",
            request_serializer=backend__pb2.GetS1ArdRequest.SerializeToString,
            response_deserializer=backend__pb2.GetS1ArdReply.FromString,
        )
        self.Fuse = channel.unary_unary(
            "/Backend/Fuse",
            request_serializer=backend__pb2.FuseRequest.SerializeToString,
            response_deserializer=backend__pb2.FuseReply.FromString,
        )
        self.FuseCustom = channel.unary_unary(
            "/Backend/FuseCustom",
            request_serializer=backend__pb2.FuseCustomRequest.SerializeToString,
            response_deserializer=backend__pb2.FuseReply.FromString,
        )
        self.GetS1Search = channel.unary_unary(
            "/Backend/GetS1Search",
            request_serializer=backend__pb2.GetS1SearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetS1SearchReply.FromString,
        )
        self.GetS2Search = channel.unary_unary(
            "/Backend/GetS2Search",
            request_serializer=backend__pb2.GetS2SearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetS2SearchReply.FromString,
        )


class BackendServicer(object):
    """backend service definition."""

    def GetS1ARD(self, request, context):
        """backend service definition."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Fuse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FuseCustom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetS1Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetS2Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetS1ARD": grpc.unary_stream_rpc_method_handler(
            servicer.GetS1ARD,
            request_deserializer=backend__pb2.GetS1ArdRequest.FromString,
            response_serializer=backend__pb2.GetS1ArdReply.SerializeToString,
        ),
        "Fuse": grpc.unary_unary_rpc_method_handler(
            servicer.Fuse,
            request_deserializer=backend__pb2.FuseRequest.FromString,
            response_serializer=backend__pb2.FuseReply.SerializeToString,
        ),
        "FuseCustom": grpc.unary_unary_rpc_method_handler(
            servicer.FuseCustom,
            request_deserializer=backend__pb2.FuseCustomRequest.FromString,
            response_serializer=backend__pb2.FuseReply.SerializeToString,
        ),
        "GetS1Search": grpc.unary_unary_rpc_method_handler(
            servicer.GetS1Search,
            request_deserializer=backend__pb2.GetS1SearchRequest.FromString,
            response_serializer=backend__pb2.GetS1SearchReply.SerializeToString,
        ),
        "GetS2Search": grpc.unary_unary_rpc_method_handler(
            servicer.GetS2Search,
            request_deserializer=backend__pb2.GetS2SearchRequest.FromString,
            response_serializer=backend__pb2.GetS2SearchReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Backend", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Backend(object):
    """backend service definition."""

    @staticmethod
    def GetS1ARD(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Backend/GetS1ARD",
            backend__pb2.GetS1ArdRequest.SerializeToString,
            backend__pb2.GetS1ArdReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Fuse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Backend/Fuse",
            backend__pb2.FuseRequest.SerializeToString,
            backend__pb2.FuseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FuseCustom(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Backend/FuseCustom",
            backend__pb2.FuseCustomRequest.SerializeToString,
            backend__pb2.FuseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetS1Search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Backend/GetS1Search",
            backend__pb2.GetS1SearchRequest.SerializeToString,
            backend__pb2.GetS1SearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetS2Search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Backend/GetS2Search",
            backend__pb2.GetS2SearchRequest.SerializeToString,
            backend__pb2.GetS2SearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
