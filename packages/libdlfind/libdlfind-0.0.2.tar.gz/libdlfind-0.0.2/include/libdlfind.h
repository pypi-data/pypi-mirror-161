typedef void (*c_dlf_error)();

typedef void (*c_dlf_get_gradient)(
    int *nvar,
    double *coords,
    double *energy,
    double *gradient,
    int *iimage,
    int *kiter,
    int *status);

typedef void (*c_dlf_get_hessian)(
    int *nvar,
    double *coords,
    double *hessian,
    int *status);

typedef void (*c_dlf_get_multistate_gradients)(
    int *nvar,
    double *coords,
    double *energy,
    double *gradient,
    double *coupling,
    int *needcoupling,
    int *iimage,
    int *status);

typedef void (*c_dlf_get_params)(
    int *nvar,
    int *nvar2,
    int *nspec,
    double *coords,
    double *coords2,
    int *spec,
    int *ierr,
    double *tolerance,
    int *printl,
    int *maxcycle,
    int *maxene,
    int *tatoms,
    int *icoord,
    int *iopt,
    int *iline,
    double *maxstep,
    double *scalestep,
    int *lbfgs_mem,
    int *nimage,
    double *nebk,
    int *dump,
    int *restart,
    int *nz,
    int *ncons,
    int *nconn,
    int *update,
    int *maxupd,
    double *delta,
    double *soft,
    int *inithessian,
    int *carthessian,
    int *tsrel,
    int *maxrot,
    double *tolrot,
    int *nframe,
    int *nmass,
    int *nweight,
    double *timestep,
    double *fric0,
    double *fricfac,
    double *fricp,
    int *imultistate,
    int *state_i,
    int *state_j,
    double *pf_c1,
    double *pf_c2,
    double *gp_c3,
    double *gp_c4,
    double *ln_t1,
    double *ln_t2,
    int *printfile,
    double *tolerance_e,
    double *distort,
    int *massweight,
    double *minstep,
    int *maxdump,
    int *task,
    double *temperature,
    int *po_pop_size,
    double *po_radius,
    double *po_contraction,
    double *po_tolerance_r,
    double *po_tolerance_g,
    int *po_distribution,
    int *po_maxcycle,
    int *po_init_pop_size,
    int *po_reset,
    double *po_mutation_rate,
    double *po_death_rate,
    double *po_scalefac,
    int *po_nsave,
    int *ntasks,
    int *tdlf_farm,
    int *n_po_scaling,
    double *neb_climb_test,
    double *neb_freeze_test,
    int *nzero,
    int *coupled_states,
    int *qtsflag,
    int *imicroiter,
    int *maxmicrocycle,
    int *micro_esp_fit);

typedef void (*c_dlf_put_coords)(
    int *nvar,
    int *switch_,
    double *energy,
    double *coords,
    int *iam);

typedef void (*c_dlf_update)();

void api_dl_find(
    int nvarin,
    int nvarin2,
    int nspec,
    int master,
    c_dlf_error c_dlf_error_,
    c_dlf_error c_dlf_get_gradient_,
    c_dlf_get_hessian c_dlf_get_hessian_,
    c_dlf_get_multistate_gradients c_dlf_get_multistate_gradients_,
    c_dlf_get_params c_dlf_get_params_,
    c_dlf_put_coords c_dlf_put_coords_,
    c_dlf_update c_dlf_update_);
