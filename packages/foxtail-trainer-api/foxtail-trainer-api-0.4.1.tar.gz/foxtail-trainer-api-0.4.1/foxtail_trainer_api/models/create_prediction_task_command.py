# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class CreatePredictionTaskCommand(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_user_id': 'str',
        'row_id': 'str',
        'save_predicion_data_set_with_name': 'str',
        'prediction_model_tasks': 'list[PredictionModelTaskDto]'
    }

    attribute_map = {
        'storage_user_id': 'storageUserId',
        'row_id': 'rowId',
        'save_predicion_data_set_with_name': 'savePredicionDataSetWithName',
        'prediction_model_tasks': 'predictionModelTasks'
    }

    def __init__(self, storage_user_id=None, row_id=None, save_predicion_data_set_with_name=None, prediction_model_tasks=None, local_vars_configuration=None):  # noqa: E501
        """CreatePredictionTaskCommand - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._storage_user_id = None
        self._row_id = None
        self._save_predicion_data_set_with_name = None
        self._prediction_model_tasks = None
        self.discriminator = None

        if storage_user_id is not None:
            self.storage_user_id = storage_user_id
        self.row_id = row_id
        self.save_predicion_data_set_with_name = save_predicion_data_set_with_name
        self.prediction_model_tasks = prediction_model_tasks

    @property
    def storage_user_id(self):
        """Gets the storage_user_id of this CreatePredictionTaskCommand.  # noqa: E501


        :return: The storage_user_id of this CreatePredictionTaskCommand.  # noqa: E501
        :rtype: str
        """
        return self._storage_user_id

    @storage_user_id.setter
    def storage_user_id(self, storage_user_id):
        """Sets the storage_user_id of this CreatePredictionTaskCommand.


        :param storage_user_id: The storage_user_id of this CreatePredictionTaskCommand.  # noqa: E501
        :type: str
        """

        self._storage_user_id = storage_user_id

    @property
    def row_id(self):
        """Gets the row_id of this CreatePredictionTaskCommand.  # noqa: E501


        :return: The row_id of this CreatePredictionTaskCommand.  # noqa: E501
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this CreatePredictionTaskCommand.


        :param row_id: The row_id of this CreatePredictionTaskCommand.  # noqa: E501
        :type: str
        """

        self._row_id = row_id

    @property
    def save_predicion_data_set_with_name(self):
        """Gets the save_predicion_data_set_with_name of this CreatePredictionTaskCommand.  # noqa: E501


        :return: The save_predicion_data_set_with_name of this CreatePredictionTaskCommand.  # noqa: E501
        :rtype: str
        """
        return self._save_predicion_data_set_with_name

    @save_predicion_data_set_with_name.setter
    def save_predicion_data_set_with_name(self, save_predicion_data_set_with_name):
        """Sets the save_predicion_data_set_with_name of this CreatePredictionTaskCommand.


        :param save_predicion_data_set_with_name: The save_predicion_data_set_with_name of this CreatePredictionTaskCommand.  # noqa: E501
        :type: str
        """

        self._save_predicion_data_set_with_name = save_predicion_data_set_with_name

    @property
    def prediction_model_tasks(self):
        """Gets the prediction_model_tasks of this CreatePredictionTaskCommand.  # noqa: E501


        :return: The prediction_model_tasks of this CreatePredictionTaskCommand.  # noqa: E501
        :rtype: list[PredictionModelTaskDto]
        """
        return self._prediction_model_tasks

    @prediction_model_tasks.setter
    def prediction_model_tasks(self, prediction_model_tasks):
        """Sets the prediction_model_tasks of this CreatePredictionTaskCommand.


        :param prediction_model_tasks: The prediction_model_tasks of this CreatePredictionTaskCommand.  # noqa: E501
        :type: list[PredictionModelTaskDto]
        """

        self._prediction_model_tasks = prediction_model_tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePredictionTaskCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePredictionTaskCommand):
            return True

        return self.to_dict() != other.to_dict()
