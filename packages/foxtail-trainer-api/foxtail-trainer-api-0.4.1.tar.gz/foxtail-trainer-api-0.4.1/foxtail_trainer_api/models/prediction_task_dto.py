# coding: utf-8

"""
    Foxtail Trainer

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from foxtail_trainer_api.configuration import Configuration


class PredictionTaskDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'data_set_name': 'str',
        'row_id': 'str',
        'storage_user_id': 'str',
        'storage_data_set_id': 'str',
        'total_data_set_chunks_count': 'int',
        'created_data_set_chunks_count': 'int',
        'in_prediction_queue_data_set_chunks_count': 'int',
        'in_prediction_data_set_chunks_count': 'int',
        'successfully_predicted_data_set_chunks_count': 'int',
        'prediction_failed_predicted_data_set_chunks_count': 'int',
        'uploaded_predicted_data_set_chunks_count': 'int',
        'available_data_set_chunks_count': 'int',
        'archived_data_set_chunks_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'data_set_name': 'dataSetName',
        'row_id': 'rowId',
        'storage_user_id': 'storageUserId',
        'storage_data_set_id': 'storageDataSetId',
        'total_data_set_chunks_count': 'totalDataSetChunksCount',
        'created_data_set_chunks_count': 'createdDataSetChunksCount',
        'in_prediction_queue_data_set_chunks_count': 'inPredictionQueueDataSetChunksCount',
        'in_prediction_data_set_chunks_count': 'inPredictionDataSetChunksCount',
        'successfully_predicted_data_set_chunks_count': 'successfullyPredictedDataSetChunksCount',
        'prediction_failed_predicted_data_set_chunks_count': 'predictionFailedPredictedDataSetChunksCount',
        'uploaded_predicted_data_set_chunks_count': 'uploadedPredictedDataSetChunksCount',
        'available_data_set_chunks_count': 'availableDataSetChunksCount',
        'archived_data_set_chunks_count': 'archivedDataSetChunksCount'
    }

    def __init__(self, id=None, data_set_name=None, row_id=None, storage_user_id=None, storage_data_set_id=None, total_data_set_chunks_count=None, created_data_set_chunks_count=None, in_prediction_queue_data_set_chunks_count=None, in_prediction_data_set_chunks_count=None, successfully_predicted_data_set_chunks_count=None, prediction_failed_predicted_data_set_chunks_count=None, uploaded_predicted_data_set_chunks_count=None, available_data_set_chunks_count=None, archived_data_set_chunks_count=None, local_vars_configuration=None):  # noqa: E501
        """PredictionTaskDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._data_set_name = None
        self._row_id = None
        self._storage_user_id = None
        self._storage_data_set_id = None
        self._total_data_set_chunks_count = None
        self._created_data_set_chunks_count = None
        self._in_prediction_queue_data_set_chunks_count = None
        self._in_prediction_data_set_chunks_count = None
        self._successfully_predicted_data_set_chunks_count = None
        self._prediction_failed_predicted_data_set_chunks_count = None
        self._uploaded_predicted_data_set_chunks_count = None
        self._available_data_set_chunks_count = None
        self._archived_data_set_chunks_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.data_set_name = data_set_name
        self.row_id = row_id
        if storage_user_id is not None:
            self.storage_user_id = storage_user_id
        if storage_data_set_id is not None:
            self.storage_data_set_id = storage_data_set_id
        if total_data_set_chunks_count is not None:
            self.total_data_set_chunks_count = total_data_set_chunks_count
        if created_data_set_chunks_count is not None:
            self.created_data_set_chunks_count = created_data_set_chunks_count
        if in_prediction_queue_data_set_chunks_count is not None:
            self.in_prediction_queue_data_set_chunks_count = in_prediction_queue_data_set_chunks_count
        if in_prediction_data_set_chunks_count is not None:
            self.in_prediction_data_set_chunks_count = in_prediction_data_set_chunks_count
        if successfully_predicted_data_set_chunks_count is not None:
            self.successfully_predicted_data_set_chunks_count = successfully_predicted_data_set_chunks_count
        if prediction_failed_predicted_data_set_chunks_count is not None:
            self.prediction_failed_predicted_data_set_chunks_count = prediction_failed_predicted_data_set_chunks_count
        if uploaded_predicted_data_set_chunks_count is not None:
            self.uploaded_predicted_data_set_chunks_count = uploaded_predicted_data_set_chunks_count
        if available_data_set_chunks_count is not None:
            self.available_data_set_chunks_count = available_data_set_chunks_count
        if archived_data_set_chunks_count is not None:
            self.archived_data_set_chunks_count = archived_data_set_chunks_count

    @property
    def id(self):
        """Gets the id of this PredictionTaskDto.  # noqa: E501


        :return: The id of this PredictionTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PredictionTaskDto.


        :param id: The id of this PredictionTaskDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def data_set_name(self):
        """Gets the data_set_name of this PredictionTaskDto.  # noqa: E501


        :return: The data_set_name of this PredictionTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._data_set_name

    @data_set_name.setter
    def data_set_name(self, data_set_name):
        """Sets the data_set_name of this PredictionTaskDto.


        :param data_set_name: The data_set_name of this PredictionTaskDto.  # noqa: E501
        :type: str
        """

        self._data_set_name = data_set_name

    @property
    def row_id(self):
        """Gets the row_id of this PredictionTaskDto.  # noqa: E501


        :return: The row_id of this PredictionTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._row_id

    @row_id.setter
    def row_id(self, row_id):
        """Sets the row_id of this PredictionTaskDto.


        :param row_id: The row_id of this PredictionTaskDto.  # noqa: E501
        :type: str
        """

        self._row_id = row_id

    @property
    def storage_user_id(self):
        """Gets the storage_user_id of this PredictionTaskDto.  # noqa: E501


        :return: The storage_user_id of this PredictionTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._storage_user_id

    @storage_user_id.setter
    def storage_user_id(self, storage_user_id):
        """Sets the storage_user_id of this PredictionTaskDto.


        :param storage_user_id: The storage_user_id of this PredictionTaskDto.  # noqa: E501
        :type: str
        """

        self._storage_user_id = storage_user_id

    @property
    def storage_data_set_id(self):
        """Gets the storage_data_set_id of this PredictionTaskDto.  # noqa: E501


        :return: The storage_data_set_id of this PredictionTaskDto.  # noqa: E501
        :rtype: str
        """
        return self._storage_data_set_id

    @storage_data_set_id.setter
    def storage_data_set_id(self, storage_data_set_id):
        """Sets the storage_data_set_id of this PredictionTaskDto.


        :param storage_data_set_id: The storage_data_set_id of this PredictionTaskDto.  # noqa: E501
        :type: str
        """

        self._storage_data_set_id = storage_data_set_id

    @property
    def total_data_set_chunks_count(self):
        """Gets the total_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The total_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._total_data_set_chunks_count

    @total_data_set_chunks_count.setter
    def total_data_set_chunks_count(self, total_data_set_chunks_count):
        """Sets the total_data_set_chunks_count of this PredictionTaskDto.


        :param total_data_set_chunks_count: The total_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._total_data_set_chunks_count = total_data_set_chunks_count

    @property
    def created_data_set_chunks_count(self):
        """Gets the created_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The created_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._created_data_set_chunks_count

    @created_data_set_chunks_count.setter
    def created_data_set_chunks_count(self, created_data_set_chunks_count):
        """Sets the created_data_set_chunks_count of this PredictionTaskDto.


        :param created_data_set_chunks_count: The created_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._created_data_set_chunks_count = created_data_set_chunks_count

    @property
    def in_prediction_queue_data_set_chunks_count(self):
        """Gets the in_prediction_queue_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The in_prediction_queue_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._in_prediction_queue_data_set_chunks_count

    @in_prediction_queue_data_set_chunks_count.setter
    def in_prediction_queue_data_set_chunks_count(self, in_prediction_queue_data_set_chunks_count):
        """Sets the in_prediction_queue_data_set_chunks_count of this PredictionTaskDto.


        :param in_prediction_queue_data_set_chunks_count: The in_prediction_queue_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._in_prediction_queue_data_set_chunks_count = in_prediction_queue_data_set_chunks_count

    @property
    def in_prediction_data_set_chunks_count(self):
        """Gets the in_prediction_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The in_prediction_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._in_prediction_data_set_chunks_count

    @in_prediction_data_set_chunks_count.setter
    def in_prediction_data_set_chunks_count(self, in_prediction_data_set_chunks_count):
        """Sets the in_prediction_data_set_chunks_count of this PredictionTaskDto.


        :param in_prediction_data_set_chunks_count: The in_prediction_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._in_prediction_data_set_chunks_count = in_prediction_data_set_chunks_count

    @property
    def successfully_predicted_data_set_chunks_count(self):
        """Gets the successfully_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The successfully_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._successfully_predicted_data_set_chunks_count

    @successfully_predicted_data_set_chunks_count.setter
    def successfully_predicted_data_set_chunks_count(self, successfully_predicted_data_set_chunks_count):
        """Sets the successfully_predicted_data_set_chunks_count of this PredictionTaskDto.


        :param successfully_predicted_data_set_chunks_count: The successfully_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._successfully_predicted_data_set_chunks_count = successfully_predicted_data_set_chunks_count

    @property
    def prediction_failed_predicted_data_set_chunks_count(self):
        """Gets the prediction_failed_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The prediction_failed_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._prediction_failed_predicted_data_set_chunks_count

    @prediction_failed_predicted_data_set_chunks_count.setter
    def prediction_failed_predicted_data_set_chunks_count(self, prediction_failed_predicted_data_set_chunks_count):
        """Sets the prediction_failed_predicted_data_set_chunks_count of this PredictionTaskDto.


        :param prediction_failed_predicted_data_set_chunks_count: The prediction_failed_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._prediction_failed_predicted_data_set_chunks_count = prediction_failed_predicted_data_set_chunks_count

    @property
    def uploaded_predicted_data_set_chunks_count(self):
        """Gets the uploaded_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The uploaded_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._uploaded_predicted_data_set_chunks_count

    @uploaded_predicted_data_set_chunks_count.setter
    def uploaded_predicted_data_set_chunks_count(self, uploaded_predicted_data_set_chunks_count):
        """Sets the uploaded_predicted_data_set_chunks_count of this PredictionTaskDto.


        :param uploaded_predicted_data_set_chunks_count: The uploaded_predicted_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._uploaded_predicted_data_set_chunks_count = uploaded_predicted_data_set_chunks_count

    @property
    def available_data_set_chunks_count(self):
        """Gets the available_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The available_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._available_data_set_chunks_count

    @available_data_set_chunks_count.setter
    def available_data_set_chunks_count(self, available_data_set_chunks_count):
        """Sets the available_data_set_chunks_count of this PredictionTaskDto.


        :param available_data_set_chunks_count: The available_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._available_data_set_chunks_count = available_data_set_chunks_count

    @property
    def archived_data_set_chunks_count(self):
        """Gets the archived_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501


        :return: The archived_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :rtype: int
        """
        return self._archived_data_set_chunks_count

    @archived_data_set_chunks_count.setter
    def archived_data_set_chunks_count(self, archived_data_set_chunks_count):
        """Sets the archived_data_set_chunks_count of this PredictionTaskDto.


        :param archived_data_set_chunks_count: The archived_data_set_chunks_count of this PredictionTaskDto.  # noqa: E501
        :type: int
        """

        self._archived_data_set_chunks_count = archived_data_set_chunks_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictionTaskDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PredictionTaskDto):
            return True

        return self.to_dict() != other.to_dict()
