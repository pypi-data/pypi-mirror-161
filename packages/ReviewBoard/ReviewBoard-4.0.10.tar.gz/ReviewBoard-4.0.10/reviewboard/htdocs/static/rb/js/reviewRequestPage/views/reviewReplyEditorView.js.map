{"version":3,"sources":["reviewReplyEditorView.es6.js"],"names":[],"mappings":"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","file":"reviewReplyEditorView.js","sourcesContent":["/**\n * Handles editing a reply to a comment in a review.\n *\n * This will handle the \"New Comment\" link and the draft banners for the\n * review.\n */\nRB.ReviewRequestPage.ReviewReplyEditorView = Backbone.View.extend({\n    commentTemplate: _.template(dedent`\n        <li <% if (isDraft) { %>class=\"draft\"<% } %>\n            <% if (commentID) { %>data-comment-id=\"<%= commentID %>\"<% } %>>\n         <% if (anchorName) { %>\n          <a class=\"comment-anchor\" name=\"<%- anchorName %>\"></a>\n          <div class=\"floating-anchor\">\n           <a href=\"#<%- anchorName %>\"\n              class=\"fa fa-link fa-flip-horizontal\"></a>\n          </div>\n         <% } %>\n         <div class=\"comment-author\">\n          <label for=\"<%= id %>\">\n           <div class=\"avatar-container\"><%= avatarHTML %></div>\n           <div class=\"user-reply-info\">\n            <a href=\"<%= userPageURL %>\" class=\"user\"><%- fullName %></a>\n        <% if (timestamp) { %>\n            <span class=\"timestamp\">\n             <time class=\"timesince\" datetime=\"<%= timestampISO %>\">\n        <%= timestamp %></time>\n            </span>\n        <% } %>\n           </div>\n          </label>\n         </div>\n         <div>\n          <pre id=\"<%= id %>\" class=\"comment-text reviewtext\"><%- text %></pre>\n         </div>\n        </li>\n    `),\n\n    events: {\n        'click .add_comment_link': '_onAddCommentClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The editor model.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$addCommentLink = null;\n        this._$draftComment = null;\n        this._$editor = null;\n        this._$commentsList = null;\n    },\n\n    /**\n     * Render the comment section.\n     *\n     * If there were any draft comments found, then editors will be\n     * created for them, the New Comment link will be hidden.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$addCommentLink = this.$('.add_comment_link');\n        this._$commentsList = this.$('.reply-comments');\n\n        /* See if there's a draft comment to import from the page. */\n        const $draftComment = this._$commentsList.children('.draft');\n\n        if ($draftComment.length !== 0) {\n            const $time = $draftComment.find('time');\n            const $reviewText = $draftComment.find('.reviewtext');\n\n            this.model.set({\n                commentID: $draftComment.data('comment-id'),\n                text: $reviewText.html(),\n                timestamp: new Date($time.attr('datetime')),\n                richText: $reviewText.hasClass('rich-text'),\n                hasDraft: true,\n            });\n            this._createCommentEditor($draftComment);\n        }\n\n        this.listenTo(this.model, 'textUpdated', () => {\n            if (this._$editor) {\n                const reviewRequest =\n                    this.model.get('review').get('parentObject');\n\n                RB.formatText(this._$editor, {\n                    newText: this.model.get('text'),\n                    richText: this.model.get('richText'),\n                    bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n                });\n            }\n        });\n\n        this.model.on('resetState', () => {\n            if (this._$draftComment) {\n                this._$draftComment.fadeOut(() => {\n                    this._$draftComment.remove();\n                    this._$draftComment = null;\n                });\n            }\n\n            this._$addCommentLink.fadeIn();\n        });\n\n        this.model.on('published', this._onPublished, this);\n    },\n\n    /**\n     * Open the comment editor for a new comment.\n     */\n    openCommentEditor() {\n        this._createCommentEditor(this._makeCommentElement());\n        this._$editor.inlineEditor('startEdit');\n    },\n\n    /**\n     * Create a comment editor for an element.\n     *\n     * Args:\n     *     $draftComment (jQuery):\n     *         The draft comment element.\n     */\n    _createCommentEditor($draftComment) {\n        const reviewRequestEditor = this.options.reviewRequestEditor;\n\n        this._$draftComment = $draftComment;\n\n        this._$editor = $draftComment.find('pre.reviewtext');\n        this._$editor\n            .inlineEditor(\n                _.extend({\n                    cls: 'inline-comment-editor',\n                    editIconClass: 'rb-icon rb-icon-edit',\n                    notifyUnchangedCompletion: true,\n                    multiline: true,\n                    hasRawValue: true,\n                    rawValue: this._$editor.data('raw-value') || '',\n                },\n                RB.TextEditorView.getInlineEditorOptions({\n                    richText: this._$editor.hasClass('rich-text'),\n                }))\n            )\n            .removeAttr('data-raw-value')\n            .on({\n                beginEdit: () => {\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.incr('editCount');\n                    }\n                },\n                complete: (e, value) => {\n                    const textEditor = RB.TextEditorView.getFromInlineEditor(\n                        this._$editor);\n\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.decr('editCount');\n                    }\n\n                    this.model.set({\n                        text: value,\n                        richText: textEditor.richText,\n                    });\n                    this.model.save();\n                },\n                cancel: () => {\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.decr('editCount');\n                    }\n\n                    this.model.resetStateIfEmpty();\n                },\n            });\n\n        this._$addCommentLink.hide();\n    },\n\n    /**\n     * Create an element for the comment form.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the comment element.\n     *\n     * Option Args:\n     *     now (Moment):\n     *         The current time.\n     *\n     *     richText (boolean):\n     *         Whether the text is in a rich-text format.\n     *\n     *     text (string):\n     *         The text for the comment.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly-created element.\n     */\n    _makeCommentElement(options={}) {\n        const userSession = RB.UserSession.instance;\n        const reviewRequest = this.model.get('review').get('parentObject');\n\n        const now = (\n            options.now ||\n            moment().utcOffset(userSession.get('timezoneOffset')));\n\n        const $el = $(this.commentTemplate(_.extend({\n                anchorName: null,\n                id: _.uniqueId('draft_comment_'),\n                text: '',\n                commentID: null,\n                userPageURL: userSession.get('userPageURL'),\n                fullName: userSession.get('fullName'),\n                avatarHTML: userSession.getAvatarHTML(32),\n                isDraft: true,\n                timestampISO: now.format(),\n\n                /*\n                 * Note that we format the a.m./p.m. this way to match\n                 * what's coming from the Django templates.\n                 */\n                timestamp: now.format('MMMM Do, YYYY, h:mm ') +\n                           (now.hour() < 12 ? 'a.m.' : 'p.m.'),\n            }, options)))\n            .find('.user')\n                .user_infobox()\n            .end()\n            .find('time.timesince')\n                .timesince()\n            .end();\n\n        Djblets.enableRetinaImages($el);\n\n        if (options.text) {\n            RB.formatText($el.find('.reviewtext'), {\n                newText: options.text,\n                richText: options.richText,\n                bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            });\n        }\n\n        $el.appendTo(this._$commentsList);\n\n        return $el;\n    },\n\n    /**\n     * Handler for when the New Comment link is clicked.\n     *\n     * Creates a new comment form and editor.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onAddCommentClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.openCommentEditor();\n    },\n\n    /**\n     * Handler for when the reply is published.\n     *\n     * Updates the draft comment to be a standard comment, and brings back\n     * the New Comment link.\n     */\n    _onPublished() {\n        if (this._$draftComment) {\n            const model = this.model;\n            const contextType = model.get('contextType');\n\n            this._$draftComment.replaceWith(this._makeCommentElement({\n                anchorName: model.get('anchorPrefix') +\n                            model.get('replyObject').id,\n                commentID: model.get('commentID'),\n                text: model.get('text'),\n                richText: model.get('richText'),\n                isDraft: false,\n            }));\n\n            this._$draftComment = null;\n        }\n    },\n});\n"]}