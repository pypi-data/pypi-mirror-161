{"version":3,"sources":["repositoryCommitsCollection.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,iBAAH,GAAuB,EAAE,CAAC,cAAH,CAAkB,MAAlB,CAAyB;EAC5C,KAAK,EAAE,EAAE,CAAC,gBADkC;;EAG5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,UAAU,CAAC,MAAD,EAAS,OAAT,EAAkB;IACxB,QAAQ,CAAC,UAAT,CAAoB,SAApB,CAA8B,UAA9B,CAAyC,IAAzC,CAA8C,IAA9C,EAAoD,MAApD,EAA4D,OAA5D;IACA,KAAK,OAAL,GAAe,OAAf;IACA,KAAK,IAAL,GAAY,KAAZ;IACA,KAAK,QAAL,GAAgB,KAAhB;IACA,KAAK,UAAL,GAAkB,IAAlB;EACH,CA7B2C;;EA+B5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,KAAK,CAAC,QAAD,EAAW;IACZ,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAzB;IAEA,KAAK,UAAL,GAAkB,OAAO,CAAC,OAAO,CAAC,MAAR,GAAiB,CAAlB,CAAP,CAA4B,MAA9C;IACA,KAAK,QAAL,GAAgB,CAAC,KAAK,UAAtB;IAEA,OAAO,QAAQ,CAAC,OAAhB;EACH,CAjD2C;;EAmD5C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,GAAG,GAAG;IACF,MAAM,MAAM,GAAG,EAAf;;IAEA,IAAI,KAAK,OAAL,CAAa,KAAb,KAAuB,SAA3B,EAAsC;MAClC,MAAM,CAAC,KAAP,GAAe,KAAK,OAAL,CAAa,KAA5B;IACH;;IAED,IAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,SAA5B,EAAuC;MACnC,MAAM,CAAC,MAAP,GAAgB,KAAK,OAAL,CAAa,MAA7B;IACH;;IAED,OAAO,KAAK,OAAL,CAAa,OAAb,GAAuB,GAAvB,GAA6B,CAAC,CAAC,KAAF,CAAQ,MAAR,CAApC;EACH,CAtE2C;;EAwE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,YAAY,GAAG;IACX,OAAO,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,QAApB,IAAgC,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAA5D;EACH,CAxF2C;;EA0F5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS,GAAa;IAAA,IAAZ,OAAY,uEAAJ,EAAI;;IAClB,IAAI,KAAK,YAAL,EAAJ,EAAyB;MACrB,KAAK,OAAL,CAAa,KAAb,GAAqB,KAAK,UAA1B;MAEA,KAAK,KAAL,CAAW;QACP,MAAM,EAAE,KADD;QAEP,OAAO,EAAE,MAAM;UACX,KAAK,IAAL,GAAY,KAAZ;;UAEA,IAAI,CAAC,CAAC,UAAF,CAAa,OAAO,CAAC,OAArB,CAAJ,EAAmC;YAC/B,OAAO,CAAC,OAAR;UACH;QACJ,CARM;QASP,KAAK,EAAE,OAAO,CAAC;MATR,CAAX;IAWH;EACJ;;AAtI2C,CAAzB,CAAvB","file":"repositoryCommitsCollection.js","sourcesContent":["/**\n * A collection of commits in a repository.\n *\n * This is expected to be used in an ephemeral manner to get a list of commits\n * from a given start point (usually corresponding to some branch in the\n * repository).\n */\nRB.RepositoryCommits = RB.BaseCollection.extend({\n    model: RB.RepositoryCommit,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (Object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The start commit for fetching commit logs.\n     *\n     *     branch (string):\n     *         The branch name for fetching commit logs.\n     *\n     *     urlBase (string):\n     *         The base URL for the API request.\n     */\n    initialize(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.options = options;\n        this.busy = false;\n        this.complete = false;\n        this._nextStart = null;\n    },\n\n    /**\n     * Parse the response.\n     *\n     * Args:\n     *     response (object):\n     *         Response, parsed from the JSON returned by the server.\n     *\n     * Returns:\n     *     Array of object:\n     *     An array of commits.\n     */\n    parse(response) {\n        const commits = response.commits;\n\n        this._nextStart = commits[commits.length - 1].parent;\n        this.complete = !this._nextStart;\n\n        return response.commits;\n    },\n\n    /**\n     * Get the URL to fetch for the next page of results.\n     *\n     * Returns:\n     *     string:\n     *     The URL to fetch.\n     */\n    url() {\n        const params = {};\n\n        if (this.options.start !== undefined) {\n            params.start = this.options.start;\n        }\n\n        if (this.options.branch !== undefined) {\n            params.branch = this.options.branch;\n        }\n\n        return this.options.urlBase + '?' + $.param(params);\n    },\n\n    /**\n     * Return whether another page of commits can be fetched.\n     *\n     * A page can only be fetched if there's at least 1 commit already\n     * fetched, the last commit in the repository has not been fetched, and\n     * another fetch operation isn't in progress.\n     *\n     * Version Added:\n     *     4.0.3\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if another page can be fetched. ``false`` if one cannot.\n     */\n    canFetchNext() {\n        return !this.busy && !this.complete && this.models.length > 0;\n    },\n\n    /**\n     * Fetch the next page of results.\n     *\n     * This can be called multiple times. If this is called when a fetch is\n     * already in progress, it's a no-op. Otherwise, if there are more commits\n     * to load, it will fetch them and add them to the bottom of the\n     * collection.\n     *\n     * It's up to the caller to check :js:func:`canFetchNext()` before calling\n     * this if they want callbacks to fire.\n     *\n     * Version Changed:\n     *     4.0.3:\n     *     Added the ``options`` argument with ``error`` and ``success``\n     *     callbacks.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for fetching the next page of results.\n     *\n     * Option Args:\n     *     error (function):\n     *         A function to call if fetching a page fails. This must take\n     *         ``collection, xhr`` arguments.\n     *\n     *     success (function):\n     *         A function to call if fetching a page succeeds.\n     */\n    fetchNext(options={}) {\n        if (this.canFetchNext()) {\n            this.options.start = this._nextStart;\n\n            this.fetch({\n                remove: false,\n                success: () => {\n                    this.busy = false;\n\n                    if (_.isFunction(options.success)) {\n                        options.success();\n                    }\n                },\n                error: options.error,\n            });\n        }\n    }\n});\n"]}