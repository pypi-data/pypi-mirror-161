{"version":3,"sources":["notificationManagerTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,yCAAD,EAA4C,YAAW;EACxD,MAAM,QAAQ,GAAG,EAAE,CAAC,mBAAH,CAAuB,QAAxC;EACA,IAAI,gBAAJ;;EAEA,MAAM,YAAY,GAAG,UAAS,KAAT,EAAgB,OAAhB,EAAyB;IAC1C,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,OAAL,GAAe,OAAf;;IACA,KAAK,KAAL,GAAa,YAAW,CAAE,CAA1B;EACH,CAJD;;EAKA,YAAY,CAAC,iBAAb,GAAiC,YAAW;IACxC,YAAY,CAAC,UAAb,GAA0B,SAA1B;EACH,CAFD;;EAIA,UAAU,CAAC,YAAW;IAClB,gBAAgB,GAAG,EAAE,CAAC,mBAAH,CAAuB,YAA1C;IACA,EAAE,CAAC,mBAAH,CAAuB,YAAvB,GAAsC,YAAtC;IAEA,EAAE,CAAC,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,4BAA5B,EAA0D,IAA1D;IAEA,QAAQ,CAAC,KAAT;IAEA,MAAM,CAAC,YAAY,CAAC,UAAd,CAAN,CAAgC,IAAhC,CAAqC,SAArC;EACH,CATS,CAAV;EAWA,SAAS,CAAC,YAAW;IACjB,EAAE,CAAC,mBAAH,CAAuB,YAAvB,GAAsC,gBAAtC;EACH,CAFQ,CAAT;EAIA,QAAQ,CAAC,sBAAD,EAAyB,YAAW;IACxC,EAAE,CAAC,oBAAD,EAAuB,YAAW;MAChC,QAAQ,CAAC,MAAT,CAAgB;QACZ,KAAK,EAAE,MADK;QAEZ,IAAI,EAAE;MAFM,CAAhB;MAKA,MAAM,YAAY,GAAG,QAAQ,CAAC,aAA9B;MACA,MAAM,CAAC,YAAD,CAAN,CAAqB,GAArB,CAAyB,IAAzB,CAA8B,IAA9B;MACA,MAAM,CAAC,YAAY,CAAC,KAAd,CAAN,CAA2B,IAA3B,CAAgC,MAAhC;MACA,MAAM,CAAC,YAAY,CAAC,OAAb,CAAqB,IAAtB,CAAN,CAAkC,IAAlC,CAAuC,gBAAvC;IACH,CAVC,CAAF;IAYA,EAAE,CAAC,eAAD,EAAkB,YAAW;MAC3B,QAAQ,CAAC,UAAT,GAAsB,IAAtB;MACA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,IADrB;MAGA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,IAArC;IACH,CANC,CAAF;IASA,EAAE,CAAC,2CAAD,EAA8C,YAAW;MACvD,QAAQ,CAAC,UAAT,GAAsB,KAAtB;MACA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,IADrB;MAGA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,KAArC;IACH,CANC,CAAF;IAQC,EAAE,CAAC,8CAAD,EAAiD,YAAW;MAC3D,QAAQ,CAAC,UAAT,GAAsB,IAAtB;MACA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,KADrB;MAGA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,KAArC;IACH,CANE,CAAF;EAOJ,CArCO,CAAR;AAsCH,CAlEI,CAAL","file":"notificationManagerTests.js","sourcesContent":["suite('rb/ui/managers/NotificationManagerModel', function() {\n    const instance = RB.NotificationManager.instance;\n    let origNotification;\n\n    const Notification = function(title, options) {\n        this.title = title;\n        this.options = options;\n        this.close = function() {};\n    };\n    Notification.requestPermission = function() {\n        Notification.permission = 'granted';\n    };\n\n    beforeEach(function() {\n        origNotification = RB.NotificationManager.Notification;\n        RB.NotificationManager.Notification = Notification;\n\n        RB.UserSession.instance.set('enableDesktopNotifications', true);\n\n        instance.setup();\n\n        expect(Notification.permission).toBe('granted');\n    });\n\n    afterEach(function() {\n        RB.NotificationManager.Notification = origNotification;\n    });\n\n    describe('Notification Manager', function() {\n        it('Calls external API', function() {\n            instance.notify({\n                title: 'Test',\n                body: 'This is a test',\n            });\n\n            const notification = instance._notification;\n            expect(notification).not.toBe(null);\n            expect(notification.title).toBe('Test');\n            expect(notification.options.body).toBe('This is a test');\n        });\n\n        it('Should notify', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(true);\n        });\n\n\n        it('Should not notify due to user permissions', function() {\n            instance._canNotify = false;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n\n         it('Should not notify due to browser permissions', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(false);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n    });\n});\n"]}