{"version":3,"sources":["relatedUserSelectorView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;EAEZ,MAAM,cAAc,GAAG,CAAC,CAAC,QAAF,0RAAvB;EAeA;AACA;AACA;;;EACA,EAAE,CAAC,uBAAH,GAA6B,OAAO,CAAC,yBAAR,CAAkC,MAAlC,CAAyC;IAClE,qBAAqB,gCAD6C;;IAGlE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,UAAU,CAAC,OAAD,EAAU;MAChB,OAAO,CAAC,yBAAR,CAAkC,SAAlC,CAA4C,UAA5C,CAAuD,IAAvD,CACI,IADJ,EAEI,CAAC,CAAC,QAAF,CAAW;QACP,gBAAgB,EAAE;UACd,WAAW,EAAE,CAAC,UAAD,EAAa,UAAb,CADC;UAEd,SAAS,EAAE,CACP;YAAC,KAAK,EAAE;UAAR,CADO,EAEP;YAAC,KAAK,EAAE;UAAR,CAFO,CAFG;UAMd,UAAU,EAAE;QANE;MADX,CAAX,EASG,OATH,CAFJ;MAaA,KAAK,gBAAL,GAAwB,OAAO,CAAC,eAAR,IAA2B,EAAnD;MACA,KAAK,WAAL,GAAmB,CAAC,CAAC,OAAO,CAAC,UAA7B;IACH,CArCiE;;IAuClE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,YAAY,CAAC,IAAD,EAAO;MACf,OAAO,cAAc,CAAC,CAAC,CAAC,MAAF,CAClB;QAAE,UAAU,EAAE,KAAK;MAAnB,CADkB,EAElB,IAFkB,CAAD,CAArB;IAIH,CAvDiE;;IAyDlE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,WAAW,CAAC,KAAD,EAAQ,QAAR,EAAkB;MACzB,MAAM,MAAM,GAAG;QACX,QAAQ,EAAE,CADC;QAEX,eAAe,kCAFJ;QAGX,cAAc,EAHH;QAIX,qBAAqB;MAJV,CAAf;;MAOA,IAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;QACpB,MAAM,CAAC,CAAP,GAAW,KAAX;MACH;;MAED,CAAC,CAAC,IAAF,CAAO;QACH,IAAI,EAAE,KADH;QAEH,GAAG,YAAK,SAAL,SAAiB,KAAK,gBAAtB,eAFA;QAGH,IAAI,EAAE,MAHH;;QAIH,OAAO,CAAC,OAAD,EAAU;UACb,QAAQ,CAAC,OAAO,CAAC,KAAR,CAAc,GAAd,CAAkB,CAAC,KAAK;YAC7B,UAAU,EAAE,CAAC,CAAC,WAAF,CAAc,EAAd,CADiB;YAE7B,QAAQ,EAAE,CAAC,CAAC,QAFiB;YAG7B,EAAE,EAAE,CAAC,CAAC,EAHuB;YAI7B,QAAQ,EAAE,CAAC,CAAC;UAJiB,CAAL,CAAnB,CAAD,CAAR;QAMH,CAXE;;QAYH,KAAK,GAAU;UAAA,kCAAN,IAAM;YAAN,IAAM;UAAA;;UACX,OAAO,CAAC,KAAR,CAAc,mBAAd,EAAmC,IAAnC;UACA,QAAQ;QACX;;MAfE,CAAP;IAiBH;;EAlGiE,CAAzC,CAA7B;AAsGC,CA1HD","file":"relatedUserSelectorView.js","sourcesContent":["(function() {\n\nconst optionTemplate = _.template(dedent`\n    <div>\n    <% if (useAvatars && avatarHTML) { %>\n     <%= avatarHTML %>\n    <% } %>\n    <% if (fullname) { %>\n     <span class=\"title\"><%- fullname %></span>\n     <span class=\"description\">(<%- username %>)</span>\n    <% } else { %>\n     <span class=\"title\"><%- username %></span>\n    <% } %>\n    </div>\n`);\n\n\n/**\n * A widget to select related users using search and autocomplete.\n */\nRB.RelatedUserSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for users...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     useAvatars (boolean):\n     *         Whether to show avatars. Off by default.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['fullname', 'username'],\n                    sortField: [\n                        {field: 'fullname'},\n                        {field: 'username'},\n                    ],\n                    valueField: 'username',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._useAvatars = !!options.useAvatars;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(_.extend(\n            { useAvatars: this._useAvatars },\n            item\n        ));\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            fullname: 1,\n            'only-fields': 'avatar_html,fullname,id,username',\n            'only-links': '',\n            'render-avatars-at': '20',\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/users/`,\n            data: params,\n            success(results) {\n                callback(results.users.map(u => ({\n                    avatarHTML: u.avatar_html[20],\n                    fullname: u.fullname,\n                    id: u.id,\n                    username: u.username,\n                })));\n            },\n            error(...args) {\n                console.error('User query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"]}