{"version":3,"sources":["diffViewerPageModel.es6.js"],"names":[],"mappings":"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","file":"diffViewerPageModel.js","sourcesContent":["/**\n * The model for the diff viewer page.\n *\n * This handles all attribute storage and diff context parsing needed to\n * display and update the diff viewer.\n *\n * Model Attributes:\n *     canDownloadDiff (boolean):\n *         Whether a diff file can be downloaded, given the current revision\n *         state.\n *\n *     filenamePatterns (Array):\n *         A list of filenames or patterns used to filter the diff viewer.\n *         This is optional.\n *\n *     numDiffs (number):\n *         The total number of diffs.\n */\nRB.DiffViewerPage = RB.ReviewablePage.extend({\n    defaults: _.defaults({\n        canDownloadDiff: false,\n        filenamePatterns: null,\n        numDiffs: 1,\n    }, RB.ReviewablePage.prototype.defaults),\n\n    /**\n     * Construct the page's instance.\n     *\n     * This defines child objects for managing state related to the page\n     * prior to parsing the provided attributes payload and initializing\n     * the instance.\n     *\n     * NOTE: this explicitly doesn't use the shorthand \"member function\" syntax\n     * because otherwise browsers get confused about whether this is a class\n     * constructor.\n     */\n    constructor: function constructor() {\n        this.commentsHint = new RB.DiffCommentsHint();\n        this.commits = new RB.DiffCommitCollection();\n        this.commitHistoryDiff = new RB.CommitHistoryDiffEntryCollection();\n        this.files = new RB.DiffFileCollection();\n        this.pagination = new RB.Pagination();\n        this.revision = new RB.DiffRevision();\n\n        RB.ReviewablePage.apply(this, arguments);\n    },\n\n    /**\n     * Initialize the page.\n     *\n     * This will begin listening for events on the page and set up default\n     * state.\n     */\n    initialize() {\n        RB.ReviewablePage.prototype.initialize.apply(this, arguments);\n\n        this.diffReviewables = new RB.DiffReviewableCollection([], {\n            reviewRequest: this.get('reviewRequest'),\n        });\n        this.diffReviewables.watchFiles(this.files);\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    parse(rsp) {\n        return _.extend(this._parseDiffContext(rsp),\n                        RB.ReviewablePage.prototype.parse.call(this, rsp));\n    },\n\n    /**\n     * Load a new diff from the server.\n     *\n     * Args:\n     *     options (object):\n     *         The options for the diff to load.\n     *\n     * Option Args:\n     *     baseCommitID (number):\n     *         The primary key of the base commit to base the diff off of.\n     *\n     *     filenames (string):\n     *         A comma-separated string of filenames or filename patterns to\n     *         load.\n     *\n     *     page (number):\n     *         The page number to load. Defaults to the first page.\n     *\n     *     revision (number):\n     *         The base revision. If displaying an interdiff, this will be\n     *         the first revision in the range.\n     *\n     *     interdiffRevision (number):\n     *         The optional interdiff revision, representing the ending\n     *         revision in a range.\n     *\n     *     tipCommitID (number):\n     *         The primary key of the tip commit to base the diff off of.\n     */\n    loadDiffRevision(options={}) {\n        const reviewRequestURL = this.get('reviewRequest').url();\n        const queryData = [];\n\n        if (options.revision) {\n            queryData.push({\n                name: 'revision',\n                value: options.revision,\n            });\n        }\n\n        if (options.interdiffRevision) {\n            queryData.push({\n                name: 'interdiff-revision',\n                value: options.interdiffRevision,\n            });\n        } else {\n            if (options.baseCommitID) {\n                queryData.push({\n                    name: 'base-commit-id',\n                    value: options.baseCommitID,\n                });\n            }\n\n            if (options.tipCommitID) {\n                queryData.push({\n                    name: 'tip-commit-id',\n                    value: options.tipCommitID,\n                });\n            }\n        }\n\n        if (options.page && options.page !== 1) {\n            queryData.push({\n                name: 'page',\n                value: options.page,\n            });\n        }\n\n        if (options.filenamePatterns) {\n            queryData.push({\n                name: 'filenames',\n                value: options.filenamePatterns,\n            });\n        }\n\n        const url = Djblets.buildURL({\n            baseURL: `${reviewRequestURL}diff-context/`,\n            queryData: queryData,\n        });\n\n        $.ajax(url)\n            .done(rsp => this.set(this._parseDiffContext(rsp.diff_context)));\n    },\n\n    /**\n     * Parse context for a displayed diff.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    _parseDiffContext(rsp) {\n        if (rsp.comments_hint) {\n            this.commentsHint.set(this.commentsHint.parse(rsp.comments_hint));\n        }\n\n        if (rsp.files) {\n            this.files.reset(rsp.files, {parse: true});\n        }\n\n        if (rsp.pagination) {\n            this.pagination.set(this.pagination.parse(rsp.pagination));\n        }\n\n        if (rsp.revision) {\n            this.revision.set(this.revision.parse(rsp.revision));\n        }\n\n        this.commitHistoryDiff.reset(rsp.commit_history_diff || [],\n                                     {parse: true});\n\n        if (rsp.commits) {\n            /*\n             * The RB.DiffCommitListView listens for the reset event on the\n             * commits collection to trigger a render, so it must be updated\n             * **after** the commit history is updated.\n             */\n            this.commits.reset(rsp.commits, {parse: true});\n        }\n\n        return {\n            canDownloadDiff: (rsp.revision &&\n                              rsp.revision.interdiff_revision === null),\n            filenamePatterns: rsp.filename_patterns || null,\n            numDiffs: rsp.num_diffs || 0,\n        };\n    },\n});\n"]}