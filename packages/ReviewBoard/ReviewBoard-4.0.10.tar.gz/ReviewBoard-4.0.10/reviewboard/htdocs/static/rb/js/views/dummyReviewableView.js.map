{"version":3,"sources":["dummyReviewableView.es6.js"],"names":[],"mappings":"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","file":"dummyReviewableView.js","sourcesContent":["/**\n * A Review UI for file types which otherwise do not have one.\n *\n * Normally, file types that do not have a Review UI are not linked to one.\n * However, in the case of a file attachment with multiple revisions, if one of\n * those revisions is a non-reviewable type, the user can still navigate to\n * that page. This Review UI is used as a placeholder in that case--it shows\n * the header (with revision selector) and a message saying that this file type\n * cannot be shown.\n */\nRB.DummyReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.AbstractCommentBlockView,\n\n    captionTableTemplate: _.template(\n        '<table><tr><%= items %></tr></table>'\n    ),\n\n    captionItemTemplate: _.template(dedent`\n        <td>\n         <h1 class=\"caption\"><%- caption %></h1>\n        </td>\n    `),\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        const $header = $('<div/>')\n            .addClass('review-ui-header')\n            .prependTo(this.$el);\n\n        if (this.model.get('numRevisions') > 1) {\n            const $revisionLabel = $('<div id=\"revision_label\"/>')\n                .appendTo($header);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $revisionLabel,\n                model: this.model,\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const $revisionSelector = $('<div id=\"attachment_revision_selector\" />')\n                .appendTo($header);\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $revisionSelector,\n                model: this.model,\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const captionItems = [];\n\n            captionItems.push(this.captionItemTemplate({\n                caption: interpolate(\n                    gettext('%(caption)s (revision %(revision)s)'),\n                    {\n                        caption: this.model.get('caption'),\n                        revision: this.model.get('fileRevision'),\n                    },\n                    true)\n            }));\n\n            if (this.model.get('diffAgainstFileAttachmentID') !== null) {\n                captionItems.push(this.captionItemTemplate({\n                    caption: interpolate(\n                        gettext('%(caption)s (revision %(revision)s)'),\n                        {\n                            caption: this.model.get('diffCaption'),\n                            revision: this.model.get('diffRevision'),\n                        },\n                        true)\n                }));\n            }\n\n            $header.append(this.captionTableTemplate({\n                items: captionItems.join('')\n            }));\n        } else {\n            $('<h1 class=\"caption file-attachment-single-revision\">')\n                .text(this.model.get('caption'))\n                .appendTo($header);\n        }\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If 'base' is 0, a\n     * single revision is selected, If not, the diff between `base` and\n     * `tip` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         An array with two elements, representing the range of revisions\n     *         to display.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n});\n"]}