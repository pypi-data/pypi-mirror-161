{"version":3,"sources":["userSessionModel.es6.js"],"names":[],"mappings":"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","file":"userSessionModel.js","sourcesContent":["(function() {\n\n\n/**\n * An item in a StoredItems list.\n *\n * These are used internally to proxy object registration into a store list.\n * It is meant to be a temporary, internal object that can be created with\n * the proper data and then immediately saved or deleted.\n *\n * Model Attributes:\n *     baseURL (string):\n *         The root of the URL for the resource list.\n *\n *     loaded (boolean):\n *         Whether the item is loaded from the server.\n *\n *     objectID (string):\n *         The ID of the item.\n *\n *     stored (boolean):\n *         Whether or not the item has been stored on the server.\n */\nconst Item = RB.BaseResource.extend({\n    /**\n     * Return defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     Default values for the attributes.\n     */\n    defaults() {\n        return _.defaults({\n            baseURL: null,\n            loaded: true,\n            objectID: null,\n            stored: false,\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the item resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use for updating the item.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('stored')) {\n            url += this.get('objectID') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the item is new (not yet stored on the server).\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the item is new.\n     */\n    isNew() {\n        return !this.get('stored');\n    },\n\n    /**\n     * Return a JSON-serializable representation of the item.\n     *\n     * Returns:\n     *    object:\n     *    A representation of the item suitable for serializing to JSON.\n     */\n    toJSON() {\n        return {\n            object_id: this.get('objectID') || undefined,\n        };\n    },\n\n    /**\n     * Parse the response from the server.\n     */\n    parse(/* rsp */) {\n    },\n});\n\n\n/**\n * Manages a list of stored objects.\n *\n * This interfaces with a Watched Items resource (for groups or review\n * requests) and a Hidden Items resource, allowing immediate adding/removing\n * of objects.\n *\n * Model Attributes:\n *     addError (string):\n *         The error string to use when adding an item fails.\n *\n *     removeError (string):\n *         The error string to use when removing an item fails.\n */\nconst StoredItems = RB.BaseResource.extend({\n    /**\n     * Return the defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default values for the model attributes.\n     */\n    defaults() {\n        return _.defaults({\n            addError: '',\n            removeError: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the resource.\n     */\n    url() {\n        return this.get('url');\n    },\n\n    /**\n     * Immediately add an object to a stored list on the server.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to add.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     */\n    addImmediately(obj, options={}, context=null) {\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n            });\n\n            item.save(options, context);\n        } else if (_.isFunction(options.error)) {\n            options.error.call({\n                errorText: this.addError,\n            });\n        }\n    },\n\n    /**\n     * Immediately remove an object from a stored list on the server.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to remove.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     */\n    removeImmediately(obj, options={}, context=null) {\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n                stored: true,\n            });\n\n            item.destroy(options, context);\n        } else if (_.isFunction(options.error)) {\n            options.error.call({\n                errorText: this.removeError,\n            });\n        }\n    },\n});\n\n\n/**\n * Manages the user's active session.\n *\n * This stores basic information on the user (the username and session API URL)\n * and utility objects such as the watched groups, watched review requests and\n * hidden review requests lists.\n *\n * There should only ever be one instance of a UserSession. It should always\n * be created through UserSession.create, and retrieved through\n * UserSession.instance.\n *\n * Model Attributes:\n *     archivedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     authenticated (boolean):\n *         Whether the user is currently authenticated.\n *\n *     diffsShowExtraWhitespace (boolean):\n *         Whether the user wants to see diffs with excess whitespace\n *         highlighted.\n *\n *     fullName (string):\n *         The user's full name.\n *\n *     loginURL (string):\n *         The URL to the login page (if the user is anonymous).\n *\n *     mutedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     readOnly (boolean):\n *         Whether the user is operating in read-only mode.\n *\n *     sessionURL (string):\n *         The URL to the session API resource.\n *\n *     timezoneOffset (string):\n *         The user's offset from UTC. This will be in the format that would\n *         attach to an ISO8601-style date, such as \"-0800\" for PST.\n *\n *     userFileAttachmentsURL (string):\n *         The URL for the user file attachments API resource.\n *\n *     userPageURL (string):\n *         The URL for the user's profile page.\n *\n *     username: (string):\n *         The user's username.\n *\n *     watchedReviewGroupsURL (string):\n *         The URL for the watched review groups API resource.\n *\n *     watchedReviewRequestsURL (string):\n *         The URL for the watched review requests API resource.\n */\nRB.UserSession = Backbone.Model.extend({\n    defaults: {\n        archivedReviewRequestsURL: null,\n        authenticated: false,\n        diffsShowExtraWhitespace: false,\n        fullName: null,\n        loginURL: null,\n        mutedReviewRequestsURL: null,\n        readOnly: false,\n        sessionURL: null,\n        timezoneOffset: '0',\n        userFileAttachmentsURL: null,\n        userPageURL: null,\n        username: null,\n        watchedReviewGroupsURL: null,\n        watchedReviewRequestsURL: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.watchedGroups = new StoredItems({\n            url: this.get('watchedReviewGroupsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.watchedReviewRequests = new StoredItems({\n            url: this.get('watchedReviewRequestsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.archivedReviewRequests = new StoredItems({\n            url: this.get('archivedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a archived item.'),\n            addError: gettext('Must log in to add an archived item.'),\n        });\n\n        this.mutedReviewRequests = new StoredItems({\n            url: this.get('mutedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a muted item.'),\n            addError: gettext('Must log in to add a muted item.'),\n        });\n\n        this._bindCookie({\n            attr: 'diffsShowExtraWhitespace',\n            cookieName: 'show_ew',\n            deserialize: value => (value !== 'false'),\n        });\n    },\n\n    /**\n     * Toggle a boolean attribute.\n     *\n     * The attribute will be the inverse of the prior value.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to toggle.\n     */\n    toggleAttr(attr) {\n        this.set(attr, !this.get(attr));\n    },\n\n    /*\n     * Return avatar HTML for the user with the given size.\n     *\n     * Version Added:\n     *     3.0.19\n     *\n     * Args:\n     *     size (Number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     string:\n     *     The HTML for the avatar.\n     */\n    getAvatarHTML: function(size) {\n        var urls = this.get('avatarHTML') || {};\n        return urls[size] || '';\n    },\n\n    /**\n     * Return avatar URLs for the user with the given size.\n     *\n     * Deprecated:\n     *     3.0.19:\n     *     :js:meth:`getAvatarHTML` should be used instead.\n     *\n     * Args:\n     *     size (number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     object:\n     *     An object containing avatar URLs, if the requested avatar size is\n     *     available. This object will contain the following keys:\n     *\n     *     * ``1x``: The url for the avatar.\n     *     * ``2x``: The high-DPI URL for the avatar.\n     *\n     *     If the requested avatar size is unavailable, this function returns\n     *     an empty object.\n     */\n    getAvatarURLs(size) {\n        const urls = this.get('avatarURLs') || {};\n        return urls[size] || {};\n    },\n\n    /**\n     * Bind a cookie to an attribute.\n     *\n     * The initial value of the attribute will be set to that of the cookie.\n     *\n     * When the attribute changes, the cookie will be updated.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the bind.\n     *\n     * Option Args:\n     *    attr (string):\n     *        The name of the attribute to bind.\n     *\n     *    cookieName (string):\n     *        The name of the cookie to store.\n     *\n     *    deserialize (function, optional):\n     *        A deserialization function to use when fetching the attribute\n     *        value.\n     *\n     *    serialize (function, optional):\n     *        A serialization function to use when storing the attribute value.\n     */\n    _bindCookie(options) {\n        const deserialize = options.deserialize || _.identity;\n        const serialize = (options.serialize ||\n                           (value => value.toString()));\n\n        this.set(options.attr, deserialize($.cookie(options.cookieName)));\n\n        this.on(`change:${options.attr}`, (model, value) => {\n            $.cookie(options.cookieName, serialize(value), {\n                path: SITE_ROOT,\n            });\n        });\n    },\n}, {\n    instance: null,\n\n    ARCHIVED: 'A',\n    MUTED: 'M',\n\n    /**\n     * Create the UserSession for the current user.\n     *\n     * Only one will ever exist. Calling this a second time will assert.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass into the UserSession initializer.\n     *\n     * Returns:\n     *     RB.UserSession:\n     *     The user session instance.\n     */\n    create(options) {\n        console.assert(!RB.UserSession.instance,\n                       'UserSession.create can only be called once.');\n\n        RB.UserSession.instance = new RB.UserSession(options);\n        return RB.UserSession.instance;\n    },\n});\n\n\n})();\n"]}