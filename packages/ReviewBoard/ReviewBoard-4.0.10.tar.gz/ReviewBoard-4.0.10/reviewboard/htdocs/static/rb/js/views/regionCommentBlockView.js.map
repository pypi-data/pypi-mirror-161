{"version":3,"sources":["regionCommentBlockView.es6.js"],"names":[],"mappings":"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","file":"regionCommentBlockView.js","sourcesContent":["/**\n * Provides a visual region over an image or other document showing comments.\n *\n * This will show a selection rectangle over part of an image or other\n * content indicating there are comments there. It will also show the\n * number of comments, along with a tooltip showing comment summaries.\n *\n * This is meant to be used with a RegionCommentBlock model.\n */\nRB.RegionCommentBlockView = RB.AbstractCommentBlockView.extend({\n    className: 'selection',\n\n    events: _.defaults({\n        'click': '_onClicked',\n        'mousedown': '_onMouseDown'\n    }, RB.AbstractCommentBlockView.prototype.events),\n\n    /**\n     * Initialize RegionCommentBlockView.\n     */\n    initialize() {\n        this._scale = 1.0;\n        this._moveState = {\n            hasMoved: false,\n            initialCursor: {},\n            initialBounds: {},\n            dragCallback: _.noop\n        };\n\n        _.bindAll(this, '_onDrag', '_onWindowMouseUp');\n    },\n\n    /**\n     * Listen to events.\n     */\n    delegateEvents() {\n        RB.AbstractCommentBlockView.prototype.delegateEvents.call(this);\n\n        this.listenTo(\n            this.model,\n            'change:x change:y change:width change:height',\n            this._updateBounds\n        );\n        this.listenTo(this.model, 'change:count', this._updateCount);\n    },\n\n    /**\n     * Un-listen to events.\n     */\n    undelegateEvents() {\n        RB.AbstractCommentBlockView.prototype.undelegateEvents.call(this);\n\n        $(window).off('mousemove', this._onDrag);\n\n        this.stopListening(this.model);\n    },\n\n    /**\n     * Set the selection region size function.\n     *\n     * This function is meant to return the maximum size of the selection\n     * region for the given comment.\n     *\n     * Args:\n     *     func (function):\n     *         A function which will return a size object.\n     */\n    setSelectionRegionSizeFunc(func) {\n        this.selectionRegionSizeFunc = func;\n    },\n\n    /**\n     * Return the selection region size.\n     *\n     * Returns:\n     *     object:\n     *     An object with ``x``, ``y``, ``width``, and ``height`` fields, in\n     *     pixels.\n     */\n    getSelectionRegionSize() {\n        return _.result(this, 'selectionRegionSizeFunc');\n    },\n\n    /**\n     * Initiate a drag operation.\n     *\n     * Args:\n     *     left (number):\n     *         The initial left position of the cursor.\n     *\n     *     top (number):\n     *         The initial top position of the cursor.\n     *\n     *     callback (function):\n     *         A callback function to call once the drag is finished.\n     */\n    _startDragging(left, top, callback) {\n        /*\n         * ``hasMoved`` is used to distinguish dragging from clicking.\n         * ``initialCursor`` and ``initialBounds`` are used to calculate the\n         * new position and size while dragging.\n         */\n        this._moveState.hasMoved = false;\n        this._moveState.initialCursor.left = left;\n        this._moveState.initialCursor.top = top;\n        this._moveState.initialBounds.left = this.$el.position().left;\n        this._moveState.initialBounds.top = this.$el.position().top;\n        this._moveState.initialBounds.width = this.$el.width();\n        this._moveState.initialBounds.height = this.$el.height();\n        this._moveState.dragCallback = callback;\n\n        $(window).on('mousemove', this._onDrag);\n    },\n\n    /**\n     * End a drag operation.\n     */\n    _endDragging() {\n        /*\n         * Unset the dragging flag after the stack unwinds, so that the\n         * click event can handle it properly.\n         */\n        _.defer(() => { this._moveState.hasMoved = false; });\n\n        $(window).off('mousemove', this._onDrag);\n    },\n\n    /**\n     * Move the comment region to a new position.\n     *\n     * Args:\n     *     left (number):\n     *         The new X-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     *\n     *     top (number):\n     *         The new Y-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     */\n    _moveTo(left, top) {\n        const region = this.getSelectionRegionSize();\n        const maxLeft = region.width - (this.model.get('width') * this._scale);\n        const maxTop = region.height - (this.model.get('height') * this._scale);\n        const newLeft = (this._moveState.initialBounds.left +\n                         left - this._moveState.initialCursor.left);\n        const newTop = (this._moveState.initialBounds.top +\n                        top - this._moveState.initialCursor.top);\n\n        this.model.set({\n            x: RB.MathUtils.clip(newLeft, 0, maxLeft) / this._scale,\n            y: RB.MathUtils.clip(newTop, 0, maxTop) / this._scale\n        });\n    },\n\n    /*\n     * Resize (change with and height of) the comment block.\n     *\n     * Args:\n     *     left (number):\n     *         The new X-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     *\n     *     top (number):\n     *         The new Y-coordinate of the mouse at the end of the drag\n     *         operation, relative to the page.\n     */\n    _resizeTo(left, top) {\n        const region = this.getSelectionRegionSize();\n        const maxWidth = region.width - (this.model.get('x') * this._scale);\n        const maxHeight = region.height - (this.model.get('y') * this._scale);\n        const newWidth = (this._moveState.initialBounds.width +\n                          left - this._moveState.initialCursor.left);\n        const newHeight = (this._moveState.initialBounds.height +\n                           top - this._moveState.initialCursor.top);\n\n        this.model.set({\n            width: RB.MathUtils.clip(newWidth, 0, maxWidth) / this._scale,\n            height: RB.MathUtils.clip(newHeight, 0, maxHeight) / this._scale\n        });\n    },\n\n    /**\n     * Handle a mousedown event.\n     *\n     * Mouse-down means one of these in this view:\n     * 1. click\n     * 2. start of dragging to move the comment\n     * 3. start of dragging to resize the comment\n     *\n     * This method looks at ``e.target`` and does the appropriate action.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onMouseDown(e) {\n        if (this.model.canUpdateBounds()) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            let draggingCallback = null;\n            if (e.target === this._$flag.get(0)) {\n                draggingCallback = this._moveTo;\n            } else if (e.target === this._$resizeIcon.get(0)) {\n                draggingCallback = this._resizeTo;\n            }\n\n            if (draggingCallback) {\n                this._startDragging(e.pageX, e.pageY, draggingCallback);\n\n                $(window).one('mouseup', this._onWindowMouseUp);\n            }\n        }\n    },\n\n    /**\n     * Handle a mouseup event.\n     *\n     * If something has been dragged, end dragging and update the comment's\n     * bounds.\n     *\n     * If not, the event was actually a ``click`` event and we call the\n     * superclass' click handler.\n     */\n    _onWindowMouseUp() {\n        if (this._moveState.hasMoved) {\n            this.model.saveDraftCommentBounds();\n        }\n\n        this._endDragging();\n    },\n\n    /**\n     * Handle a drag event.\n     *\n     * Set moveState.hasMoved to ``true`` to prevent triggering a ``click``\n     * event, and move to view to dragged location.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onDrag(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.hideTooltip();\n\n        this._moveState.hasMoved = true;\n        this._moveState.dragCallback.call(this, e.pageX, e.pageY);\n    },\n\n    /**\n     * Render the comment block.\n     *\n     * Along with the block's rectangle, a floating tooltip will also be\n     * created that displays summaries of the comments.\n     */\n    renderContent() {\n        this._updateBounds();\n\n        if (this.model.canUpdateBounds()) {\n            this.$el.addClass('can-update-bound');\n\n            this._$resizeIcon = $('<div class=\"resize-icon\" />')\n                .appendTo(this.$el);\n        }\n\n        this._$flag = $('<div class=\"selection-flag\" />')\n            .appendTo(this.$el);\n\n        this._updateCount();\n    },\n\n    /**\n     * Position the comment dialog to the side of the flag.\n     *\n     * Args:\n     *     commentDlg (RB.CommentDialogView):\n     *         The comment dialog.\n     */\n    positionCommentDlg(commentDlg) {\n        commentDlg.positionBeside(this._$flag, {\n            side: 'b',\n            fitOnScreen: true\n        });\n    },\n\n    /**\n     * Update the position and size of the comment block element.\n     *\n     * The new position and size will reflect the x, y, width, and height\n     * properties in the model.\n     */\n    _updateBounds() {\n        this.$el\n            .move(this.model.get('x') * this._scale,\n                  this.model.get('y') * this._scale,\n                  'absolute')\n            .width(this.model.get('width') * this._scale)\n            .height(this.model.get('height') * this._scale);\n    },\n\n    /**\n     * Update the displayed count of comments.\n     */\n    _updateCount() {\n        if (this._$flag) {\n            this._$flag.text(this.model.get('count'));\n        }\n    },\n\n    /**\n     * Handle a click event.\n     *\n     * If the click event is not the end result of a drag operation, this\n     * will emit the \"clicked\" event on the view.\n     */\n    _onClicked() {\n        if (!this._moveState.hasMoved) {\n            this.trigger('clicked');\n        }\n    },\n\n    /**\n     * Set the zoom scale.\n     *\n     * Args:\n     *     scale (number):\n     *         A scaling factor. 1.0 is a 1:1 pixel ratio, 0.5 is displayed\n     *         at half size, etc.\n     */\n    setScale(scale) {\n        this._scale = scale;\n        this._updateBounds();\n    }\n});\n"]}