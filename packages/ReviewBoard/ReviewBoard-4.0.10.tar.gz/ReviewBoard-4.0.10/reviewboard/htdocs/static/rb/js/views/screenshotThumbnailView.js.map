{"version":3,"sources":["screenshotThumbnailView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,mBAAH,GAAyB,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;EAC1C,MAAM,EAAE;IACJ,kBAAkB;EADd,CADkC;;EAK1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,GAAG;IACL,KAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,SAA1B,EAAqC,MAAM;MACvC,KAAK,GAAL,CAAS,OAAT,CAAiB,MAAM,KAAK,MAAL,EAAvB;IACH,CAFD;IAIA,KAAK,QAAL,GAAgB,KAAK,GAAL,CAAS,IAAT,CAAc,QAAd,EACX,YADW,CACE;MACV,aAAa,EAAE,sBADL;MAEV,WAAW,EAAE;IAFH,CADF,EAKX,EALW,CAKR;MACA,aAAa,MAAM,KAAK,OAAL,CAAa,WAAb,CADnB;MAEA,UAAU,MAAM,KAAK,OAAL,CAAa,SAAb,CAFhB;MAGA,YAAY,CAAC,CAAD,EAAI,KAAJ,KAAc;QACtB;AACpB;AACA;AACA;QACoB,KAAK,KAAL,CAAW,KAAX,CAAiB;UACb,KAAK,EAAE,MAAM;YACT,KAAK,KAAL,CAAW,GAAX,CAAe,SAAf,EAA0B,KAA1B;YACA,KAAK,OAAL,CAAa,SAAb;YACA,KAAK,KAAL,CAAW,IAAX;UACH;QALY,CAAjB;MAOH;IAfD,CALQ,CAAhB;IAuBA,OAAO,IAAP;EACH,CA5CyC;;EA8C1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,gBAAgB,CAAC,CAAD,EAAI;IAChB,CAAC,CAAC,cAAF;IACA,CAAC,CAAC,eAAF;IAEA,KAAK,KAAL,CAAW,OAAX;EACH;;AA5DyC,CAArB,CAAzB","file":"screenshotThumbnailView.js","sourcesContent":["/**\n * Displays a thumbnail for a screenshot.\n *\n * Screenshot thumbnails allow the caption to be edited and the screenshot\n * to be deleted.\n *\n * This expects to take an existing element for the thumbnail contents, and\n * will attach handlers for interaction.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the screenshot (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the screenshot (caption) has finished.\n */\nRB.ScreenshotThumbnail = Backbone.View.extend({\n    events: {\n        'click a.delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Render the thumbnail.\n     *\n     * This will listen for events on the screenshot and for events on the\n     * thumbnail itself (to allow for caption editing).\n     *\n     * Returns:\n     *     RB.ScreenshotThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.$caption = this.$el.find('a.edit')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: false,\n            })\n            .on({\n                'beginEdit': () => this.trigger('beginEdit'),\n                'cancel': () => this.trigger('endEdit'),\n                'complete': (e, value) => {\n                    /*\n                     * We want to set the caption after ready() finishes,\n                     * it case it loads state and overwrites.\n                     */\n                    this.model.ready({\n                        ready: () => {\n                            this.model.set('caption', value);\n                            this.trigger('endEdit');\n                            this.model.save();\n                        }\n                    });\n                }\n            });\n\n        return this;\n    },\n\n    /**\n     * Delete the screenshot.\n     *\n     * Once the screenshot has been deleted, the view will be removed.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the delete.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n});\n"]}