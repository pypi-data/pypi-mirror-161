{"version":3,"sources":["draftReviewModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,WAAH,GAAiB,EAAE,CAAC,MAAH,CAAU,MAAV,CAAiB,CAAC,CAAC,MAAF,CAAS;EACvC,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;IACjB,iBAAiB,EAAE,KADF;IAEjB,kBAAkB,EAAE;EAFH,CAAX,EAGP,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,QAApB,EAHO,CAD6B;EAMvC,aAAa,EAAE,CAAC,CAAC,QAAF,CAAW;IACtB,iBAAiB,EAAE,qBADG;IAEtB,kBAAkB,EAAE;EAFE,CAAX,EAGZ,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,aAHR,CANwB;EAWvC,eAAe,EAAE,CACb,mBADa,EAEb,oBAFa,EAGf,MAHe,CAGR,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,eAHZ,CAXsB;EAgBvC,WAAW,EAAE,CAAC,CAAC,QAAF,CAAW;IACpB,iBAAiB,EAAE,EAAE,CAAC,eAAH,CAAmB,WADlB;IAEpB,kBAAkB,EAAE,EAAE,CAAC,eAAH,CAAmB;EAFnB,CAAX,EAGV,EAAE,CAAC,MAAH,CAAU,SAAV,CAAoB,WAHV,CAhB0B;;EAsBvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO,GAAgC;IAAA,IAA/B,OAA+B,uEAAvB,EAAuB;IAAA,IAAnB,OAAmB,uEAAX,SAAW;IACnC,KAAK,OAAL,CAAa,YAAb;IAEA,KAAK,KAAL,CAAW;MACP,KAAK,EAAE,MAAM;QACT,KAAK,GAAL,CAAS,QAAT,EAAmB,IAAnB;QACA,KAAK,IAAL,CAAU;UACN,KAAK,EAAE,OAAO,CAAC,KADT;UAEN,OAAO,EAAE,MAAM;YACX,KAAK,OAAL,CAAa,WAAb;;YAEA,IAAI,CAAC,CAAC,UAAF,CAAa,OAAO,CAAC,OAArB,CAAJ,EAAmC;cAC/B,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAqB,OAArB;YACH;UACJ,CARK;UASN,KAAK,EAAE,CAAC,KAAD,EAAQ,GAAR,KAAgB;YACnB,KAAK,CAAC,OAAN,CAAc,cAAd,EAA8B,GAAG,CAAC,SAAlC;;YAEA,IAAI,CAAC,CAAC,UAAF,CAAa,OAAO,CAAC,KAArB,CAAJ,EAAiC;cAC7B,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,OAAnB,EAA4B,KAA5B,EAAmC,GAAnC;YACH;UACJ;QAfK,CAAV,EAgBG,IAhBH;MAiBH,CApBM;MAqBP,KAAK,EAAE;IArBA,CAAX,EAsBG,IAtBH;EAuBH;;AA/DsC,CAAT,EAgE/B,EAAE,CAAC,uBAhE4B,CAAjB,CAAjB","file":"draftReviewModel.js","sourcesContent":["/**\n * A draft review.\n *\n * Draft reviews are more complicated than most objects. A draft may already\n * exist on the server, in which case we need to be able to get its ID. A\n * special resource exists at /reviews/draft/ which will redirect to the\n * existing draft if one exists, and return 404 if not.\n */\nRB.DraftReview = RB.Review.extend(_.extend({\n    defaults: _.defaults({\n        publishAndArchive: false,\n        publishToOwnerOnly: false,\n    }, RB.Review.prototype.defaults()),\n\n    attrToJsonMap: _.defaults({\n        publishAndArchive: 'publish_and_archive',\n        publishToOwnerOnly: 'publish_to_owner_only',\n    }, RB.Review.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'publishAndArchive',\n        'publishToOwnerOnly',\n    ].concat(RB.Review.prototype.serializedAttrs),\n\n    serializers: _.defaults({\n        publishAndArchive: RB.JSONSerializers.onlyIfValue,\n        publishToOwnerOnly: RB.JSONSerializers.onlyIfValue,\n    }, RB.Review.prototype.serializers),\n\n\n    /**\n     * Publish the review.\n     *\n     * Before publish, the \"publishing\" event will be triggered.\n     *\n     * After the publish has succeeded, the \"published\" event will be\n     * triggered.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    publish(options={}, context=undefined) {\n        this.trigger('publishing');\n\n        this.ready({\n            ready: () => {\n                this.set('public', true);\n                this.save({\n                    attrs: options.attrs,\n                    success: () => {\n                        this.trigger('published');\n\n                        if (_.isFunction(options.success)) {\n                            options.success.call(context);\n                        }\n                    },\n                    error: (model, xhr) => {\n                        model.trigger('publishError', xhr.errorText);\n\n                        if (_.isFunction(options.error)) {\n                            options.error.call(context, model, xhr);\n                        }\n                    }\n                }, this);\n            },\n            error: error\n        }, this);\n    }\n}, RB.DraftResourceModelMixin));\n"]}