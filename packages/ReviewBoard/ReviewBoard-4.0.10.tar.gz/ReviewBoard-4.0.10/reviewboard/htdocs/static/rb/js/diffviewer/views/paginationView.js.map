{"version":3,"sources":["paginationView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA,EAAE,CAAC,cAAH,GAAoB,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;EACrC,QAAQ,EAAE,CAAC,CAAC,QAAF,s3BAD2B;EAsBrC,MAAM,EAAE;IACJ,wBAAwB;EADpB,CAtB6B;;EA0BrC;AACJ;AACA;EACI,UAAU,GAAG;IACT,KAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,QAA1B,EAAoC,KAAK,MAAzC;EACH,CA/BoC;;EAiCrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,GAAG;IACL,KAAK,GAAL,CACK,KADL,GAEK,IAFL,CAEU,KAAK,QAAL,CAAc,CAAC,CAAC,QAAF,CAAW;MAC3B,SAAS,EAAE,WAAW,uDAElB,CAAC,KAAK,KAAL,CAAW,GAAX,CAAe,OAAf,CAAD,CAFkB,CADK;MAI3B,gBAAgB,0BAJW;MAK3B,YAAY,sBALe;MAM3B,eAAe,yBANY;MAO3B,eAAe,EAAE,KAAK,sBAAL,EAPU;MAQ3B,QAAQ;IARmB,CAAX,EASjB,KAAK,KAAL,CAAW,UATM,CAAd,CAFV;IAaA,OAAO,IAAP;EACH,CAvDoC;;EAyDrC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,sBAAsB,GAAG;IACrB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,WAAW,GAAG,MAAM,CAAC,QAAP,CAAgB,MAAhB,IAA0B,EAA5C;IACA,IAAI,KAAK,GAAG,EAAZ;;IAEA,IAAI,WAAW,CAAC,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;MAC7B,WAAW,GAAG,WAAW,CAAC,MAAZ,CAAmB,CAAnB,CAAd;IACH;;IAED,IAAI,WAAJ,EAAiB;MACb,KAAK,GAAG,WAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAR;MACA,MAAM,QAAQ,GAAG,EAAjB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;QACnC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;;QAEA,IAAI,CAAC,IAAI,CAAC,UAAL,CAAgB,OAAhB,CAAL,EAA+B;UAC3B,QAAQ,CAAC,IAAT,CAAc,IAAd;QACH;MACJ;;MAED,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;QACrB,OAAO,MAAM,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAb;MACH;IACJ;;IAED,OAAO,EAAP;EACH,CArGoC;;EAuGrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,cAAc,CAAC,EAAD,EAAK;IACf,MAAM,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,aAAJ,CAAD,CAAoB,IAApB,CAAyB,MAAzB,CAAb;;IAEA,IAAI,IAAI,KAAK,SAAb,EAAwB;MACpB,KAAK,OAAL,CAAa,cAAb,EAA6B,IAA7B;MAEA,EAAE,CAAC,eAAH;MACA,EAAE,CAAC,cAAH;IACH;EACJ;;AAvHoC,CAArB,CAApB","file":"paginationView.js","sourcesContent":["/**\n * A view for selecting pages.\n */\nRB.PaginationView = Backbone.View.extend({\n    template: _.template(dedent`\n        <% if (isPaginated) { %>\n         <%- splitText %>\n         <% if (hasPrevious) { %>\n          <span class=\"paginate-link\" data-page=\"<%- previousPage %>\"><a href=\"?page=<%- previousPage %><%= extraURLOptions %>\" title=\"<%- previousPageText %>\">&lt;</a></span>\n         <% } %>\n         <% _.each(pageNumbers, function(page) { %>\n          <% if (page === currentPage) { %>\n           <span class=\"paginate-current\" title=\"<%- currentPageText %>\"><%- page %></span>\n          <% } else { %>\n           <span class=\"paginate-link\" data-page=\"<%- page %>\"><a href=\"?page=<%- page %><%= extraURLOptions %>\"\n               title=\"<% print(interpolate(pageText, [page])); %>\"\n               ><%- page %></a></span>\n          <% } %>\n         <% }); %>\n         <% if (hasNext) { %>\n          <span class=\"paginate-link\" data-page=\"<%- nextPage %>\"><a href=\"?page=<%- nextPage %><%= extraURLOptions %>\" title=\"<%- nextPageText %>\">&gt;</a></span>\n         <% } %>\n        <% } %>\n    `),\n\n    events: {\n        'click .paginate-link': '_onPageClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.listenTo(this.model, 'change', this.render);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.PaginationView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .empty()\n            .html(this.template(_.defaults({\n                splitText: interpolate(\n                    gettext('This diff has been split across %s pages:'),\n                    [this.model.get('pages')]),\n                previousPageText: gettext('Previous Page'),\n                nextPageText: gettext('Next Page'),\n                currentPageText: gettext('Current Page'),\n                extraURLOptions: this._buildExtraQueryString(),\n                pageText: gettext('Page %s'),\n            }, this.model.attributes)));\n\n        return this;\n    },\n\n    /**\n     * Build the extra query string to tack onto any pagination links.\n     *\n     * This will take the current query string on the page, strip out the\n     * ``page=`` part, and return the resulting query string for use in\n     * any links.\n     *\n     * Returns:\n     *     string:\n     *     The new query string to tack onto an existing URL. This will come\n     *     with a leading ``&`` if there's content in the string.\n     */\n    _buildExtraQueryString() {\n        /*\n         * Ideally we'd use Djblets.parseQueryString() for most of this, but\n         * that doesn't maintain order (and it's perhaps not worth doing so).\n         * We need to keep the order so that we generate query strings that\n         * can be effectively cached by the browser in a reliable way.\n         */\n        let queryString = window.location.search || '';\n        let parts = [];\n\n        if (queryString.startsWith('?')) {\n            queryString = queryString.substr(1);\n        }\n\n        if (queryString) {\n            parts = queryString.split('&');\n            const newParts = [];\n\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n\n                if (!part.startsWith('page=')) {\n                    newParts.push(part);\n                }\n            }\n\n            if (newParts.length > 0) {\n                return '&' + newParts.join('&');\n            }\n        }\n\n        return '';\n    },\n\n    /**\n     * Callback for when a page number is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onPageClicked(ev) {\n        const page = $(ev.currentTarget).data('page');\n\n        if (page !== undefined) {\n            this.trigger('pageSelected', page);\n\n            ev.stopPropagation();\n            ev.preventDefault();\n        }\n    },\n});\n"]}