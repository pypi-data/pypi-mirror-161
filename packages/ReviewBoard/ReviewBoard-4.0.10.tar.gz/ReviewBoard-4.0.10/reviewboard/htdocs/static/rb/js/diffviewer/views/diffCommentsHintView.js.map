{"version":3,"sources":["diffCommentsHintView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA,EAAE,CAAC,oBAAH,GAA0B,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;EAC3C,MAAM,EAAE;IACJ,mBAAmB,qBADf;IAEJ,oBAAoB;EAFhB,CADmC;EAM3C,QAAQ,EAAE,CAAC,CAAC,QAAF,kPANiC;;EAmB3C;AACJ;AACA;EACI,UAAU,GAAG;IACT,KAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,QAA1B,EAAoC,KAAK,MAAzC;EACH,CAxB0C;;EA0B3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,GAAG;IACL,MAAM,YAAY,yBAAlB;IACA,MAAM,aAAa,kEAAnB;;IAEA,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,kBAAf,CAAJ,EAAwC;MACpC,KAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;QACxB,yBAAyB,6DADD;QAExB,uBAAuB;MAFC,CAAd,CAAd;MAKA,MAAM,GAAG,GAAG,KAAK,CAAL,CAAO,IAAP,CAAZ;MAEA,KAAK,KAAL,CAAW,GAAX,CAAe,sBAAf,EAAuC,OAAvC,CAA+C,OAAO,IAAI;QACtD,MAAM,GAAG,GAAG,CAAC,CAAC,OAAD,CAAD,CACP,QADO,CACE,UADF,EAEP,IAFO,CAEF,UAFE,EAEU,OAAO,CAAC,QAFlB,EAGP,IAHO,CAGF,WAAW,CAAC,YAAD,EAAe,CAAC,OAAO,CAAC,QAAT,CAAf,CAHT,EAIP,QAJO,CAIE,GAJF,CAAZ;;QAMA,IAAI,OAAO,CAAC,SAAZ,EAAuB;UACnB,GAAG,CAAC,QAAJ,CAAa,SAAb;QACH;MACJ,CAVD;MAYA,KAAK,KAAL,CAAW,GAAX,CAAe,wBAAf,EAAyC,OAAzC,CAAiD,SAAS,IAAI;QAC1D,MAAM,GAAG,GAAG,CAAC,CAAC,OAAD,CAAD,CACP,QADO,CACE,WADF,EAEP,IAFO,CAEF;UACF,kBAAkB,SAAS,CAAC,WAD1B;UAEF,mBAAmB,SAAS,CAAC;QAF3B,CAFE,EAMP,IANO,CAMF,WAAW,CACb,aADa,EAEb;UACI,WAAW,EAAE,SAAS,CAAC,WAD3B;UAEI,WAAW,EAAE,SAAS,CAAC;QAF3B,CAFa,EAMb,IANa,CANT,EAaP,QAbO,CAaE,GAbF,CAAZ;;QAeA,IAAI,SAAS,CAAC,SAAd,EAAyB;UACrB,GAAG,CAAC,QAAJ,CAAa,SAAb;QACH;MACJ,CAnBD;IAoBH,CAxCD,MAwCO;MACH,KAAK,GAAL,CAAS,KAAT;IACH;;IAED,OAAO,IAAP;EACH,CAlF0C;;EAoF3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,mBAAmB,CAAC,EAAD,EAAK;IACpB,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,aAAJ,CAAjB;;IAEA,IAAI,CAAC,OAAO,CAAC,QAAR,CAAiB,SAAjB,CAAL,EAAkC;MAC9B,KAAK,OAAL,CAAa,kBAAb,EAAiC,CAAC,CAAD,EAAI,OAAO,CAAC,IAAR,CAAa,UAAb,CAAJ,CAAjC;IACH;EACJ,CAjG0C;;EAmG3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,oBAAoB,CAAC,EAAD,EAAK;IACrB,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,aAAJ,CAAjB;;IAEA,IAAI,CAAC,OAAO,CAAC,QAAR,CAAiB,SAAjB,CAAL,EAAkC;MAC9B,KAAK,OAAL,CAAa,kBAAb,EACa,CAAC,OAAO,CAAC,IAAR,CAAa,gBAAb,CAAD,EACC,OAAO,CAAC,IAAR,CAAa,iBAAb,CADD,CADb;IAGH;EACJ;;AAlH0C,CAArB,CAA1B","file":"diffCommentsHintView.js","sourcesContent":["/**\n * A view which gives the user hints about comments in other revisions.\n */\nRB.DiffCommentsHintView = Backbone.View.extend({\n    events: {\n        'click .revision': '_onRevisionSelected',\n        'click .interdiff': '_onInterdiffSelected',\n    },\n\n    template: _.template(dedent`\n        <div class=\"box-container\">\n         <div class=\"box important\">\n          <div class=\"box-inner comments-hint\">\n           <h1><%- unpublishedCommentsHeader %></h1>\n           <p><%- unpublishedCommentsText %></p>\n           <ul>\n           </ul>\n          </div>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.listenTo(this.model, 'change', this.render);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.DiffCommentsHintView:\n     *     This object, for chaining.\n     */\n    render() {\n        const revisionText = gettext('Revision %s');\n        const interdiffText = gettext('Interdiff revision %(oldRevision)s - %(newRevision)s');\n\n        if (this.model.get('hasOtherComments')) {\n            this.$el.html(this.template({\n                unpublishedCommentsHeader: gettext('You have unpublished comments on other revisions'),\n                unpublishedCommentsText: gettext('Your review consists of comments on the following revisions:')\n            }));\n\n            const $ul = this.$('ul');\n\n            this.model.get('diffsetsWithComments').forEach(diffset => {\n                const $li = $('<li/>')\n                    .addClass('revision')\n                    .data('revision', diffset.revision)\n                    .text(interpolate(revisionText, [diffset.revision]))\n                    .appendTo($ul);\n\n                if (diffset.isCurrent) {\n                    $li.addClass('current');\n                }\n            });\n\n            this.model.get('interdiffsWithComments').forEach(interdiff => {\n                const $li = $('<li/>')\n                    .addClass('interdiff')\n                    .data({\n                        'first-revision': interdiff.oldRevision,\n                        'second-revision': interdiff.newRevision\n                    })\n                    .text(interpolate(\n                        interdiffText,\n                        {\n                            oldRevision: interdiff.oldRevision,\n                            newRevision: interdiff.newRevision\n                        },\n                        true))\n                    .appendTo($ul);\n\n                if (interdiff.isCurrent) {\n                    $li.addClass('current');\n                }\n            });\n        } else {\n            this.$el.empty();\n        }\n\n        return this;\n    },\n\n    /**\n     * Callback for when a single revision is selected.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onRevisionSelected(ev) {\n        const $target = $(ev.currentTarget);\n\n        if (!$target.hasClass('current')) {\n            this.trigger('revisionSelected', [0, $target.data('revision')]);\n        }\n    },\n\n    /**\n     * Callback for when an interdiff is selected.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onInterdiffSelected(ev) {\n        const $target = $(ev.currentTarget);\n\n        if (!$target.hasClass('current')) {\n            this.trigger('revisionSelected',\n                         [$target.data('first-revision'),\n                          $target.data('second-revision')]);\n        }\n    }\n});\n"]}