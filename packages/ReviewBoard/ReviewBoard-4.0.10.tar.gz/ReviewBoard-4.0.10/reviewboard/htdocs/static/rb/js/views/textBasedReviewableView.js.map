{"version":3,"sources":["textBasedReviewableView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,uBAAH,GAA6B,EAAE,CAAC,4BAAH,CAAgC,MAAhC,CAAuC;EAChE,gBAAgB,EAAE,EAAE,CAAC,yBAD2C;;EAGhE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,UAAU,CAAC,OAAD,EAAU;IAChB,EAAE,CAAC,4BAAH,CAAgC,SAAhC,CAA0C,UAA1C,CAAqD,IAArD,CACI,IADJ,EACU,OADV;IAGA,KAAK,UAAL,GAAkB,IAAlB;IACA,KAAK,WAAL,GAAmB,IAAnB;IACA,KAAK,eAAL,GAAuB,IAAvB;IACA,KAAK,aAAL,GAAqB,IAArB;IACA,KAAK,iBAAL,GAAyB,IAAzB;IAEA,KAAK,EAAL,CAAQ,uBAAR,EAAiC,KAAK,sBAAtC,EAA8D,IAA9D;IAEA,KAAK,MAAL,GAAc,IAAI,QAAQ,CAAC,MAAb,CAAoB;MAC9B,MAAM,EAAE;QACJ,4BAA4B;MADxB;IADsB,CAApB,CAAd;IAKA,KAAK,QAAL,CAAc,KAAK,MAAnB,EAA2B,gBAA3B,EAA6C,CAAC,QAAD,EAAW,OAAX,KAAuB;MAChE;AACZ;AACA;AACA;AACA;AACA;AACA;MACY,IAAI,QAAQ,CAAC,OAAT,CAAiB,MAAjB,MAA6B,CAAjC,EAAoC;QAChC,OAAO,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAV;QACA,QAAQ,GAAG,IAAX;MACH;;MAED,IAAI,QAAJ,EAAc;QACV,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,EAA2B,QAA3B;MACH;;MAED,IAAI,OAAJ,EAAa;QACT,KAAK,aAAL,CAAmB,OAAnB;MACH;IACJ,CApBD;EAqBH,CAhD+D;;EAkDhE;AACJ;AACA;EACI,MAAM,GAAG;IACL,MAAM,CAAC,IAAD,CAAN,CAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB;;IAEA,KAAK,aAAL,CAAmB,MAAnB;;IACA,KAAK,iBAAL,CAAuB,MAAvB;EACH,CA1D+D;;EA4DhE;AACJ;AACA;EACI,aAAa,GAAG;IACZ,KAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,0BAAP,CAAlB,CADY,CAGZ;;IACA,KAAK,WAAL,GAAmB,KAAK,CAAL,CAAO,4BAAP,CAAnB;IAEA,KAAK,aAAL,GAAqB,IAAI,EAAE,CAAC,sBAAP,CAA8B;MAC/C,EAAE,EAAE,KAAK,WADsC;MAE/C,cAAc,EAAE;IAF+B,CAA9B,CAArB;;IAIA,KAAK,aAAL,CAAmB,MAAnB;;IAEA,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,iBAAf,CAAJ,EAAuC;MACnC;MACA,KAAK,eAAL,GAAuB,KAAK,CAAL,CAAO,gCAAP,CAAvB;MAEA,KAAK,iBAAL,GAAyB,IAAI,EAAE,CAAC,sBAAP,CAA8B;QACnD,EAAE,EAAE,KAAK,eAD0C;QAEnD,cAAc,EAAE;MAFmC,CAA9B,CAAzB;;MAIA,KAAK,iBAAL,CAAuB,MAAvB;IACH;;IAED,KAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,iBAA1B,EAA6C,KAAK,cAAlD;IAEA,MAAM,WAAW,GAAG,KAAK,CAAL,CAAO,mBAAP,CAApB;;IAEA,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,IAAiC,CAArC,EAAwC;MACpC,KAAK,qBAAL,GAA6B,IAAI,EAAE,CAAC,kCAAP,CAA0C;QACnE,EAAE,EAAE,WAAW,CAAC,IAAZ,CAAiB,+BAAjB,CAD+D;QAEnE,KAAK,EAAE,KAAK;MAFuD,CAA1C,CAA7B;;MAIA,KAAK,qBAAL,CAA2B,MAA3B;;MACA,KAAK,QAAL,CAAc,KAAK,qBAAnB,EAA0C,kBAA1C,EACc,KAAK,mBADnB;MAGA,KAAK,kBAAL,GAA0B,IAAI,EAAE,CAAC,+BAAP,CAAuC;QAC7D,EAAE,EAAE,WAAW,CAAC,IAAZ,CAAiB,iBAAjB,CADyD;QAE7D,KAAK,EAAE,KAAK;MAFiD,CAAvC,CAA1B;;MAIA,KAAK,kBAAL,CAAwB,MAAxB;;MACA,KAAK,QAAL,CAAc,KAAK,kBAAnB,EAAuC,kBAAvC,EACc,KAAK,mBADnB;IAEH;;IAED,MAAM,SAAS,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,EAAgC,GAAhC,CAAoC,WAApC,CAAlB;IACA,MAAM,YAAY,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,kBAAf,CAArB;IACA,MAAM,MAAM,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,6BAAf,CAAf;IACA,QAAQ,CAAC,OAAT,CAAiB,KAAjB,CAAuB;MACnB,IAAI,EAAG,MAAM,IAAI,IAAV,aACK,SADL,kBACsB,YADtB,mBAEK,SAFL,kBAEsB,MAFtB,cAEgC,YAFhC;IADY,CAAvB;EAKH,CApH+D;;EAsHhE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,mBAAmB,CAAC,SAAD,EAAY;IAC3B,MAAM,CAAC,IAAD,EAAO,GAAP,IAAc,SAApB,CAD2B,CAG3B;;IACA,IAAI,GAAG,KAAK,CAAZ,EAAe;MACX;IACH;;IAED,MAAM,WAAW,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,uBAAf,CAApB;IACA,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,GAAG,CAAP,CAA/B;IAEA;AACR;AACA;AACA;AACA;;IACQ,IAAI,WAAJ;;IAEA,IAAI,IAAI,KAAK,CAAb,EAAgB;MACZ,WAAW,gBAAS,WAAT,MAAX;IACH,CAFD,MAEO;MACH,MAAM,YAAY,GAAG,WAAW,CAAC,IAAI,GAAG,CAAR,CAAhC;MACA,WAAW,gBAAS,YAAT,cAAyB,WAAzB,MAAX;IACH;;IAED,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB,WAAxB;EACH,CA3J+D;;EA6JhE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,aAAa,CAAC,OAAD,EAAU;IACnB,MAAM,MAAM,GAAG,KAAK,oBAAL,CAA0B,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAA1B,CAAf;;IACA,MAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,OAAV,CAAkB,CAAlB,EAAqB,IAAlC;IAEA;;IACA,OAAO,GAAG,EAAE,CAAC,SAAH,CAAa,IAAb,CAAkB,OAAlB,EAA2B,CAA3B,EAA8B,IAAI,CAAC,MAAnC,IAA6C,CAAvD;IAEA,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAD,CAAN,CAAU,OAAV,CAAkB,CAAlB,EAAqB,IAArB,CAA0B,OAA1B,CAAD,CAAd;IACA,CAAC,CAAC,MAAD,CAAD,CAAU,SAAV,CAAoB,IAAI,CAAC,MAAL,GAAc,GAAlC;EACH,CA7K+D;;EA+KhE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,oBAAoB,CAAC,QAAD,EAAW;IAC3B,IAAI,QAAQ,KAAK,QAAjB,EAA2B;MACvB,OAAO,KAAK,WAAZ;IACH,CAFD,MAEO,IAAI,QAAQ,KAAK,UAAb,IACA,KAAK,KAAL,CAAW,GAAX,CAAe,iBAAf,CADJ,EACuC;MAC1C,OAAO,KAAK,eAAZ;IACH,CAHM,MAGA;MACH,OAAO,CAAC,MAAR,CAAe,KAAf,EAAsB,yBAAyB,QAA/C;MACA,OAAO,IAAP;IACH;EACJ,CApM+D;;EAsMhE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,0BAA0B,CAAC,QAAD,EAAW;IACjC,IAAI,QAAQ,KAAK,QAAjB,EAA2B;MACvB,OAAO,KAAK,aAAZ;IACH,CAFD,MAEO,IAAI,QAAQ,KAAK,UAAb,IACA,KAAK,KAAL,CAAW,GAAX,CAAe,iBAAf,CADJ,EACuC;MAC1C,OAAO,KAAK,iBAAZ;IACH,CAHM,MAGA;MACH,OAAO,CAAC,MAAR,CAAe,KAAf,EAAsB,yBAAyB,QAA/C;MACA,OAAO,IAAP;IACH;EACJ,CA3N+D;;EA6NhE;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,sBAAsB,CAAC,gBAAD,EAAmB;IACrC,MAAM,YAAY,GAAG,gBAAgB,CAAC,KAAtC;IACA,MAAM,YAAY,GAAG,YAAY,CAAC,GAAb,CAAiB,cAAjB,CAArB;IACA,MAAM,UAAU,GAAG,YAAY,CAAC,GAAb,CAAiB,YAAjB,CAAnB;;IAEA,IAAI,YAAY,IAAI,UAApB,EAAgC;MAC5B,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAjB;;MACA,MAAM,WAAW,GAAG,KAAK,0BAAL,CAAgC,QAAhC,CAApB;;MAEA,IAAI,CAAC,WAAL,EAAkB;QACd;MACH;;MAED,IAAI,MAAJ;;MAEA,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,cAAf,CAAJ,EAAoC;QAChC;AAChB;AACA;AACA;QACgB,MAAM,GAAG,WAAW,CAAC,eAAZ,CAA4B,YAA5B,EAA0C,UAA1C,CAAT;MACH,CAND,MAMO;QACH;AAChB;AACA;AACA;AACA;QACgB,MAAM,IAAI,GAAG,WAAW,CAAC,EAAZ,CAAe,OAAf,CAAuB,CAAvB,EAA0B,IAAvC;QAEA;;QACA,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAhB,CAAL,EAAyB,IAAI,CAAC,UAAU,GAAG,CAAd,CAA7B,CAAT;MACH;;MAED,IAAI,MAAJ,EAAY;QACR,gBAAgB,CAAC,OAAjB,CAAyB,CAAC,CAAC,MAAM,CAAC,CAAD,CAAP,CAA1B,EAAuC,CAAC,CAAC,MAAM,CAAC,CAAD,CAAP,CAAxC;QACA,gBAAgB,CAAC,GAAjB,CAAqB,QAArB,CACI,gBAAgB,CAAC,SAAjB,CAA2B,CAA3B,EAA8B,KAA9B,CAAoC,CAApC,CADJ;MAEH;IACJ;EACJ,CA3Q+D;;EA6QhE;AACJ;AACA;AACA;AACA;AACA;EACI,cAAc,GAAG;IACb,MAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAAjB;;IAEA,KAAK,UAAL,CACK,WADL,CACiB,QADjB,EAEK,MAFL,2BAE+B,QAF/B,QAGS,QAHT,CAGkB,QAHlB;;IAKA,KAAK,WAAL,CAAiB,UAAjB,CAA4B,QAAQ,KAAK,QAAzC;;IACA,KAAK,eAAL,CAAqB,UAArB,CAAgC,QAAQ,KAAK,UAA7C;IAEA;;;IACA,CAAC,CAAC,MAAD,CAAD,CAAU,cAAV,CAAyB,QAAzB;EACH;;AAhS+D,CAAvC,CAA7B","file":"textBasedReviewableView.js","sourcesContent":["/**\n * Base for text-based review UIs.\n *\n * This will display all existing comments on an element by displaying a comment\n * indicator beside it. Users can place a comment by clicking on a line, which\n * will get a light-grey background color upon mouseover, and placing a comment\n * in the comment dialog that is displayed.\n */\nRB.TextBasedReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.TextBasedCommentBlockView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        RB.FileAttachmentReviewableView.prototype.initialize.call(\n            this, options);\n\n        this._$viewTabs = null;\n        this._$textTable = null;\n        this._$renderedTable = null;\n        this._textSelector = null;\n        this._renderedSelector = null;\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n\n        this.router = new Backbone.Router({\n            routes: {\n                ':viewMode(/line:lineNum)': 'viewMode',\n            },\n        });\n        this.listenTo(this.router, 'route:viewMode', (viewMode, lineNum) => {\n            /*\n             * Router's pattern matching isn't very good. Since we don't\n             * want to stick \"view\" or something before the view mode,\n             * and we want to allow for view, line, or view + line, we need\n             * to check and transform viewMode if it seems to be a line\n             * reference.\n             */\n            if (viewMode.indexOf('line') === 0) {\n                lineNum = viewMode.substr(4);\n                viewMode = null;\n            }\n\n            if (viewMode) {\n                this.model.set('viewMode', viewMode);\n            }\n\n            if (lineNum) {\n                this._scrollToLine(lineNum);\n            }\n        });\n    },\n\n    /**\n     * Remove the reviewable from the DOM.\n     */\n    remove() {\n        _super(this).remove.call(this);\n\n        this._textSelector.remove();\n        this._renderedSelector.remove();\n    },\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        this._$viewTabs = this.$('.text-review-ui-views li');\n\n        // Set up the source text table.\n        this._$textTable = this.$('.text-review-ui-text-table');\n\n        this._textSelector = new RB.TextCommentRowSelector({\n            el: this._$textTable,\n            reviewableView: this\n        });\n        this._textSelector.render();\n\n        if (this.model.get('hasRenderedView')) {\n            // Set up the rendered table.\n            this._$renderedTable = this.$('.text-review-ui-rendered-table');\n\n            this._renderedSelector = new RB.TextCommentRowSelector({\n                el: this._$renderedTable,\n                reviewableView: this\n            });\n            this._renderedSelector.render();\n        }\n\n        this.listenTo(this.model, 'change:viewMode', this._onViewChanged);\n\n        const $fileHeader = this.$('.review-ui-header');\n\n        if (this.model.get('numRevisions') > 1) {\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $fileHeader.find('#attachment_revision_selector'),\n                model: this.model\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $fileHeader.find('#revision_label'),\n                model: this.model\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n        }\n\n        const reviewURL = this.model.get('reviewRequest').get('reviewURL');\n        const attachmentID = this.model.get('fileAttachmentID');\n        const diffID = this.model.get('diffAgainstFileAttachmentID');\n        Backbone.history.start({\n            root: (diffID == null\n                   ? `${reviewURL}file/${attachmentID}/`\n                   : `${reviewURL}file/${diffID}-${attachmentID}/`),\n        });\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If ``base`` is 0, a\n     * single revision is selected, If not, the diff between ``base`` and\n     * ``tip`` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         A 2-element array containing the new revisions to be viewed.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n\n    /**\n     * Scroll the page to the top of the specified line number.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to scroll to.\n     */\n    _scrollToLine(lineNum) {\n        const $table = this._getTableForViewMode(this.model.get('viewMode'));\n        const rows = $table[0].tBodies[0].rows;\n\n        /* Normalize this to a valid row index. */\n        lineNum = RB.MathUtils.clip(lineNum, 1, rows.length) - 1;\n\n        const $row = $($table[0].tBodies[0].rows[lineNum]);\n        $(window).scrollTop($row.offset().top);\n    },\n\n    /**\n     * Return the table element for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     jQuery:\n     *     The table element corresponding to the requested view mode.\n     */\n    _getTableForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._$textTable;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._$renderedTable;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Return the row selector for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     The row selector.\n     */\n    _getRowSelectorForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._textSelector;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._renderedSelector;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Add the comment view to the line the comment was created on.\n     *\n     * Args:\n     *     commentBlockView (RB.AbstractCommentBlockView):\n     *         The comment view to add.\n     */\n    _placeCommentBlockView(commentBlockView) {\n        const commentBlock = commentBlockView.model;\n        const beginLineNum = commentBlock.get('beginLineNum');\n        const endLineNum = commentBlock.get('endLineNum');\n\n        if (beginLineNum && endLineNum) {\n            const viewMode = commentBlock.get('viewMode');\n            const rowSelector = this._getRowSelectorForViewMode(viewMode);\n\n            if (!rowSelector) {\n                return;\n            }\n\n            let rowEls;\n\n            if (this.model.get('diffRevision')) {\n                /*\n                 * We're showing a diff, so we need to do a search for the\n                 * rows matching the given line numbers.\n                 */\n                rowEls = rowSelector.getRowsForRange(beginLineNum, endLineNum);\n            } else {\n                /*\n                 * Since we know we have the entire content of the text in one\n                 * list, we don't need to use getRowsForRange here, and instead\n                 * can look up the lines directly in the lists of rows.\n                 */\n                const rows = rowSelector.el.tBodies[0].rows;\n\n                /* The line numbers are 1-based, so normalize for the rows. */\n                rowEls = [rows[beginLineNum - 1], rows[endLineNum - 1]];\n            }\n\n            if (rowEls) {\n                commentBlockView.setRows($(rowEls[0]), $(rowEls[1]));\n                commentBlockView.$el.appendTo(\n                    commentBlockView.$beginRow[0].cells[0]);\n            }\n        }\n    },\n\n    /**\n     * Handle a change to the view mode.\n     *\n     * This will set the correct tab to be active and switch which table of\n     * text is shown.\n     */\n    _onViewChanged() {\n        const viewMode = this.model.get('viewMode');\n\n        this._$viewTabs\n            .removeClass('active')\n            .filter(`[data-view-mode=${viewMode}]`)\n                .addClass('active');\n\n        this._$textTable.setVisible(viewMode === 'source');\n        this._$renderedTable.setVisible(viewMode === 'rendered');\n\n        /* Cause all comments to recalculate their sizes. */\n        $(window).triggerHandler('resize');\n    },\n});\n"]}