{"version":3,"sources":["relatedGroupSelectorView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;EAGZ,MAAM,cAAc,GAAG,CAAC,CAAC,QAAF,kFAAvB;EAOA;AACA;AACA;;;EACA,EAAE,CAAC,wBAAH,GAA8B,OAAO,CAAC,yBAAR,CAAkC,MAAlC,CAAyC;IACnE,qBAAqB,iCAD8C;;IAGnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,UAAU,CAAC,OAAD,EAAU;MAChB,OAAO,CAAC,yBAAR,CAAkC,SAAlC,CAA4C,UAA5C,CAAuD,IAAvD,CACI,IADJ,EAEI,CAAC,CAAC,QAAF,CAAW;QACP,gBAAgB,EAAE;UACd,WAAW,EAAE,CAAC,MAAD,EAAS,cAAT,CADC;UAEd,SAAS,EAAE,CACP;YAAC,KAAK,EAAE;UAAR,CADO,EAEP;YAAC,KAAK,EAAE;UAAR,CAFO,CAFG;UAMd,UAAU,EAAE;QANE;MADX,CAAX,EASG,OATH,CAFJ;MAaA,KAAK,gBAAL,GAAwB,OAAO,CAAC,eAAR,IAA2B,EAAnD;MACA,KAAK,WAAL,GAAmB,OAAO,CAAC,UAA3B;IACH,CAtCkE;;IAwCnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,YAAY,CAAC,IAAD,EAAO;MACf,OAAO,cAAc,CAAC,IAAD,CAArB;IACH,CArDkE;;IAuDnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,WAAW,CAAC,KAAD,EAAQ,QAAR,EAAkB;MACzB,MAAM,MAAM,GAAG;QACX,eAAe,kCADJ;QAEX,WAAW,EAAE;MAFF,CAAf;;MAKA,IAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;QACpB,MAAM,CAAC,CAAP,GAAW,KAAX;MACH;;MAED,CAAC,CAAC,IAAF,CAAO;QACH,IAAI,EAAE,KADH;QAEH,GAAG,YAAK,SAAL,SAAiB,KAAK,gBAAtB,gBAFA;QAGH,IAAI,EAAE,MAHH;QAIH,OAAO,EAAE,OAAO,IAAI;UAChB;AAChB;UACgB,IAAI,KAAK,WAAL,KAAqB,IAAzB,EAA+B;YAC3B,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB,GAAG,IAAI;cAC1C,OAAO,GAAG,CAAC,WAAX;YACH,CAFgB,CAAjB;UAGH;;UACD,QAAQ,CAAC,OAAO,CAAC,MAAR,CAAe,GAAf,CAAmB,CAAC,KAAK;YAC9B,IAAI,EAAE,CAAC,CAAC,IADsB;YAE9B,YAAY,EAAE,CAAC,CAAC,YAFc;YAG9B,EAAE,EAAE,CAAC,CAAC,EAHwB;YAI9B,WAAW,EAAE,CAAC,CAAC;UAJe,CAAL,CAApB,CAAD,CAAR;QAMH,CAlBE;QAmBH,KAAK,EAAE,YAAa;UAAA,kCAAT,IAAS;YAAT,IAAS;UAAA;;UAChB,OAAO,CAAC,KAAR,CAAc,oBAAd,EAAoC,IAApC;UACA,QAAQ;QACX;MAtBE,CAAP;IAwBH;;EArGkE,CAAzC,CAA9B;AAyGC,CAtHD","file":"relatedGroupSelectorView.js","sourcesContent":["(function() {\n\n\nconst optionTemplate = _.template(dedent`\n    <div>\n     <span class=\"title\"><%- name %> : <%- display_name %></span>\n    </div>\n`);\n\n\n/**\n * A widget to select related groups using search and autocomplete.\n */\nRB.RelatedGroupSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for groups...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     inviteOnly (boolean):\n     *         Whether or not we want to only search for inviteOnly review\n     *         groups.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['name', 'display_name'],\n                    sortField: [\n                        {field: 'name'},\n                        {field: 'display_name'},\n                    ],\n                    valueField: 'name',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._inviteOnly = options.inviteOnly;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(item);\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            'only-fields': 'invite_only,name,display_name,id',\n            displayname: 1,\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/groups/`,\n            data: params,\n            success: results => {\n                /* This is done because we cannot filter using invite_only in\n                the groups api. */\n                if (this._inviteOnly === true) {\n                    results.groups = results.groups.filter(obj => {\n                        return obj.invite_only;\n                    });\n                }\n                callback(results.groups.map(u => ({\n                    name: u.name,\n                    display_name: u.display_name,\n                    id: u.id,\n                    invite_only: u.invite_only\n                })));\n            },\n            error: (...args) => {\n                console.error('Group query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"]}