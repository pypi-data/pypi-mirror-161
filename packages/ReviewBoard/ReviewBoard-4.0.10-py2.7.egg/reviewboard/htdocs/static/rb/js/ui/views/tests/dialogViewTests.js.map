{"version":3,"sources":["dialogViewTests.es6.js"],"names":[],"mappings":"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","file":"dialogViewTests.js","sourcesContent":["suite('rb/ui/views/DialogView', function() {\n    describe('Buttons', function() {\n        describe('Settings', function() {\n            it('Default', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                        }\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Primary', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            primary: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(true);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Disabled', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            disabled: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(true);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(false);\n            });\n\n            it('Danger', function() {\n                const dialogView = new RB.DialogView({\n                    buttons: [\n                        {\n                            label: 'Test',\n                            id: 'testid',\n                            danger: true,\n                        },\n                    ],\n                });\n                dialogView._makeButtons();\n\n                const buttons = dialogView.$buttonsMap;\n                const button = buttons.testid;\n\n                expect(Object.keys(buttons).length).toBe(1);\n                expect(button.val()).toBe('Test');\n                expect(button.prop('id')).toBe('testid');\n                expect(button.prop('disabled')).toBe(false);\n                expect(button.hasClass('primary')).toBe(false);\n                expect(button.hasClass('danger')).toBe(true);\n            });\n        });\n\n        describe('Events', function() {\n            describe('Click', function() {\n                it('When function', function() {\n                    const myFunc = jasmine.createSpy('cb');\n                    const dialogView = new RB.DialogView({\n                        buttons: [\n                            {\n                                label: 'Test',\n                                id: 'testid',\n                                onClick: myFunc,\n                            },\n                        ],\n                    });\n                    dialogView._makeButtons();\n\n                    const buttons = dialogView.$buttonsMap;\n                    const button = buttons.testid;\n\n                    expect(Object.keys(buttons).length).toBe(1);\n                    expect(button.val()).toBe('Test');\n                    button.click();\n                    expect(myFunc).toHaveBeenCalled();\n                });\n\n                it('When string on subclass', function() {\n                    const MyDialogView = RB.DialogView.extend({\n                        buttons: [\n                            {\n                                label: 'Test',\n                                id: 'testid',\n                                onClick: '_onClicked',\n                            },\n                        ],\n\n                        _onClicked: jasmine.createSpy('cb'),\n                    });\n                    const dialogView = new MyDialogView();\n                    dialogView._makeButtons();\n\n                    const buttons = dialogView.$buttonsMap;\n                    const button = buttons.testid;\n\n                    expect(Object.keys(buttons).length).toBe(1);\n                    expect(button.val()).toBe('Test');\n                    button.click();\n                    expect(dialogView._onClicked).toHaveBeenCalled();\n                });\n\n                describe('Keydown', function() {\n                    it('Esc key', function() {\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                            }],\n                        });\n\n                        dialogView.show();\n\n                        const myFunc = jasmine.createSpy('hide');\n                        dialogView.hide = myFunc;\n\n                        const buttons = dialogView.$buttonsMap;\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(buttons.testid.val()).toBe('Test');\n\n                        dialogView.$el.trigger(\n                            $.Event('keydown', { which: $.ui.keyCode.ESCAPE }));\n\n                        expect(myFunc).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n                });\n\n                describe('Submit', function() {\n                    it('with primary button enabled', function() {\n                        const myFunc = jasmine.createSpy('cb');\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc,\n                                disabled: false,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form>\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test');\n                        expect(button.prop('disabled')).toBe(false);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n\n                    it('with primary button disabled', function() {\n                        const myFunc = jasmine.createSpy('cb');\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc,\n                                disabled: true,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form>\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test')\n                        expect(button.prop('disabled')).toBe(true);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc).not.toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n\n                    it('with explicit action', function() {\n                        const myFunc1 = jasmine.createSpy('cb1');\n                        const myFunc2 = jasmine.createSpy('cb2')\n                            .and.returnValue(false);\n                        const dialogView = new RB.DialogView({\n                            buttons: [{\n                                id: 'testid',\n                                label: 'Test',\n                                onClick: myFunc1,\n                                disabled: false,\n                                primary: true,\n                            }],\n                            body: _.template(dedent`\n                                <form action=\".\">\n                                 <input value=\"test\">\n                                </form>\n                            `),\n                        });\n\n                        dialogView.show();\n\n                        const buttons = dialogView.$buttonsMap;\n                        const button = buttons.testid;\n                        const form = dialogView.$el.find('form');\n                        form.submit(myFunc2);\n\n                        expect(Object.keys(buttons).length).toBe(1);\n                        expect(button.val()).toBe('Test');\n                        expect(button.prop('disabled')).toBe(false);\n                        expect(button.hasClass('primary')).toBe(true);\n\n                        form.trigger($.Event('submit'));\n                        expect(myFunc1).not.toHaveBeenCalled();\n                        expect(myFunc2).toHaveBeenCalled();\n\n                        dialogView.remove();\n                    });\n                });\n            });\n        });\n    });\n});\n"]}