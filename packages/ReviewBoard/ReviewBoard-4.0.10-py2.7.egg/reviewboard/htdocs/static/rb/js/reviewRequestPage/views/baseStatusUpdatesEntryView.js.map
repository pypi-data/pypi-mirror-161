{"version":3,"sources":["baseStatusUpdatesEntryView.es6.js"],"names":[],"mappings":"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","file":"baseStatusUpdatesEntryView.js","sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Base class for an entry that can contain status updates.\n *\n * This manages the views for each review on the status updates, and watches\n * for updates to the entry so that any completed status updates can be\n * shown without a page reload.\n */\nRB.ReviewRequestPage.BaseStatusUpdatesEntryView = ParentView.extend({\n    CHECK_UPDATES_MS: 10 * 1000,  // 10 seconds\n\n    events: _.defaults({\n        'click .status-update-request-run': '_onRequestRunClicked',\n    }, ParentView.prototype.events),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.apply(this, arguments);\n\n        this._reviewViews = null;\n    },\n\n    /**\n     * Save state before applying an update.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        /*\n         * Stop watching for any updates. If there are still status updates\n         * pending, render() will re-register for updates.\n         */\n        this.model.stopWatchingUpdates();\n\n        /*\n         * Store any diff fragments for the reload, so we don't have to\n         * fetch them again from the server.\n         */\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData') || [];\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the entry.\n     *\n     * This will construct a view for each review associated with a status\n     * update.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.BaseStatusUpdatesEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewViews = this.model.get('reviews').map(review => {\n            const $reviewEl = this.$(`#review${review.id}`);\n\n            const view = new RB.ReviewRequestPage.ReviewView({\n                el: $reviewEl,\n                model: review,\n                entryModel: this.model,\n                $bannerFloatContainer: $reviewEl,\n                $bannerParent: $reviewEl.children('.banners'),\n                bannerNoFloatContainerClass: 'collapsed',\n            });\n            view.render();\n\n            this.setupReviewView(view);\n\n            return view;\n        });\n\n        if (this.model.get('pendingStatusUpdates')) {\n            this.model.watchUpdates(this.CHECK_UPDATES_MS);\n        }\n\n        return this;\n    },\n\n    /**\n     * Set up a review view.\n     *\n     * Subclasses can override this to provide additional setup for review\n     * views rendered on the page.\n     *\n     * Args:\n     *     view (RB.ReviewRequestPage.ReviewView):\n     *         The review view being set up.\n     */\n    setupReviewView(view) {\n    },\n\n    /**\n     * Run the tool associated with this status update.\n     *\n     * This will request a run/re-run using the status update API and\n     * immediately force an update of the model to check for the newly pending\n     * status updates.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The event that triggered the action.\n     */\n    _onRequestRunClicked(e) {\n        const $target = $(e.target);\n        const updateId = $target.data('statusUpdateId');\n        const reviewRequestId = this.model.get('reviewRequestId');\n\n        RB.apiCall({\n            type: 'PUT',\n            prefix: this.model.get('localSitePrefix') || '',\n            path: `/review-requests/${reviewRequestId}/status-updates/${updateId}/`,\n            buttons: $target,\n            data: {\n                state: 'request-run',\n            },\n            success: () => {\n                /*\n                 * Force at least one update immediately to fetch the new\n                 * pending state.\n                 */\n                this.model.stopWatchingUpdates();\n                this.model.watchUpdates(0);\n            },\n        });\n    },\n});\n\n\n})();\n"]}