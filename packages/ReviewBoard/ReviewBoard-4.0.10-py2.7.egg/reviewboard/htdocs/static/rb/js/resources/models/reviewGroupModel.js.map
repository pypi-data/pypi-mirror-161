{"version":3,"sources":["reviewGroupModel.es6.js"],"names":[],"mappings":"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","file":"reviewGroupModel.js","sourcesContent":["(function() {\n\n\n/**\n * A member of a review group.\n *\n * This is used to handle adding a user to a group or removing from a group.\n */\nconst GroupMember = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            username: null,\n            added: false,\n            loaded: true\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    serializedAttrs: ['username'],\n\n    /**\n     * Return a URL for this resource.\n     *\n     * If this represents an added user, the URL will point to\n     * <groupname>/<username>/. Otherwise, it just points to <groupname>/.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('added')) {\n            url += this.get('username') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the group membership is \"new\".\n     *\n     * A non-added user is new, meaning the save operation will trigger\n     * a POST to add the user.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether this member is newly-added to the group.\n     */\n    isNew() {\n        return !this.get('added');\n    },\n\n    /**\n     * Parse the result payload.\n     *\n     * We don't really care about the result, so we don't bother doing any\n     * work to parse.\n     */\n    parse() {}\n});\n\n\n/**\n * A review group.\n *\n * This provides some utility functions for working with an existing\n * review group.\n *\n * At the moment, this consists of marking a review group as\n * starred/unstarred.\n */\nRB.ReviewGroup = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            name: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'group',\n\n    /**\n     * Return the URL to the review group.\n     *\n     * If this is a new group, the URL will point to the base groups/ URL.\n     * Otherwise, it points to the URL for the group itself.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                  'api/groups/';\n\n        if (!this.isNew()) {\n            url += this.get('name') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Mark a review group as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether or not the group is starred.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    setStarred(starred, options, context) {\n        const watched = RB.UserSession.instance.watchedGroups;\n\n        if (starred) {\n            watched.addImmediately(this, options, context);\n        } else {\n            watched.removeImmediately(this, options, context);\n        }\n    },\n\n    /**\n     * Add a user to this group.\n     *\n     * Sends the request to the server to add the user, and notifies on\n     * succes or failure.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    addUser(username, options, context) {\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url\n            });\n\n            member.save(options, context);\n        } else if (options && _.isFunction(options.error)) {\n            options.error.call({\n                errorText: 'Unable to add to the group.'\n            });\n        }\n    },\n\n    /*\n     * Remove a user from this group.\n     *\n     * Sends the request to the server to remove the user, and notifies on\n     * succes or failure.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    removeUser(username, options, context) {\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url,\n                added: true\n            });\n\n            member.destroy(options, context);\n        } else if (options && _.isFunction(options.error)) {\n            options.error.call({\n                errorText: 'Unable to remove from the group.'\n            });\n        }\n    }\n});\n\n\n})();\n"]}