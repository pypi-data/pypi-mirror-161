{"version":3,"sources":["repositorySelectionView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA,EAAE,CAAC,uBAAH,GAA6B,EAAE,CAAC,cAAH,CAAkB,MAAlB,CAAyB;EAClD,OAAO,EAAE,IADyC;EAElD,SAAS,EAAE,yCAFuC;EAGlD,YAAY,EAAE,EAAE,CAAC,cAHiC;EAKlD,QAAQ,EAAE,CAAC,CAAC,QAAF,mkBALwC;EA0BlD,MAAM,EAAE;IACJ,mCAAmC;EAD/B,CA1B0C;;EA8BlD;AACJ;AACA;EACI,UAAU,GAAG;IACT,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,UAA5B,CAAuC,KAAvC,CAA6C,IAA7C,EAAmD,SAAnD;IAEA,KAAK,SAAL,GAAiB,IAAjB;IACA,KAAK,aAAL,GAAqB,KAArB;IACA,KAAK,gBAAL,GAAwB,CAAC,CAAC,QAAF,CAAW,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAX,EAA6C,GAA7C,CAAxB;IAEA,KAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,UAA/B,EAA2C,KAAK,qBAAhD;EACH,CAzCiD;;EA2ClD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,GAAG;IACL,KAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;MACxB,iBAAiB,yBADO;MAExB,WAAW;IAFa,CAAd,CAAd;IAKA,KAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,4CAAP,CAAlB;IAEA,KAAK,WAAL,GAAmB,KAAK,CAAL,CAAO,2BAAP,CAAnB;IAEA,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,MAA5B,CAAmC,KAAnC,CAAyC,IAAzC,EAA+C,SAA/C;IAEA,OAAO,IAAP;EACH,CA/DiD;;EAiElD;AACJ;AACA;EACI,QAAQ,GAAG;IACP,KAAK,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAI;MACvB,IAAI,IAAI,CAAC,KAAL,KAAe,KAAK,SAAxB,EAAmC;QAC/B,IAAI,CAAC,GAAL,CAAS,WAAT,CAAqB,QAArB;MACH;IACJ,CAJD;IAMA,KAAK,SAAL,GAAiB,IAAjB;IAEA,KAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;EACH,CA9EiD;;EAgFlD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,qBAAqB,CAAC,IAAD,EAAO;IACxB,KAAK,SAAL,GAAiB,IAAjB;IAEA,KAAK,KAAL,CAAW,OAAX,CAAmB,IAAI,IAAI;MACvB,IAAI,IAAI,CAAC,KAAL,KAAe,IAAnB,EAAyB;QACrB,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,YAAlB;MACH,CAFD,MAEO;QACH,IAAI,CAAC,GAAL,CAAS,WAAT,CAAqB,YAArB;MACH;IACJ,CAND;IAQA,KAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;EACH,CAtGiD;;EAwGlD;AACJ;AACA;AACA;AACA;EACI,gBAAgB,GAAG;IACf,MAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,GAAuB,WAAvB,EAAnB;;IACA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,UAAtB;IACA,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAvB;EACH;;AAjHiD,CAAzB,CAA7B","file":"repositorySelectionView.js","sourcesContent":["/**\n * A view for selecting a repository from a collection.\n */\nRB.RepositorySelectionView = RB.CollectionView.extend({\n    tagName: 'ul',\n    className: 'rb-c-sidebar__items repository-selector',\n    itemViewType: RB.RepositoryView,\n\n    template: _.template(dedent`\n        <li class=\"rb-c-sidebar__section -no-icons\">\n         <header class=\"rb-c-sidebar__section-header\">\n          <%- repositoriesLabel %>\n         </header>\n         <ul class=\"rb-c-sidebar__items\">\n          <li class=\"rb-c-sidebar__item\">\n           <div class=\"rb-c-sidebar__item-label\">\n            <div class=\"rb-c-search-field\">\n             <span class=\"fa fa-search\"></span>\n             <input class=\"rb-c-search-field__input\"\n                    placeholder=\"<%- filterLabel %>\" />\n            </div>\n           </div>\n          </li>\n         </ul>\n         <ul class=\"rb-c-sidebar__items\n                    rb-c-new-review-request__repository-items\">\n        </li>\n    `),\n\n    events: {\n        'input .rb-c-search-field__input': '_onSearchChanged',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        RB.CollectionView.prototype.initialize.apply(this, arguments);\n\n        this._selected = null;\n        this._searchActive = false;\n        this._onSearchChanged = _.throttle(this._onSearchChanged.bind(this), 100);\n\n        this.listenTo(this.collection, 'selected', this._onRepositorySelected);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.RepositorySelectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template({\n            repositoriesLabel: gettext('Repositories'),\n            filterLabel: gettext('Filter'),\n        }));\n\n        this.$container = this.$('.rb-c-new-review-request__repository-items');\n\n        this._$searchBox = this.$('.rb-c-search-field__input');\n\n        RB.CollectionView.prototype.render.apply(this, arguments);\n\n        return this;\n    },\n\n    /**\n     * Unselect a repository.\n     */\n    unselect() {\n        this.views.forEach(view => {\n            if (view.model === this._selected) {\n                view.$el.removeClass('active');\n            }\n        });\n\n        this._selected = null;\n\n        this.trigger('selected', null);\n    },\n\n    /**\n     * Callback for when an individual repository is selected.\n     *\n     * Ensures that the selected repository has the 'selected' class applied\n     * (and no others do), and triggers the 'selected' event on the view.\n     *\n     * Args:\n     *     item (RB.Repository):\n     *         The selected repository;\n     */\n    _onRepositorySelected(item) {\n        this._selected = item;\n\n        this.views.forEach(view => {\n            if (view.model === item) {\n                view.$el.addClass('-is-active');\n            } else {\n                view.$el.removeClass('-is-active');\n            }\n        });\n\n        this.trigger('selected', item);\n    },\n\n    /**\n     * Callback for when the text in the search input changes.\n     *\n     * Filters the visible items.\n     */\n    _onSearchChanged() {\n        const searchTerm = this._$searchBox.val().toLowerCase();\n        console.log('search', searchTerm);\n        this.collection.search(searchTerm);\n    },\n});\n"]}