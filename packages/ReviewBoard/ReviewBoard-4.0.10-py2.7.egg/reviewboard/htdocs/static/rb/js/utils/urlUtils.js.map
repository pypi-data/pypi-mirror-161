{"version":3,"sources":["urlUtils.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,eAAH,GAAqB,UAAS,GAAT,EAAc;EAC/B,IAAI,GAAG,KAAK,SAAZ,EAAuB;IACnB,GAAG,GAAG,MAAM,CAAC,QAAP,CAAgB,IAAtB;EACH;;EAED,MAAM,OAAO,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAArC;EACA,MAAM,WAAW,GAAG,kBAAkB,CAAC,OAAD,CAAtC;;EAEA,IAAI,CAAC,WAAW,CAAC,KAAZ,CAAkB,qBAAlB,CAAL,EAA+C;IAC3C;AACR;AACA;AACA;AACA;IACQ,OAAO,CAAC,IAAR,CAAa,8BAAb,EAA6C,OAA7C;IACA,OAAO,EAAP;EACH;;EAED,OAAO,WAAP;AACH,CAnBD","file":"urlUtils.js","sourcesContent":["/**\n * Return the location hash in a safe manner.\n *\n * If the hash does not look like it can be trusted, we will instead return\n * the empty string.\n *\n * Args:\n *     url (string, optional):\n *         An optional URL to parse the hash out of. If not provided,\n *         ``window.location.href`` is used instead.\n *\n * Returns:\n *     string:\n *     The location hash.\n */\nRB.getLocationHash = function(url) {\n    if (url === undefined) {\n        url = window.location.href;\n    }\n\n    const rawHash = url.split('#')[1] || '';\n    const decodedHash = decodeURIComponent(rawHash);\n\n    if (!decodedHash.match(/^[A-Za-z0-9,_\\.-]*$/)) {\n        /*\n         * This hash contains characters we cannot necessarily trust.\n         * Instead of hoping we can trust it or attempting to sanitize it,\n         * we are going to ignore it.\n         */\n        console.warn('Ignoring location hash \"%s\".', rawHash);\n        return '';\n    }\n\n    return decodedHash;\n};\n"]}