{"version":3,"sources":["diffReviewableView.es6.js"],"names":[],"mappings":"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","file":"diffReviewableView.js","sourcesContent":["/*\n * Handles reviews of the diff for a file.\n *\n * This provides commenting abilities for ranges of lines on a diff, as well\n * as showing existing comments, and handling other interaction around\n * per-file diffs.\n */\nRB.DiffReviewableView = RB.AbstractReviewableView.extend({\n    tagName: 'table',\n\n    commentBlockView: RB.DiffCommentBlockView,\n    commentsListName: 'diff_comments',\n\n    events: {\n        'click .download-link': '_onDownloadLinkClicked',\n        'click thead tr': '_onFileHeaderClicked',\n        'click .moved-to, .moved-from': '_onMovedLineClicked',\n        'click .diff-collapse-btn': '_onCollapseChunkClicked',\n        'click .diff-expand-btn': '_onExpandChunkClicked',\n        'click .show-deleted-content-action': '_onShowDeletedClicked',\n        'mouseup': '_onMouseUp'\n    },\n\n    /**\n     * Initialize the reviewable for a file's diff.\n     */\n    initialize() {\n        RB.AbstractReviewableView.prototype.initialize.call(this);\n\n        this._selector = new RB.TextCommentRowSelector({\n            el: this.el,\n            reviewableView: this,\n        });\n\n        this._hiddenCommentBlockViews = [];\n        this._visibleCommentBlockViews = [];\n\n        /* State for keeping consistent column widths for diff content. */\n        this._$filenameRow = null;\n        this._$revisionRow = null;\n        this._filenameReservedWidths = 0;\n        this._colReservedWidths = 0;\n        this._numColumns = 0;\n        this._numFilenameColumns = 0;\n        this._prevContentWidth = null;\n        this._prevFilenameWidth = null;\n        this._prevFullWidth = null;\n\n        /*\n         * Wrap this only once so we don't have to re-wrap every time\n         * the page scrolls.\n         */\n        this._$window = $(window);\n        this._$parent = this.$el.parent();\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n    },\n\n    /**\n     * Remove the reviewable from the DOM.\n     */\n    remove() {\n        RB.AbstractReviewableView.prototype.remove.call(this);\n\n        this._selector.remove();\n    },\n\n    /**\n     * Render the reviewable.\n     *\n     * Returns:\n     *     RB.DiffReviewableView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.AbstractReviewableView.prototype.render.call(this);\n\n        this._centered = new RB.CenteredElementManager();\n\n        const $thead = $(this.el.tHead);\n\n        this._$revisionRow = $thead.children('.revision-row');\n        this._$filenameRow = $thead.children('.filename-row');\n\n        this._selector.render();\n\n        _.each(this.$el.children('tbody.binary'), thumbnailEl => {\n            const $thumbnail = $(thumbnailEl);\n            const id = $thumbnail.data('file-id');\n            const $caption = $thumbnail.find('.file-caption .edit');\n            const reviewRequest = this.model.get('reviewRequest');\n            const fileAttachment = reviewRequest.createFileAttachment({\n                id: id,\n            });\n\n            if (!$caption.hasClass('empty-caption')) {\n                fileAttachment.set('caption', $caption.text());\n            }\n        });\n\n        this._precalculateContentWidths();\n        this._updateColumnSizes();\n\n        return this;\n    },\n\n    /*\n     * Toggles the display of whitespace-only chunks.\n     */\n    toggleWhitespaceOnlyChunks() {\n        this.$('tbody tr.whitespace-line').toggleClass('dimmed');\n\n        _.each(this.$el.children('tbody.whitespace-chunk'), chunk => {\n            const $chunk = $(chunk);\n            const dimming = $chunk.hasClass('replace');\n\n            $chunk.toggleClass('replace');\n\n            const $children = $chunk.children();\n            $children.first().toggleClass('first');\n            $children.last().toggleClass('last');\n\n            const chunkID = chunk.id.split('chunk')[1];\n\n            if (dimming) {\n                this.trigger('chunkDimmed', chunkID);\n            } else {\n                this.trigger('chunkUndimmed', chunkID);\n            }\n        });\n\n        /*\n         * Swaps the visibility of the \"This file has whitespace changes\"\n         * tbody and the chunk siblings.\n         */\n        this.$el.children('tbody.whitespace-file')\n            .siblings('tbody')\n            .addBack()\n                .toggle();\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number)\n    *         The first line of the diff to comment on.\n    *\n    *     endLineNum (number):\n    *         The last line of the diff to comment on.\n    *\n    *     beginNode (Element):\n    *         The row corresponding to the first line of the diff being\n    *         commented upon.\n    *\n    *     endNode (Element):\n    *         The row corresponding to the last line of the diff being\n    *         commented upon.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._selector.createComment(beginLineNum, endLineNum, beginNode,\n                                     endNode);\n    },\n\n    /**\n     * Place a CommentBlockView on the page.\n     *\n     * This will compute the row range for the CommentBlockView and then\n     * render it to the screen, if the row range exists.\n     *\n     * If it doesn't exist yet, the CommentBlockView will be stored in the\n     * list of hidden comment blocks for later rendering.\n     *\n     * Args:\n     *     commentBlockView (RB.DiffCommentBlockView):\n     *         The comment block view to place.\n     *\n     *     prevBeginRowIndex (number):\n     *         The row index to begin at. This places a limit on the rows\n     *         searched.\n     */\n    _placeCommentBlockView(commentBlockView, prevBeginRowIndex) {\n        const commentBlock = commentBlockView.model;\n\n        const rowEls = this._selector.getRowsForRange(\n            commentBlock.get('beginLineNum'),\n            commentBlock.get('endLineNum'),\n            prevBeginRowIndex);\n\n        if (rowEls !== null) {\n            const beginRowEl = rowEls[0];\n            const endRowEl = rowEls[1];\n\n            /*\n             * Note that endRow might be null if it exists in a collapsed\n             * region, so we can get away with just using beginRow if we\n             * need to.\n             */\n            commentBlockView.setRows($(beginRowEl), $(endRowEl || beginRowEl));\n            commentBlockView.$el.appendTo(\n                commentBlockView.$beginRow[0].cells[0]);\n            this._visibleCommentBlockViews.push(commentBlockView);\n\n            return beginRowEl.rowIndex;\n        } else {\n            this._hiddenCommentBlockViews.push(commentBlockView);\n            return prevBeginRowIndex;\n        }\n    },\n\n    /**\n     * Place any hidden comment blocks onto the diff viewer.\n     */\n    _placeHiddenCommentBlockViews() {\n        const hiddenCommentBlockViews = this._hiddenCommentBlockViews;\n        this._hiddenCommentBlockViews = [];\n        let prevBeginRowIndex;\n\n        for (let i = 0; i < hiddenCommentBlockViews.length; i++) {\n            prevBeginRowIndex = this._placeCommentBlockView(\n                hiddenCommentBlockViews[i], prevBeginRowIndex);\n        }\n    },\n\n    /**\n     * Mark any comment block views not visible as hidden.\n     */\n    _hideRemovedCommentBlockViews() {\n        const visibleCommentBlockViews = this._visibleCommentBlockViews;\n        this._visibleCommentBlockViews = [];\n\n        for (let i = 0; i < visibleCommentBlockViews.length; i++) {\n            const commentBlockView = visibleCommentBlockViews[i];\n\n            if (commentBlockView.$el.is(':visible')) {\n                this._visibleCommentBlockViews.push(commentBlockView);\n            } else {\n                this._hiddenCommentBlockViews.push(commentBlockView);\n            }\n        }\n\n        /* Sort these by line number so we can efficiently place them later. */\n        _.sortBy(\n            this._hiddenCommentBlockViews,\n            commentBlockView => commentBlockView.model.get('beginLineNum'));\n    },\n\n    /**\n     * Update the positions of the collapse buttons.\n     *\n     * This will attempt to position the collapse buttons such that they're\n     * in the center of the exposed part of the expanded chunk in the current\n     * viewport.\n     *\n     * As the user scrolls, they'll be able to see the button scroll along\n     * with them. It will not, however, leave the confines of the expanded\n     * chunk.\n     */\n    _updateCollapseButtonPos() {\n        this._centered.updatePosition();\n    },\n\n    /**\n     * Expands or collapses a chunk in a diff.\n     *\n     * This is called internally when an expand or collapse button is pressed\n     * for a chunk. It will fetch the diff and render it, displaying any\n     * contained comments, and setting up the resulting expand or collapse\n     * buttons.\n     *\n     * Args:\n     *     $btn (jQuery):\n     *         The expand/collapse button that was clicked.\n     *\n     *     expanding (boolean):\n     *          Whether or not we are expanding.\n     */\n    _expandOrCollapse($btn, expanding) {\n        const chunkIndex = $btn.data('chunk-index');\n        const linesOfContext = $btn.data('lines-of-context');\n\n        this.model.getRenderedDiffFragment({\n            chunkIndex: chunkIndex,\n            linesOfContext: linesOfContext,\n        }, {\n            success: html => {\n                const $tbody = $btn.closest('tbody');\n                let tbodyID;\n                let $scrollAnchor;\n                let scrollAnchorID;\n\n                /*\n                 * We want to position the new chunk or collapse button at\n                 * roughly the same position as the chunk or collapse button\n                 * that the user pressed. Figure out what it is exactly and what\n                 * the scroll offsets are so we can later reposition the scroll\n                 * offset.\n                 */\n                if (expanding) {\n                    $scrollAnchor = this.$el;\n                    scrollAnchorID = $scrollAnchor[0].id;\n\n                    if (linesOfContext === 0) {\n                        /*\n                         * We've expanded the entire chunk, so we'll be looking\n                         * for the collapse button.\n                         */\n                        tbodyID = /collapsed-(.*)/.exec(scrollAnchorID)[1];\n                    } else {\n                        tbodyID = scrollAnchorID;\n                    }\n                } else {\n                    $scrollAnchor = $btn;\n                }\n\n                const scrollOffsetTop = ($scrollAnchor.offset().top -\n                                         this._$window.scrollTop());\n\n                /*\n                 * If we already expanded, we may have one or two loaded chunks\n                 * adjacent to the header. We want to remove those, since we'll\n                 * be generating new ones that include that data.\n                 */\n                $tbody.prev('.diff-header, .loaded').remove();\n                $tbody.next('.diff-header, .loaded').remove();\n\n                /*\n                 * Replace the header with the new HTML. This may also include a\n                 * new header.\n                 */\n                $tbody.replaceWith(html);\n\n                if (expanding) {\n                    this._placeHiddenCommentBlockViews();\n                } else {\n                    this._hideRemovedCommentBlockViews();\n                }\n\n                /*\n                 * Get the new tbody for the header, if any, and try to center.\n                 */\n                if (tbodyID !== undefined) {\n                    const newEl = document.getElementById(tbodyID);\n\n                    if (newEl !== null) {\n                        $scrollAnchor = $(newEl);\n\n                        this._$window.scrollTop(\n                            $scrollAnchor.offset().top - scrollOffsetTop);\n                    }\n                }\n\n                /* Recompute the set of buttons for later use. */\n                this._centered.setElements(new Map(\n                    Array.prototype.map.call(\n                        this.$('.diff-collapse-btn'),\n                        el => [el, {\n                            $top: $(el).closest('tbody'),\n                        }])\n                ));\n                this._updateCollapseButtonPos();\n\n                /*\n                 * We'll need to update the column sizes, but first, we need\n                 * to re-calculate things like the line widths, since they\n                 * may be longer after expanding.\n                 */\n                this._precalculateContentWidths();\n                this._updateColumnSizes();\n\n                this.trigger('chunkExpansionChanged');\n            }\n        });\n    },\n\n    /**\n     * Pre-calculate the widths and other state needed for column widths.\n     *\n     * This will store the number of columns and the reserved space that\n     * needs to be subtracted from the container width, to be used in later\n     * calculating the desired widths of the content areas.\n     */\n    _precalculateContentWidths() {\n        let cellPadding = 0;\n\n        if (!this.$el.hasClass('diff-error') && this._$revisionRow.length > 0) {\n            const containerExtents = this.$el.getExtents('p', 'lr');\n\n            /* Calculate the widths and state of the diff columns. */\n            let $cells = $(this._$revisionRow[0].cells);\n            cellPadding = $(this.el.querySelector('pre'))\n                .parent().addBack()\n                .getExtents('p', 'lr');\n\n            this._colReservedWidths = $cells.eq(0).outerWidth() + cellPadding +\n                                      containerExtents;\n            this._numColumns = $cells.length;\n\n            if (this._numColumns === 4) {\n                /* There's a left-hand side and a right-hand side. */\n                this._colReservedWidths += $cells.eq(2).outerWidth() +\n                                           cellPadding;\n            }\n\n            /* Calculate the widths and state of the filename columns. */\n            $cells = $(this._$filenameRow[0].cells);\n            this._numFilenameColumns = $cells.length;\n            this._filenameReservedWidths = containerExtents +\n                                           2 * this._numFilenameColumns;\n        } else {\n            this._colReservedWidths = 0;\n            this._filenameReservedWidths = 0;\n            this._numColumns = 0;\n            this._numFilenameColumns = 0;\n        }\n    },\n\n    /*\n     * Update the sizes of the diff content columns.\n     *\n     * This will figure out the minimum and maximum widths of the columns\n     * and set them in a stylesheet, ensuring that lines will constrain to\n     * those sizes (force-wrapping if necessary) without overflowing or\n     * causing the other column to shrink too small.\n     */\n    _updateColumnSizes() {\n        if (this.$el.hasClass('diff-error')) {\n            return;\n        }\n\n        let $parent = this._$parent;\n\n        if (!$parent.is(':visible')) {\n            /*\n             * We're still in diff loading mode, and the parent is hidden. We\n             * can get the width we need from the parent. It should be the same,\n             * or at least close enough for the first stab at column sizes.\n             */\n            $parent = $parent.parent();\n        }\n\n        const fullWidth = $parent.width();\n\n        if (fullWidth === this._prevFullWidth) {\n            return;\n        }\n\n        this._prevFullWidth = fullWidth;\n\n        /* Calculate the desired widths of the diff columns. */\n        let contentWidth = fullWidth - this._colReservedWidths;\n\n        if (this._numColumns === 4) {\n            contentWidth /= 2;\n        }\n\n        /* Calculate the desired widths of the filename columns. */\n        let filenameWidth = fullWidth - this._filenameReservedWidths;\n\n        if (this._numFilenameColumns === 2) {\n            filenameWidth /= 2;\n        }\n\n        this.$el.width(fullWidth);\n\n        /* Update the minimum and maximum widths, if they've changed. */\n        if (filenameWidth !== this._prevFilenameWidth) {\n            this._$filenameRow.children('th').css({\n                'min-width': Math.ceil(filenameWidth * 0.66),\n                'max-width': Math.ceil(filenameWidth)\n            });\n            this._prevFilenameWidth = filenameWidth;\n        }\n\n        if (contentWidth !== this._prevContentWidth) {\n            this._$revisionRow.children('.revision-col').css({\n                'min-width': Math.ceil(contentWidth * 0.66),\n                'max-width': Math.ceil(contentWidth)\n            });\n            this._prevContentWidth = contentWidth;\n        }\n    },\n\n    /**\n     * Handle a window resize.\n     *\n     * This will update the sizes of the diff columns, and the location of the\n     * collapse buttons (if one or more are visible).\n     */\n    updateLayout() {\n        this._updateColumnSizes();\n        this._updateCollapseButtonPos();\n    },\n\n    /**\n     * Handle a file download link being clicked.\n     *\n     * Prevents the event from bubbling up and being caught by\n     * _onFileHeaderClicked.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onDownloadLinkClicked(e) {\n        e.stopPropagation();\n    },\n\n    /**\n     * Handle the file header being clicked.\n     *\n     * This will highlight the file header.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onFileHeaderClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('fileClicked');\n    },\n\n    /**\n     * Handle a \"Moved to/from\" flag being clicked.\n     *\n     * This will scroll to the location on the other end of the move,\n     * and briefly highlight the line.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onMovedLineClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('moveFlagClicked', $(e.target).data('line'));\n    },\n\n    /**\n     * Handle a mouse up event.\n     *\n     * This will select any chunk that was clicked, highlight the chunk,\n     * and ensure it's cleanly scrolled into view.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event that triggered this handler.\n     */\n    _onMouseUp(e) {\n        const node = e.target;\n\n        /*\n         * The user clicked somewhere else. Move the anchor point here\n         * if it's part of the diff.\n         */\n        const $tbody = $(node).closest('tbody');\n\n        if ($tbody.length > 0 &&\n            ($tbody.hasClass('delete') ||\n             $tbody.hasClass('insert') ||\n             $tbody.hasClass('replace'))) {\n            const anchor = $tbody[0].querySelector('a');\n\n            if (anchor) {\n                this.trigger('chunkClicked', anchor.name);\n            }\n        }\n    },\n\n    /**\n     * Handle an expand chunk button being clicked.\n     *\n     * The expand buttons will expand a collapsed chunk, either entirely\n     * or by certain amounts. It will fetch the new chunk contents and\n     * inject it into the diff viewer.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onExpandChunkClicked(e) {\n        e.preventDefault();\n\n        let $target = $(e.target);\n\n        if (!$target.hasClass('diff-expand-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-expand-btn');\n        }\n\n        this._expandOrCollapse($target, true);\n    },\n\n    /**\n     * Handle a collapse chunk button being clicked.\n     *\n     * The fully collapsed representation of that chunk will be fetched\n     * and put into the diff viewer in place of the expanded chunk.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onCollapseChunkClicked(e) {\n        e.preventDefault();\n\n        let $target = $(e.target);\n\n        if (!$target.hasClass('diff-collapse-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-collapse-btn');\n        }\n\n        this._expandOrCollapse($target, false);\n    },\n\n    /**\n     * Handler for when show content is clicked.\n     *\n     * This requeues the corresponding diff to show its deleted content.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onShowDeletedClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        /*\n         * Replace the current contents (\"This file was deleted ... \") with a\n         * spinner. This will be automatically replaced with the file contents\n         * once loaded from the server.\n         */\n        $(e.target).parent()\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this.trigger('showDeletedClicked');\n    },\n});\n"]}