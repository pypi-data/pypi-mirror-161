{"version":3,"sources":["reviewRequestEditorModel.es6.js"],"names":[],"mappings":"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","file":"reviewRequestEditorModel.js","sourcesContent":["/**\n * Handles all operations and state related to editing review requests.\n *\n * This manages the editing of all fields and objects on a review request,\n * the publishing workflow, and validation.\n *\n * Model Attributes:\n *     commits (RB.DiffCommitCollection):\n *         The collection of commits on this review request.\n *\n *     changeDescriptionRenderedText (string):\n *         The rendered change description text, if any.\n *\n *     closeDescriptionRenderedText (string):\n *         The rendered close description text, if any.\n *\n *     commentIssueManager (RB.CommentIssueManager):\n *         The issue manager for the editor.\n *\n *     editable (boolean):\n *         Whether or not the review request is currently editable.\n *\n *         This is derived from the ``mutableByUser`` attribute and the review\n *         request's ``state`` attribute.\n *\n *     editCount (number):\n *         The number of outstanding edits.\n *\n *     hasDraft (boolean):\n *         Whether or not a draft currently exists.\n *\n *     fileAttachemnts (Backbone.Collection of RB.FileAttachment):\n *         The files attached to this review request.\n *\n *     fileAttachmentComments (object):\n *         A mapping of file attachment IDs to their comments.\n *\n *     mutableByUser (boolean):\n *         Whether or not the user can mutate the review request.\n *\n *     pendingSaveCount (number):\n *         The number of fields that have yet to be saved.\n *\n *     publishing (boolean):\n *         Whether or not we are currently publishing the review request.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request model.\n *\n *     screenshots (Backbone.Collection of RB.Screenshot):\n *         The legacy screenshots attached to this review request.\n *\n *     showSendEmail (boolean):\n *         Whether or not to show the \"Send e-mail\" checkbox for this review\n *         request.\n *\n *     statusEditable (boolean):\n *         Whether or not the status is currently editable.\n *\n *     statusMutableByUser (boolean):\n *         Whether or not the status is mutable by the current user.\n */\nRB.ReviewRequestEditor = Backbone.Model.extend({\n    defaults() {\n        return {\n            commitMessages: [],\n            changeDescriptionRenderedText: '',\n            closeDescriptionRenderedText: '',\n            commentIssueManager: null,\n            editable: false,\n            editCount: 0,\n            hasDraft: false,\n            fileAttachments: null,\n            fileAttachmentComments: {},\n            mutableByUser: false,\n            pendingSaveCount: 0,\n            publishing: false,\n            reviewRequest: null,\n            screenshots: null,\n            showSendEmail: false,\n            statusEditable: false,\n            statusMutableByUser: false,\n        };\n    },\n\n    /**\n     * Initialize the editor.\n     */\n    initialize() {\n        const reviewRequest = this.get('reviewRequest');\n\n        // Set up file attachments.\n        let fileAttachments = this.get('fileAttachments');\n\n        if (fileAttachments === null) {\n            fileAttachments = new Backbone.Collection([], {\n                model: RB.FileAttachment,\n            });\n            this.set('fileAttachments', fileAttachments);\n        }\n\n        this.listenTo(fileAttachments, 'add',\n                      this._onFileAttachmentOrScreenshotAdded);\n        fileAttachments.each(\n            this._onFileAttachmentOrScreenshotAdded.bind(this));\n\n        // Set up screenshots.\n        let screenshots = this.get('screenshots');\n\n        if (screenshots === null) {\n            screenshots = new Backbone.Collection([], {\n                model: RB.Screenshot,\n            });\n            this.set('screenshots', screenshots);\n        }\n\n        this.listenTo(screenshots, 'add',\n                      this._onFileAttachmentOrScreenshotAdded);\n        screenshots.each(\n            this._onFileAttachmentOrScreenshotAdded.bind(this));\n\n        // Connect to other signals.\n        this.listenTo(reviewRequest.draft, 'saving',\n                      () => this.trigger('saving'));\n        this.listenTo(reviewRequest.draft, 'saved',\n                      () => this.trigger('saved'));\n        this.listenTo(reviewRequest, 'change:state', this._computeEditable);\n        this._computeEditable();\n    },\n\n    /**\n     * Parse the given attributes into model attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *        The attributes to parse.\n     *\n     * Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(attrs) {\n        return _.defaults({\n            commits: new RB.DiffCommitCollection(\n                attrs.commits || [],\n                {parse: true}\n            ),\n        }, attrs);\n    },\n\n    /**\n     * Create a file attachment tracked by the editor.\n     *\n     * This wraps RB.ReviewRequestDraft.createFileAttachment and stores the\n     * file attachment in the fileAttachments collection.\n     *\n     * This should be used instead of\n     * RB.ReviewRequestDraft.createFileAttachment for any existing or newly\n     * uploaded file attachments.\n     *\n     * Args:\n     *     attributes (object, optional):\n     *         Model attributes for the new file attachment.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment model.\n     */\n    createFileAttachment(attributes={}) {\n        const draft = this.get('reviewRequest').draft;\n        const fileAttachment = draft.createFileAttachment(attributes);\n\n        const fileAttachments = this.get('fileAttachments');\n\n        if (attributes.attachmentHistoryID) {\n            const oldAttachment = fileAttachments.findWhere({\n                attachmentHistoryID: attributes.attachmentHistoryID,\n            });\n            const index = fileAttachments.indexOf(oldAttachment);\n\n            fileAttachments.remove(oldAttachment);\n            fileAttachments.add(fileAttachment, { at: index, });\n        } else {\n            fileAttachments.add(fileAttachment);\n        }\n\n        return fileAttachment;\n    },\n\n    /**\n     * Return a field from the draft.\n     *\n     * This will look either in the draft's data or in the extraData (for\n     * custom fields), returning the value provided either when the page\n     * was generated or when it was last edited.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name of the field to get.\n     *\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     jsonFieldName (string, optional):\n     *         The key to use for the field name in the API. This is required\n     *         if ``useExtraData`` is set.\n     *\n     *     useExtraData (boolean, optional):\n     *         Whether the field is stored as part of the extraData or is a\n     *         regular attribute. This requires ``jsonFieldName`` to be set.\n     *\n     *     useRawTextValue (boolean, optional):\n     *         Whether to return the raw text value for a field. This requires\n     *         ``useExtraData`` to be set to ``true``.\n     *\n     * Returns:\n     *     *:\n     *     The value of the field.\n     */\n    getDraftField(fieldName, options={}) {\n        const reviewRequest = this.get('reviewRequest');\n        const draft = reviewRequest.draft;\n\n        if (options.useExtraData) {\n            let data;\n\n            if (options.useRawTextValue) {\n                const rawTextFields = draft.get('rawTextFields');\n\n                if (rawTextFields && rawTextFields.extra_data) {\n                    data = rawTextFields.extra_data;\n                }\n            }\n\n            if (!data) {\n                data = draft.get('extraData');\n            }\n\n            return data[fieldName];\n        } else if (fieldName === 'closeDescription' ||\n                   fieldName === 'closeDescriptionRichText') {\n            return reviewRequest.get(fieldName);\n        } else {\n            return draft.get(fieldName);\n        }\n    },\n\n    /**\n     * Set a field in the draft.\n     *\n     * If we're in the process of publishing, this will check if we have saved\n     * all fields before publishing the draft.\n     *\n     * Once the field has been saved, two events will be triggered:\n     *\n     *     * fieldChanged(fieldName, value)\n     *     * fieldChanged:<fieldName>(value)\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name of the field to set.\n     *\n     *     value (*):\n     *         The value to set in the field.\n     *\n     *     options (object, optional):\n     *         Options for the set operation.\n     *\n     *     context (object, optional):\n     *         Optional context to use when calling callbacks.\n     *\n     * Option Args:\n     *     allowMarkdown (boolean, optional):\n     *         Whether the field can support rich text (Markdown).\n     *         This requires that ``jsonTextTypeFieldName`` is set.\n     *\n     *     error (function, optional):\n     *         A callback to call in case of error.\n     *\n     *     jsonFieldName (string):\n     *         The key to use for the field name in the API. This is required.\n     *\n     *     jsonTextTypeFieldName (string, optional):\n     *         The key to use for the name of the field indicating the text\n     *         type (rich text or plain) in the API.\n     *\n     *     richText (boolean, optional):\n     *         Whether the field is rich text (Markdown) formatted.\n     *\n     *     success (function, optional):\n     *         A callback to call once the field has been set successfully.\n     *\n     *     useExtraData (boolean, optional):\n     *         Whether the field should be set as a key in extraData or as a\n     *         direct attribute.\n     */\n    setDraftField: function(fieldName, value, options={}, context=undefined) {\n        const reviewRequest = this.get('reviewRequest');\n        const data = {};\n\n        let jsonFieldName = options.jsonFieldName;\n\n        console.assert(\n            jsonFieldName,\n            `jsonFieldName must be set when setting draft ` +\n            `field \"${fieldName}\".`);\n\n        if (options.useExtraData) {\n            jsonFieldName = `extra_data.${jsonFieldName}`;\n        }\n\n        if (options.allowMarkdown) {\n            let jsonTextTypeFieldName = options.jsonTextTypeFieldName;\n\n            console.assert(jsonTextTypeFieldName,\n                           'jsonTextTypeFieldName must be set.');\n\n            if (options.useExtraData) {\n                jsonTextTypeFieldName = `extra_data.${jsonTextTypeFieldName}`;\n            }\n\n            const richText = !!options.richText;\n            data[jsonTextTypeFieldName] = richText ? 'markdown' : 'plain';\n\n            data.force_text_type = 'html';\n            data.include_text_types = 'raw';\n        }\n\n        data[jsonFieldName] = value;\n\n        reviewRequest.draft.save({\n            data: data,\n            error: (model, xhr) => {\n                let message = '';\n\n                this.set('publishing', false);\n\n                if (_.isFunction(options.error)) {\n                    const rsp = xhr.errorPayload;\n\n                    if (rsp.fields === undefined) {\n                        /*\n                         * An error can be caused by a 503 when the site is in\n                         * read-only mode, in which case the fields will be\n                         * empty.\n                         */\n                        message = xhr.errorText;\n                    } else {\n                        const fieldValue = rsp.fields[jsonFieldName];\n                        const fieldValueLen = fieldValue.length;\n\n                        /* Wrap each term in quotes or a leading 'and'. */\n                        _.each(fieldValue, (value, i) => {\n                            // XXX: This method isn't localizable.\n                            if (i === fieldValueLen - 1 && fieldValueLen > 1) {\n                                if (i > 2) {\n                                    message += ', ';\n                                }\n\n                                message += ` and \"${value}\"`;\n                            } else {\n                                if (i > 0) {\n                                    message += ', ';\n                                }\n\n                                message += `\"${value}\"`;\n                            }\n                        });\n\n                        if (fieldName === 'targetGroups') {\n                            message = interpolate(\n                                ngettext('Group %s does not exist.',\n                                         'Groups %s do not exist.',\n                                         fieldValue.length),\n                                [message]);\n                        } else if (fieldName === 'targetPeople') {\n                            message = interpolate(\n                                ngettext('User %s does not exist.',\n                                         'Users %s do not exist.',\n                                         fieldValue.length),\n                                [message]);\n                        } else if (fieldName === 'submitter') {\n                            message = interpolate(\n                                gettext('User %s does not exist.'),\n                                [message]);\n                        } else if (fieldName === 'dependsOn') {\n                            message = interpolate(\n                                ngettext('Review Request %s does not exist.',\n                                         'Review Requests %s do not exist.',\n                                         fieldValue.length),\n                                [message]);\n                        }\n                    }\n\n                    options.error.call(context, {\n                        errorText: message\n                    });\n                }\n            },\n            success: () => {\n                this.set('hasDraft', true);\n\n                if (_.isFunction(options.success)) {\n                    options.success.call(context);\n                }\n\n                this.trigger('fieldChanged:' + fieldName, value);\n                this.trigger('fieldChanged', fieldName, value);\n\n                if (this.get('publishing')) {\n                    this.decr('pendingSaveCount');\n\n                    if (this.get('pendingSaveCount') === 0) {\n                        this.set('publishing', false);\n                        this.publishDraft();\n                    }\n                }\n            }\n        }, this);\n    },\n\n    /**\n     * Publish the draft to the server.\n     *\n     * This assumes all fields have been saved.\n     *\n     * If there's an error during saving or validation, the \"publishError\"\n     * event will be triggered with the error message. Otherwise, upon\n     * success, the \"publish\" event will be triggered. However, users will\n     * have the chance to cancel the publish in the event that the submitter\n     * has been changed.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the publish operation.\n     *\n     * Option Args:\n     *     trivial (boolean):\n     *         Whether the publish is \"trivial\" (if true, no e-mail\n     *         notifications will be sent).\n     */\n    publishDraft(options={}) {\n        const reviewRequest = this.get('reviewRequest');\n        const onError = (model, xhr) => this.trigger('publishError', xhr.errorText);\n\n        reviewRequest.draft.ensureCreated({\n            success: () => {\n                if (reviewRequest.attributes.links.submitter.title !==\n                    reviewRequest.draft.attributes.links.submitter.title) {\n                    if (!confirm(gettext('Are you sure you want to change the ownership of this review request? Doing so may prevent you from editing the review request afterwards.'))) {\n                        return;\n                    }\n                }\n                reviewRequest.draft.publish({\n                    success: () => this.trigger('published'),\n                    error: onError,\n                    trivial: options.trivial ? 1 : 0\n                }, this);\n            },\n            error: onError,\n        }, this);\n    },\n\n    /**\n     * Increment an attribute by 1.\n     *\n     * The attribute must be an integer.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to increment.\n     */\n    incr(attr) {\n        const value = this.get(attr);\n        console.assert(_.isNumber(value));\n        this.set(attr, value + 1, {\n            validate: true,\n        });\n    },\n\n    /**\n     * Decrement an attribute by 1.\n     *\n     * The attribute must be an integer.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to decrement.\n     */\n    decr(attr) {\n        const value = this.get(attr);\n        console.assert(_.isNumber(value));\n        this.set(attr, value - 1, {\n            validate: true,\n        });\n    },\n\n    /**\n     * Validate the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes to validate.\n     */\n    validate(attrs) {\n        const strings = RB.ReviewRequestEditor.strings;\n\n        if (_.has(attrs, 'editCount') && attrs.editCount < 0) {\n            return strings.UNBALANCED_EDIT_COUNT;\n        }\n    },\n\n    /**\n     * Compute the editable state of the review request and open/close states.\n     *\n     * The review request is editable if the user has edit permissions and it's\n     * not closed.\n     *\n     * The close state and accompanying description is editable if the user\n     * has the ability to close the review request and it's currently closed.\n     */\n    _computeEditable() {\n        const state = this.get('reviewRequest').get('state');\n        const pending = (state === RB.ReviewRequest.PENDING);\n\n        this.set({\n            editable: this.get('mutableByUser') && pending,\n            statusEditable: this.get('statusMutableByUser') && !pending,\n        });\n    },\n\n    /**\n     * Handle when a FileAttachment or Screenshot is added.\n     *\n     * Listens for events on the FileAttachment or Screenshot and relays\n     * them to the editor.\n     *\n     * Args:\n     *     attachment (RB.FileAttachment or RB.Screenshot):\n     *         The new file attachment or screenshot.\n     */\n    _onFileAttachmentOrScreenshotAdded(attachment) {\n        this.listenTo(attachment, 'saving',\n                      () => this.trigger('saving'));\n\n        this.listenTo(attachment, 'saved destroy', () => {\n            this.set('hasDraft', true);\n            this.trigger('saved');\n        });\n    },\n}, {\n    strings: {\n        UNBALANCED_EDIT_COUNT:\n            gettext('There is an internal error balancing the edit count'),\n    },\n});\n"]}