{"version":3,"sources":["basePageView.es6.js"],"names":[],"mappings":"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","file":"basePageView.js","sourcesContent":["/**\n * Base class for the views for pages.\n *\n * This is responsible for setting up and handling the page's UI, including\n * the page header, mobile mode handling, and sidebars. It also provides some\n * utilities for setting up common UI elements.\n *\n * The page will respect the ``-has-sidebar`` and ``-is-content-full-page``\n * CSS classes on the document ``<body>``. These will control the behavior\n * and layout of the page.\n *\n * This is intended for use by page views that are set by\n * :js:class:`RB.PageManager`.\n */\nRB.PageView = Backbone.View.extend({\n    /**\n     * The maximum frequency at which resize events should be handled.\n     *\n     * Subclasses can override this if they need to respond to window\n     * resizes at a faster or slower rate.\n     */\n    windowResizeThrottleMS: 100,\n\n    /**\n     * Initialize the page.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the page.\n     *\n     * Option Args:\n     *     $body (jQuery, optional):\n     *         The body element. This is useful for unit tests.\n     *\n     *     $headerBar (jQuery, optional):\n     *         The header bar element. This is useful for unit tests.\n     *\n     *     $pageContainer (jQuery, optional):\n     *         The page container element. This is useful for unit tests.\n     *\n     *     $pageContent (jQuery, optional):\n     *         The page content element. This is useful for unit tests.\n     *\n     *     $pageSidebar (jQuery, optional):\n     *         The page sidebar element. This is useful for unit tests.\n     */\n    initialize(options={}) {\n        this.options = options;\n\n        this.$window = $(window);\n        this.$pageContainer = null;\n        this.$pageContent = null;\n        this.$mainSidebar = null;\n        this._$pageSidebar = null;\n        this._$mainSidebarPane = null;\n\n        this.hasSidebar = null;\n        this.isFullPage = null;\n        this.inMobileMode = null;\n        this.isPageRendered = false;\n\n        this.drawer = null;\n        this.headerView = null;\n    },\n\n    /**\n     * Remove the page from the DOM and disable event handling.\n     */\n    remove() {\n        if (this.$window) {\n            this.$window.off('resize.rbPageView');\n        }\n\n        if (this.headerView) {\n            this.headerView.remove();\n        }\n\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /**\n     * Render the page.\n     *\n     * Subclasses should not override this. Instead, they should override\n     * :js:func:`RB.PageView.renderPage``.\n     *\n     * Returns:\n     *     RB.PageView:\n     *     This object, for chaining.\n     */\n    render() {\n        const options = this.options;\n        const $body = options.$body || $(document.body);\n\n        this.$pageContainer = options.$pageContainer || $('#page-container');\n        this.$pageContent = options.$pageContent || $('#content');\n        this._$pageSidebar = options.$pageSidebar || $('#page-sidebar');\n        this._$pageSidebarPanes = this._$pageSidebar.children(\n            '.rb-c-page-sidebar__panes');\n        this._$mainSidebarPane = this._$pageSidebarPanes.children(\n            '.rb-c-page-sidebar__pane.-is-shown');\n        this.$mainSidebar = this._$mainSidebarPane.children(\n            '.rb-c-page-sidebar__pane-content');\n\n        this.headerView = new RB.HeaderView({\n            el: options.$headerBar || $('#headerbar'),\n            $body: $body,\n            $pageSidebar: this._$pageSidebar,\n        });\n        this.headerView.render();\n\n        this.hasSidebar = $body.hasClass('-has-sidebar') ||\n                          $body.hasClass('has-sidebar');\n        this.isFullPage = $body.hasClass('-is-content-full-page') ||\n                          $body.hasClass('full-page-content');\n        this.inMobileMode = this.headerView.inMobileMode;\n\n        this.renderPage();\n\n        if (this.isFullPage) {\n            /*\n             * On full-size pages, we hide the content and sidebar initially\n             * (via CSS), so that we can properly position them before they're\n             * first shown. Now that we've done that, make them visible.\n             */\n            this._$mainSidebarPane.show();\n            this.$pageContainer.show();\n        }\n\n        this.$window.on('resize.rbPageView',\n                        _.throttle(() => this._updateSize(),\n                                   this.windowResizeThrottleMS));\n        this.listenTo(this.headerView, 'mobileModeChanged',\n                      this._onMobileModeChanged);\n        this._onMobileModeChanged(this.inMobileMode);\n\n        this.isPageRendered = true;\n\n        return this;\n    },\n\n    /**\n     * Set a drawer that can be shown over the sidebar.\n     *\n     * This is used by a page to set a drawer that should be displayed.\n     * Drawers are shown over the sidebar area in desktop mode, or docked to\n     * the bottom of the screen in mobile mode.\n     *\n     * Only one drawer can be set per page. Drawers also require a page with\n     * sidebars enabled.\n     *\n     * Callers must instantiate the drawer but should not render it or\n     * add it to the DOM.\n     *\n     * Args:\n     *     drawer (RB.Drawer):\n     *         The drawer to set.\n     */\n    setDrawer(drawer) {\n        console.assert(\n            this.drawer === null,\n            'A drawer has already been set up for this page.');\n        console.assert(\n            this.hasSidebar,\n            'Drawers can only be set up on pages with a sidebar.');\n\n        this.drawer = drawer;\n        drawer.render();\n        this._reparentDrawer();\n\n        this.listenTo(drawer, 'visibilityChanged', this._updateSize);\n    },\n\n    /**\n     * Render the page contents.\n     *\n     * This should be implemented by subclasses that need to render any\n     * UI elements.\n     */\n    renderPage() {\n    },\n\n    /**\n     * Resize an element to take the full height of a parent container.\n     *\n     * By default, this will size the element to the height of the main\n     * page container. A specific parent can be specified for more specific\n     * use cases.\n     *\n     * Args:\n     *     $el (jQuery):\n     *         The jQuery-wrapped element to resize.\n     *\n     *     $parent (jQuery, optional):\n     *         The specific jQuery-wrapped parent element to base the size on.\n     */\n    resizeElementForFullHeight($el, $parent) {\n        if ($parent === undefined) {\n            $parent = this.$pageContainer;\n        }\n\n        $el.outerHeight($parent.height() - $el.position().top);\n    },\n\n    /**\n     * Handle page resizes.\n     *\n     * This will be called whenever the page's size (or the window size)\n     * has changed, allowing subclasses to adjust any UI elements as\n     * appropriate.\n     *\n     * In the case of window sizes, calls to this function will be throttled,\n     * called no more frequently than the configured\n     * :js:attr:`windowResizeThrottleMS`.\n     */\n    onResize() {\n    },\n\n    /**\n     * Handle mobile mode changes.\n     *\n     * This will be called whenever the page goes between mobile/desktop\n     * mode, allowing subclasses to adjust any UI elements as appropriate.\n     *\n     * Args:\n     *     inMobileMode (bool):\n     *         Whether the UI is now in mobile mode. This will be the same\n     *         value as :js:attr:`inMobileMode`, and is just provided for\n     *         convenience.\n     */\n    onMobileModeChanged(inMobileMode) {\n    },\n\n    /**\n     * Update the size of the page.\n     *\n     * This will be called in response to window resizes and certain other\n     * events. It will calculate the appropriate size for the sidebar (if\n     * on the page) and the page container (if in full-page content mode),\n     * update any elements as appropriate, and then call\n     * :js:func:`RB.PageView.onResize` so that subclasses can update their\n     * elements.\n     */\n    _updateSize() {\n        const windowHeight = this.$window.height();\n        let pageContainerHeight = null;\n        let sidebarHeight = null;\n\n        if (this.isFullPage) {\n            pageContainerHeight = windowHeight -\n                                  this.$pageContainer.offset().top;\n        }\n\n        if (this.inMobileMode) {\n            if (pageContainerHeight !== null &&\n                this.drawer !== null &&\n                this.drawer.isVisible) {\n                /*\n                 * If we're constraining the page container's height, and\n                 * there's a drawer present, reduce the page container's\n                 * height by the drawer size, so we don't make some content\n                 * inaccessible due to an overlap.\n                 */\n                pageContainerHeight -= this.drawer.$el.outerHeight();\n            }\n        } else {\n            if (pageContainerHeight !== null) {\n                /*\n                 * If we're constraining the page container's height,\n                 * constrain the sidebar's as well.\n                 */\n                sidebarHeight = windowHeight - this._$pageSidebar.offset().top;\n            }\n        }\n\n        if (pageContainerHeight === null) {\n            this.$pageContainer.css('height', '');\n        } else {\n            this.$pageContainer.outerHeight(pageContainerHeight);\n        }\n\n        if (sidebarHeight === null) {\n            this._$pageSidebar.css('height', '');\n        } else {\n            this._$pageSidebar.outerHeight(sidebarHeight);\n        }\n\n        this.onResize();\n    },\n\n    /**\n     * Set the new parent for the drawer.\n     *\n     * In mobile mode, this will place the drawer within the main\n     * ``#container``, right before the sidebar, allowing it to appear docked\n     * along the bottom of the page.\n     *\n     * In desktop mode, this will place the drawer within the sidebar area,\n     * ensuring that it overlaps it properly.\n     */\n    _reparentDrawer() {\n        const $el = this.drawer.$el\n            .detach();\n\n        if (this.inMobileMode) {\n            $el.insertBefore(this._$pageSidebar);\n        } else {\n            $el.appendTo(this._$pageSidebarPanes);\n        }\n    },\n\n    /**\n     * Handle a transition between mobile and desktop mode.\n     *\n     * This will set the :js:attr:`inMobileMode` flag and trigger the\n     * ``inMobileModeChanged`` event, so that pages can listen and update\n     * their layout as appropriate.\n     *\n     * It will also update the size and reparent the drawer.\n     *\n     * Args:\n     *     inMobileMode (boolean):\n     *         Whether the page shell is in mobile mode.\n     */\n    _onMobileModeChanged(inMobileMode) {\n        this.inMobileMode = inMobileMode;\n\n        this._updateSize();\n\n        if (this.drawer !== null) {\n            this._reparentDrawer();\n        }\n\n        this.onMobileModeChanged(this.inMobileMode);\n        this.trigger('inMobileModeChanged', this.inMobileMode);\n    },\n});\n"]}