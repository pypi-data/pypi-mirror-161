{"version":3,"sources":["diffReviewableModel.es6.js"],"names":[],"mappings":"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","file":"diffReviewableModel.js","sourcesContent":["/**\n * Provides state and utility functions for loading and reviewing diffs.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff.\n *\n *     file (RB.DiffFile):\n *         Information on the file associated with this diff.\n *\n *     interdiffRevision (number):\n *         The revision on the end of an interdiff range.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff on the end of an interdiff range.\n *\n *     revision (number):\n *         The revision of the FileDiff.\n *\n * See Also:\n *     :js:class:`RB.AbstractReviewable`:\n *         For the attributes defined by the base model.\n */\nRB.DiffReviewable = RB.AbstractReviewable.extend({\n    defaults: _.defaults({\n        baseFileDiffID: null,\n        file: null,\n        fileDiffID: null,\n        interdiffRevision: null,\n        interFileDiffID: null,\n        revision: null,\n    }, RB.AbstractReviewable.prototype.defaults),\n\n    commentBlockModel: RB.DiffCommentBlock,\n\n    defaultCommentBlockFields: [\n        'baseFileDiffID',\n        'fileDiffID',\n        'interFileDiffID',\n    ],\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        this.createCommentBlock({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: serializedCommentBlock.linenum,\n            endLineNum: serializedCommentBlock.linenum +\n                        serializedCommentBlock.num_lines - 1,\n            serializedComments: serializedCommentBlock.comments || [],\n        });\n    },\n\n    /**\n     * Return the rendered diff for a file.\n     *\n     * The rendered file will be fetched from the server and eventually\n     * returned as the argument to the success callback.\n     *\n     * Args:\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     *     options (object, optional):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    getRenderedDiff(callbacks, context, options={}) {\n        this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                index: this.get('file').get('index'),\n                showDeleted: options.showDeleted,\n            }),\n            noActivityIndicator: true,\n        }, callbacks, context);\n    },\n\n    /**\n     * Return a rendered fragment of a diff.\n     *\n     * The fragment will be fetched from the server and eventually returned\n     * as the argument to the success callback.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     * Option Args:\n     *     chunkIndex (string):\n     *         The chunk index to load.\n     */\n    getRenderedDiffFragment(options, callbacks, context) {\n        console.assert(options.chunkIndex !== undefined,\n                       'chunkIndex must be provided');\n\n        this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                chunkIndex: options.chunkIndex,\n                index: this.get('file').get('index'),\n                linesOfContext: options.linesOfContext,\n            }),\n        }, callbacks, context);\n    },\n\n    /**\n     * Fetch the diff fragment from the server.\n     *\n     * This is used internally by getRenderedDiff and getRenderedDiffFragment\n     * to do all the actual fetching and calling of callbacks.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     */\n    _fetchFragment(options, callbacks, context) {\n        RB.apiCall(_.defaults(\n            {\n                type: 'GET',\n                dataType: 'html'\n            },\n            options,\n            _.bindCallbacks(callbacks, context)\n        ));\n    },\n\n    /**\n     * Return a URL that forms the base of a diff fragment fetch.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the URL.\n     *\n     * Option Args:\n     *     chunkIndex (number, optional):\n     *         The chunk index to load.\n     *\n     *     index (number, optional):\n     *         The file index to load.\n     *\n     *     linesOfContext (number, optional):\n     *         The number of lines of context to load.\n     *\n     *     showDeleted (boolean, optional):\n     *         Whether to show deleted content.\n     *\n     * Returns:\n     *     string:\n     *     The URL for fetching diff fragments.\n     */\n    _buildRenderedDiffURL(options={}) {\n        const reviewURL = this.get('reviewRequest').get('reviewURL');\n        const interdiffRevision = this.get('interdiffRevision');\n        const fileDiffID = this.get('fileDiffID');\n        const interFileDiffID = this.get('interFileDiffID');\n        const baseFileDiffID = this.get('baseFileDiffID');\n        const revision = this.get('revision');\n\n        const revisionPart = (interdiffRevision\n                              ? `${revision}-${interdiffRevision}`\n                              : revision);\n\n        const fileDiffPart = (interFileDiffID\n                              ? `${fileDiffID}-${interFileDiffID}`\n                              : fileDiffID);\n\n        let url = `${reviewURL}diff/${revisionPart}/fragment/${fileDiffPart}/`;\n\n        if (options.chunkIndex !== undefined) {\n            url += `chunk/${options.chunkIndex}/`;\n        }\n\n        /* Build the query string. */\n        const queryParts = [];\n\n        if (baseFileDiffID) {\n            queryParts.push(`base-filediff-id=${baseFileDiffID}`);\n        }\n\n        if (options.index !== undefined) {\n            queryParts.push(`index=${options.index}`);\n        }\n\n        if (options.linesOfContext !== undefined) {\n            queryParts.push(`lines-of-context=${options.linesOfContext}`);\n        }\n\n        if (options.showDeleted) {\n            queryParts.push(`show-deleted=1`);\n        }\n\n        queryParts.push(`_=${TEMPLATE_SERIAL}`);\n\n        const queryStr = queryParts.join('&');\n\n        return `${url}?${queryStr}`;\n    },\n});\n"]}