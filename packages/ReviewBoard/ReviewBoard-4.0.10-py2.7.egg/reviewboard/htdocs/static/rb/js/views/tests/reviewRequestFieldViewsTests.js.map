{"version":3,"sources":["reviewRequestFieldViewsTests.es6.js"],"names":[],"mappings":"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","file":"reviewRequestFieldViewsTests.js","sourcesContent":["suite('rb/views/reviewRequestFieldViews', function() {\n    let reviewRequest;\n    let draft;\n    let extraData;\n    let rawTextFields;\n    let editor;\n    let editorView;\n    let field;\n\n    beforeEach(function() {\n        reviewRequest = new RB.ReviewRequest({\n            id: 1,\n        });\n\n        draft = reviewRequest.draft;\n        extraData = draft.get('extraData');\n\n        rawTextFields = {\n            extra_data: {},\n        };\n        draft.set('rawTextFields', rawTextFields);\n\n        editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest,\n        });\n\n        editorView = new RB.ReviewRequestEditorView({\n            model: editor,\n        });\n\n        spyOn(draft, 'save');\n        spyOn(draft, 'ready').and.callFake(function(options, context) {\n            options.ready.call(context);\n        });\n    });\n\n    describe('BaseFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.BaseFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n        });\n\n        describe('Initialization', function() {\n            it('Default behavior', function() {\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_field');\n            });\n\n            it('With custom jsonFieldName', function() {\n                const field = new RB.ReviewRequestFields.BaseFieldView({\n                    model: editor,\n                    fieldID: 'my_field',\n                    jsonFieldName: 'my_custom_name',\n                });\n\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_custom_name');\n            });\n        });\n\n        describe('Properties', function() {\n            it('fieldName', function() {\n                expect(field.fieldName()).toBe('myField');\n            });\n        });\n\n        describe('Methods', function() {\n            describe('_loadValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    draft.set('myField', 'this is a test');\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field', function() {\n                    extraData.my_field = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    extraData.foo = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n            });\n\n            describe('_saveValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    field._saveValue('test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        my_field: 'test',\n                    });\n                });\n\n                it('Custom field', function() {\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.my_field': 'this is a test',\n                    });\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.foo': 'this is a test',\n                    });\n                });\n            });\n        });\n    });\n\n    describe('TextFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.TextFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n            editorView.addFieldView(field);\n        });\n\n        describe('Properties', function() {\n            describe('jsonTextTypeFieldName', function() {\n                it('With fieldID != \"text\"', function() {\n                    expect(field.jsonTextTypeFieldName)\n                        .toBe('my_field_text_type');\n                });\n\n                it('With fieldID = \"text\"', function() {\n                    field = new RB.ReviewRequestFields.TextFieldView({\n                        model: editor,\n                        fieldID: 'text',\n                    });\n\n                    expect(field.jsonTextTypeFieldName).toBe('text_type');\n                });\n            });\n\n            describe('richTextAttr', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field.richTextAttr()).toBe('myFieldRichText');\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field.richTextAttr()).toBe(null);\n                });\n            });\n        });\n\n        describe('Methods', function() {\n            describe('render', function() {\n                beforeEach(function() {\n                    field.$el.addClass('editable');\n                    rawTextFields.extra_data = {\n                        my_field: '**Hello world**',\n                        my_field_text_type: 'markdown',\n                    };\n                });\n\n                describe('With allowRichText=true', function() {\n                    beforeEach(function() {\n                        field.allowRichText = true;\n                    });\n\n                    it('With richText=true', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(true);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n\n                    it('With richText=false', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(false);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n                });\n            });\n\n            describe('_formatField', function() {\n                it('With built-in field', function() {\n                    field.useExtraData = false;\n\n                    draft.set('myField', 'Hello world');\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With custom field', function() {\n                    editorView.addFieldView(field);\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With formatValue as function', function() {\n                    field.formatValue = function(value) {\n                        this.$el.text(`[${value}]`);\n                    };\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('[Hello world]');\n                });\n            });\n\n            describe('_getInlineEditorClass', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.RichTextInlineEditorView);\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.InlineEditorView);\n                });\n            });\n\n            describe('_loadRichTextValue', function() {\n                beforeEach(function() {\n                    field.allowRichText = true;\n                });\n\n                describe('With built-in field', function() {\n                    beforeEach(function() {\n                        field.useExtraData = false;\n                    });\n\n                    it('With value=undefined', function() {\n                        draft.set('myFieldRichText', undefined);\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With value=false', function() {\n                        draft.set('myFieldRichText', false);\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With value=true', function() {\n                        draft.set('myFieldRichText', true);\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n                });\n\n                describe('With custom field', function() {\n                    it('With textType=undefined', function() {\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With textType=plain', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With textType=markdown', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n\n                    it('With textType=invalid value', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'html';\n\n                        try {\n                            field._loadRichTextValue();\n                        } catch (e) {}\n\n                        expect(console.assert).toHaveBeenCalledWith(\n                            false,\n                            'Text type \"html\" in field \"my_field_text_type\" ' +\n                            'not supported.');\n                    });\n                });\n            });\n        });\n    });\n\n    describe('MultilineTextFieldView', function() {\n        describe('Initialization from DOM', function() {\n            let $el;\n\n            beforeEach(function() {\n                $el = $('<span data-allow-markdown=\"true\"/>')\n                    .text('DOM text value');\n            });\n\n            describe('allowRichText', function() {\n                it('allow-markdown=true', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(field.allowRichText).toBe(true);\n                });\n\n                it('allow-markdown=false', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-allow-markdown', 'false'),\n                    });\n\n                    expect(field.allowRichText).toBe(false);\n                });\n\n                it('allow-markdown unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.removeAttr('data-allow-markdown'),\n                    });\n\n                    expect(field.allowRichText).toBe(undefined);\n                });\n            });\n\n            describe('Text value', function() {\n                it('raw-value set', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-raw-value', 'attr text value'),\n                    });\n\n                    expect(extraData.foo).toBe('attr text value');\n                    expect($el.attr('data-raw-value')).toBe(undefined);\n                });\n\n                it('raw-value unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo).toBe('DOM text value');\n                });\n            });\n\n            describe('Text type value', function() {\n                it('rich-text class present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.addClass('rich-text'),\n                    });\n\n                    expect(extraData.foo_text_type).toBe('markdown');\n                });\n\n                it('rich-text class not present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo_text_type).toBe('plain');\n                });\n            });\n        });\n    });\n});\n"]}