{"version":3,"sources":["statusUpdatesEntryModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,iBAAH,CAAqB,kBAArB,GAA0C,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,MAA3B,CAAkC;EACxE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,QAAQ,GAAG;IACP,OAAO,CAAC,CAAC,QAAF,CAAW;MACd,gBAAgB,EAAE,EADJ;MAEd,eAAe,EAAE,IAFH;MAGd,oBAAoB,EAAE,KAHR;MAId,eAAe,EAAE,IAJH;MAKd,OAAO,EAAE;IALK,CAAX,EAMJ,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,QANjC,CAAP;EAOH,CApBuE;;EAsBxE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,KAAK,CAAC,KAAD,EAAQ;IACT,MAAM,aAAa,GAAG,KAAK,CAAC,mBAAN,CAA0B,GAA1B,CAA8B,eAA9B,CAAtB;IACA,MAAM,WAAW,GAAG,KAAK,CAAC,WAAN,IAAqB,EAAzC;IACA,MAAM,OAAO,GAAG,WAAW,CAAC,GAAZ,CACZ,UAAU,IAAI,aAAa,CAAC,YAAd,CAA2B,UAAU,CAAC,EAAtC,EAA0C;MACpD,UAAU,EAAE,UAAU,CAAC,UAD6B;MAEpD,OAAO,EAAE,UAAU,CAAC,OAFgC;MAGpD,UAAU,UAAU,CAAC,MAH+B;MAIpD,MAAM,EAAE,UAAU,CAAC;IAJiC,CAA1C,CADF,CAAhB;IAQA,OAAO,CAAC,CAAC,MAAF,CACH,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,KAArC,CAA2C,IAA3C,CAAgD,IAAhD,EAAsD,KAAtD,CADG,EAEH;MACI,gBAAgB,EAAE,KAAK,CAAC,gBAD5B;MAEI,eAAe,EAAE,aAAa,CAAC,GAAd,CAAkB,iBAAlB,CAFrB;MAGI,oBAAoB,EAAE,KAAK,CAAC,oBAHhC;MAII,eAAe,EAAE,aAAa,CAAC,EAJnC;MAKI,OAAO,EAAE;IALb,CAFG,CAAP;EASH;;AArDuE,CAAlC,CAA1C","file":"statusUpdatesEntryModel.js","sourcesContent":["/**\n * An entry on the review request page for status updates.\n *\n * This stores common state needed for an entry containing status updates\n * made on a review request.\n *\n * See :js:class:`RB.ReviewRequestPage.Entry` for additional model attributes.\n *\n * Model Attributes:\n *     diffCommentsData (Array):\n *         An array of data for comments made on diffs. Each entry is an\n *         array in the format of ``[comment_id, key]``, where the key is\n *         a value for internal use that indicates the filediff or\n *         interfilediff range to use for loading diff fragments.\n *\n *     localSitePrefix (string):\n *         The local site prefix to use, if any.\n *\n *     pendingStatusUpdates (boolean):\n *         Whether this entry is still pending completed status updates.\n *\n *     reviewRequestId (number):\n *         The ID of the review request that this status update belongs to.\n *\n *     reviews (Array):\n *         An array of objects representing attributes for reviews for the\n *         status updates.\n */\nRB.ReviewRequestPage.StatusUpdatesEntry = RB.ReviewRequestPage.Entry.extend({\n    /**\n     * Return the default attributes for the status update entry.\n     *\n     * This must be a method because the returned object contains mutable state\n     * (e.g., arrays) that would be the same for each instance of a model\n     * instantiated with default attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default attributes.\n     */\n    defaults() {\n        return _.defaults({\n            diffCommentsData: [],\n            localSitePrefix: null,\n            pendingStatusUpdates: false,\n            reviewRequestId: null,\n            reviews: [],\n        }, RB.ReviewRequestPage.Entry.prototype.defaults);\n    },\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        const reviewRequest = attrs.reviewRequestEditor.get('reviewRequest');\n        const reviewsData = attrs.reviewsData || [];\n        const reviews = reviewsData.map(\n            reviewData => reviewRequest.createReview(reviewData.id, {\n                bodyBottom: reviewData.bodyBottom,\n                bodyTop: reviewData.bodyTop,\n                'public': reviewData.public,\n                shipIt: reviewData.shipIt,\n            }));\n\n        return _.extend(\n            RB.ReviewRequestPage.Entry.prototype.parse.call(this, attrs),\n            {\n                diffCommentsData: attrs.diffCommentsData,\n                localSitePrefix: reviewRequest.get('localSitePrefix'),\n                pendingStatusUpdates: attrs.pendingStatusUpdates,\n                reviewRequestId: reviewRequest.id,\n                reviews: reviews,\n            });\n    },\n});\n"]}