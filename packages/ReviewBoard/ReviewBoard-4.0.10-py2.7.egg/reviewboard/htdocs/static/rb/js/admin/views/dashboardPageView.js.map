{"version":3,"sources":["dashboardPageView.es6.js"],"names":[],"mappings":"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","file":"dashboardPageView.js","sourcesContent":["/**\n * The administration UI's main dashboard page.\n *\n * This displays all the widgets rendered on the dashboard, allowing users to\n * see important details about their install from one place.\n */\nRB.Admin.DashboardPageView = RB.Admin.PageView.extend({\n    events: {\n        'click .js-action-remove-widget': '_onRemoveWidgetClicked',\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Admin.PageView.prototype.initialize.apply(this, arguments);\n\n        this._widgetViews = {};\n        this._widgetWidths = {};\n        this._orderedWidgets = [];\n        this._$dashboardView = null;\n        this._$widgetsContainer = null;\n        this._$widgetsMain = null;\n        this._$widgets = null;\n        this._masonry = null;\n    },\n\n    /**\n     * Render the page.\n     *\n     * This will set up the support banner and the dashboard widgets.\n     */\n    renderPage() {\n        RB.Admin.PageView.prototype.renderPage.call(this);\n\n        /* Set up the main dashboard widgets area. */\n        this._$dashboardView = this.$('#admin-dashboard');\n        this._$widgetsContainer = this._$dashboardView.find(\n            '.rb-c-admin-widgets');\n        this._$widgetsMain = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__main');\n        this._$widgets = this._$widgetsMain.children('.rb-c-admin-widget');\n\n        const $sizerGutter = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-gutter');\n        const $sizerColumn = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-column');\n\n        this._masonry = new Masonry(this._$widgetsMain[0], {\n            columnWidth: $sizerColumn[0],\n            gutter: $sizerGutter[0],\n            transitionDuration: 0,\n            initLayout: false,\n        });\n\n        /* Show a banner detailing the support coverage for the server. */\n        const supportData = this.model.get('supportData');\n\n        if (supportData) {\n            const supportBanner = new RB.SupportBannerView({\n                el: $('#support-banner'),\n                supportData: this.model.get('supportData'),\n            });\n            supportBanner.render();\n        }\n\n        this._loadWidgets();\n\n        this._masonry.on('layoutComplete', this._onLayoutComplete.bind(this));\n\n        /* Now that everything is in place, show the dashboard. */\n        this._$dashboardView.css('visibility', 'visible');\n    },\n\n    /**\n     * Load all widgets for the view.\n     *\n     * The widgets will be loaded based on the data passed to the model,\n     * and will then be added to Masonry in order of largest to smallest\n     * widget.\n     */\n    _loadWidgets() {\n        const sortableWidgets = [];\n        let index = 0;\n\n        /* Render all the widgets. */\n        this.model.loadWidgets(widgetOptions => {\n            const widgetModel = widgetOptions.widgetModel;\n            const widgetView = new widgetOptions.ViewType(_.defaults(\n                {\n                    el: $(`#${widgetOptions.domID}`),\n                    model: widgetModel,\n                },\n                widgetOptions.viewOptions));\n\n            widgetView.$el.addClass('js-masonry-item');\n            widgetView.render();\n\n            this.listenTo(widgetView, 'sizeChanged',\n                          () => this._onWidgetSizeChanged(widgetModel.id,\n                                                          widgetView.$el));\n\n            const widgetEl = widgetView.el;\n            const width = widgetEl.offsetWidth;\n\n            this._widgetViews[widgetModel.id] = widgetView;\n            this._widgetWidths[widgetModel.id] = width;\n            sortableWidgets.push({\n                el: widgetEl,\n                index: index,\n                isFullWidth: widgetView.$el.hasClass('-is-full-size'),\n                width: width,\n            });\n        });\n\n        /*\n         * Force a specific sort order for the widgets to ensure the most\n         * compact layout, ideally keeping everything on screen.\n         *\n         * We require a stable order (widgets of the same size should be in a\n         * predictable order), and we have to account for full-width widgets,\n         * so our comparator is a little bit more complex. We use the\n         * following rules:\n         *\n         * 1) Full-size widgets are positioned at the top.\n         * 2) Column-based widgets are then ordered from largest to smallest.\n         * 3) Any widgets of the same size are sorted according to their\n         *    registration index.\n         */\n        sortableWidgets.sort((a, b) => {\n            if (a.isFullWidth && !b.isFullWidth) {\n                return -1;\n            } else if (!a.isFullWidth && b.isFullWidth) {\n                return 1;\n            } else if (!a.isFullWidth && !b.isFullWidth &&\n                       a.width !== b.width) {\n                if (a.width > b.width) {\n                    return -1;\n                } else if (a.width < b.width) {\n                    return 1;\n                }\n            }\n\n            /* The widths are equal. Keep the widgets in index order. */\n            return a.index - b.index;\n        });\n\n        this._masonry.items = [];\n        this._masonry.addItems(_.pluck(sortableWidgets, 'el'));\n        this._masonry.layout();\n    },\n\n    /**\n     * Handle a completed widget re-layout.\n     *\n     * This will go through all the widgets and determine if any have changed\n     * their sizes (widths). If so, their\n     * :js:func:`RB.Admin.WidgetView.updateSize` method will be called.\n     */\n    _onLayoutComplete() {\n        this.model.widgets.each(widget => {\n            const widgetView = this._widgetViews[widget.id];\n            const newWidth = widgetView.$el.width();\n\n            if (newWidth !== this._widgetWidths[widget.id]) {\n                widgetView.updateSize();\n                this._widgetWidths[widget.id] = newWidth;\n            }\n        });\n    },\n\n    /**\n     * Handle changes to widget sizes.\n     *\n     * This is called in response to the ``sizeChanged`` events on widgets. If\n     * the size of the widget has actually changed, this will record the new\n     * width and then update the positions of widgets accordingly.\n     *\n     * Args:\n     *     widgetID (string):\n     *         The ID of the widget that changed size.\n     *\n     *     $widget (jQuery):\n     *         The widget's jQuery-wrapped element.\n     */\n    _onWidgetSizeChanged(widgetID, $widget) {\n        const newWidth = $widget.width();\n\n        if (newWidth !== this._widgetWidths[widgetID]) {\n            this._widgetWidths[widgetID] = newWidth;\n            this._masonry.layout();\n        }\n    },\n});\n"]}