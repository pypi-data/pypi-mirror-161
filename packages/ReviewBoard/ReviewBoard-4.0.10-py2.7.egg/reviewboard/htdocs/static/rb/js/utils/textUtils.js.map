{"version":3,"sources":["textUtils.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,UAAH,GAAgB,UAAS,GAAT,EAA0B;EAAA,IAAZ,OAAY,uEAAJ,EAAI;;EACtC,IAAI,OAAO,CAAC,QAAZ,EAAsB;IAClB,IAAI,OAAO,CAAC,OAAR,KAAoB,SAAxB,EAAmC;MAC/B,GAAG,CAAC,IAAJ,CAAS,OAAO,CAAC,OAAjB;IACH;;IAED,GAAG,CACE,QADL,CACc,WADd,EAEK,IAFL,CAEU,GAFV,EAGS,IAHT,CAGc,QAHd,EAGwB,QAHxB;IAKA,EAAE,CAAC,YAAH,CAAgB,eAAhB,CAAgC,GAAG,CAAC,CAAD,CAAnC,EAAwC,OAAO,CAAC,aAAhD;EACH,CAXD,MAWO,IAAI,OAAO,CAAC,OAAR,KAAoB,SAAxB,EAAmC;IACtC,GAAG,CACE,IADL,CACU,EAAE,CAAC,YAAH,CAAgB,WAAhB,CAA4B,OAAO,CAAC,OAAR,IAAmB,EAA/C,EAC4B,OAAO,CAAC,aADpC,EAE4B,OAAO,CAAC,aAFpC,CADV,EAIK,WAJL,CAIiB,WAJjB;EAKH,CANM,MAMA,IAAI,GAAG,KAAK,SAAR,IAAqB,GAAG,CAAC,MAAJ,KAAe,CAAxC,EAA2C;IAC9C,EAAE,CAAC,YAAH,CAAgB,eAAhB,CAAgC,GAAG,CAAC,CAAD,CAAnC,EAAwC,OAAO,CAAC,aAAhD;EACH;AACJ,CArBD","file":"textUtils.js","sourcesContent":["/**\n * Format the given text and put it into an element.\n *\n * If the given element is expected to be rich text, this will put the contents\n * of the new text directly into the element (since it has already been\n * rendered using Markdown).\n *\n * Otherwise, this will add links to review requests and bug trackers but\n * otherwise leave the text alone.\n *\n * Args:\n *     $el (jQuery):\n *         The element to put the text into\n *\n *     options (object):\n *          Options for the format operation.\n *\n * Option Args:\n *     newText (string):\n *         The text to format.\n *\n *     richText (boolean):\n *         Whether the new text is already formatted from Markdown.\n *\n *     bugTrackerURL (string):\n *         The bug tracker URL to use when linking bugs.\n *\n *     isHTMLEncoded (string):\n *         Whether the new text has already had dangerous characters (like <\n *         and >) escaped to their entities.\n */\nRB.formatText = function($el, options={}) {\n    if (options.richText) {\n        if (options.newText !== undefined) {\n            $el.html(options.newText);\n        }\n\n        $el\n            .addClass('rich-text')\n            .find('a')\n                .attr('target', '_blank');\n\n        RB.LinkifyUtils.linkifyChildren($el[0], options.bugTrackerURL);\n    } else if (options.newText !== undefined) {\n        $el\n            .html(RB.LinkifyUtils.linkifyText(options.newText || '',\n                                              options.bugTrackerURL,\n                                              options.isHTMLEncoded))\n            .removeClass('rich-text');\n    } else if ($el !== undefined && $el.length !== 0) {\n        RB.LinkifyUtils.linkifyChildren($el[0], options.bugTrackerURL);\n    }\n};\n"]}