{"version":3,"sources":["baseCommentModel.es6.js"],"names":[],"mappings":"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","file":"baseCommentModel.js","sourcesContent":["/**\n * The base model for a comment.\n *\n * This provides all the common properties, serialization, deserialization,\n * validation, and other functionality of comments. It's meant to be\n * subclassed by more specific implementations.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     issueOpened (boolean):\n *         Whether or not an issue is opened.\n *\n *     issueStatus (string):\n *         The current state of the issue. This must be one of\n *         ``STATE_DROPPED``, ``STATE_OPEN``, ``STATE_RESOLVED``,\n *         ``STATE_VERIFYING_DROPPED`` or ``STATE_VERIFYING_RESOLVED``.\n *\n *     markdownTextFields (object):\n *         The source contents of any Markdown text fields, if forceTextType is\n *         used and the caller fetches or posts with includeTextTypes=markdown.\n *         The keys in this object are the field names, and the values are the\n *         Markdown source of those fields.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in this\n *         object are the field names, and the values are the raw versions of\n *         those attributes.\n *\n *     richText (boolean):\n *         Whether the comment is saved in rich-text (Markdown) format.\n *\n *     text (string):\n *         The text for the comment.\n */\nRB.BaseComment = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            issueOpened: null,\n            issueStatus: null,\n            markdownTextFields: {},\n            rawTextFields: {},\n            richText: null,\n            text: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    extraQueryArgs() {\n        let textTypes = 'raw';\n\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            textTypes += ',markdown';\n        }\n\n        return {\n            'force-text-type': 'html',\n            'include-text-types': textTypes\n        };\n    },\n\n    supportsExtraData: true,\n\n    attrToJsonMap: {\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        issueOpened: 'issue_opened',\n        issueStatus: 'issue_status',\n        richText: 'text_type'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'issueOpened',\n        'issueStatus',\n        'richText',\n        'text'\n    ],\n\n    deserializedAttrs: [\n        'issueOpened',\n        'issueStatus',\n        'text',\n        'html'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        richText: RB.JSONSerializers.textType,\n        issueStatus: function(value) {\n            if (this.get('loaded')) {\n                const parentObject = this.get('parentObject');\n\n                if (parentObject.get('public')) {\n                    return value;\n                }\n            }\n\n            return undefined;\n        }\n    },\n\n    /**\n     * Destroy the comment if and only if the text is empty.\n     *\n     * This works just like destroy(), and will in fact call destroy()\n     * with all provided arguments, but only if there's some actual\n     * text in the comment.\n     */\n    destroyIfEmpty() {\n        if (!this.get('text')) {\n            this.destroy.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * This must be overloaded by subclasses, and the parent version called.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.richText = (rawTextFields.text_type === 'markdown');\n\n        if (rsp.raw_text_fields) {\n            data.rawTextFields = {\n                text: rsp.raw_text_fields.text\n            };\n        }\n\n        if (rsp.markdown_text_fields) {\n            data.markdownTextFields = {\n                text: rsp.markdown_text_fields.text\n            };\n        }\n\n        if (rsp.html_text_fields) {\n            data.html = rsp.html_text_fields.text;\n        }\n\n        return data;\n    },\n\n    /**\n     * Perform validation on the attributes of the model.\n     *\n     * By default, this validates the issueStatus field. It can be\n     * overridden to provide additional validation, but the parent\n     * function must be called.\n     *\n     * Args:\n     *     attrs (object):\n     *         Attribute values to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'parentObject') && !attrs.parentObject) {\n            return RB.BaseResource.strings.UNSET_PARENT_OBJECT;\n        }\n\n        if (attrs.issueStatus &&\n            attrs.issueStatus !== RB.BaseComment.STATE_DROPPED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_OPEN &&\n            attrs.issueStatus !== RB.BaseComment.STATE_RESOLVED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_VERIFYING_DROPPED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n            return RB.BaseComment.strings.INVALID_ISSUE_STATUS;\n        }\n\n        return RB.BaseResource.prototype.validate.apply(this, arguments);\n    },\n\n    /**\n     * Return whether this comment issue requires verification before closing.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the issue is marked to require verification.\n     */\n    requiresVerification() {\n        const extraData = this.get('extraData');\n        return extraData && extraData.require_verification === true;\n    },\n\n    /**\n     * Return the username of the author of the comment.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the current user is the author.\n     */\n    getAuthorUsername() {\n        const review = this.get('parentObject');\n        return review.get('links').user.title;\n    },\n}, {\n    STATE_DROPPED: 'dropped',\n    STATE_OPEN: 'open',\n    STATE_RESOLVED: 'resolved',\n    STATE_VERIFYING_DROPPED: 'verifying-dropped',\n    STATE_VERIFYING_RESOLVED: 'verifying-resolved',\n\n    /**\n     * Return whether the given state should be considered open or closed.\n     *\n     * Args:\n     *     state (string):\n     *         The state to check.\n     *\n     * Returns:\n     *     boolean:\n     *     true if the given state is open.\n     */\n    isStateOpen(state) {\n        return (state === RB.BaseComment.STATE_OPEN ||\n                state === RB.BaseComment.STATE_VERIFYING_DROPPED ||\n                state === RB.BaseComment.STATE_VERIFYING_RESOLVED);\n    },\n\n    strings: {\n        INVALID_ISSUE_STATUS: 'issueStatus must be one of STATE_DROPPED, ' +\n                              'STATE_OPEN, STATE_RESOLVED, ' +\n                              'STATE_VERIFYING_DROPPED, or ' +\n                              'STATE_VERIFYING_RESOLVED',\n    },\n});\n"]}