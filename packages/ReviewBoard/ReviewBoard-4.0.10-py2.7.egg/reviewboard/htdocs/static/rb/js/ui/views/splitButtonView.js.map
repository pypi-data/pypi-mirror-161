{"version":3,"sources":["splitButtonView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,eAAH,GAAqB,EAAE,CAAC,cAAH,CAAkB,MAAlB,CAAyB;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,UAAU,GAAa;IAAA,IAAZ,OAAY,uEAAJ,EAAI;IACnB,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,UAA5B,CAAuC,IAAvC,CAA4C,IAA5C,EAAkD;MAC9C,aAAa,EAAE,OAAO,CAAC,aADuB;MAE9C,gBAAgB,EAAE,IAF4B;MAG9C,QAAQ,EAAE,EAAE,CAAC,QAAH,CAAY,gBAHwB;MAI9C,oBAAoB,EAAE,OAAO,CAAC,KAJgB;MAK9C,IAAI,EAAE,OAAO,CAAC;IALgC,CAAlD;IAQA,KAAK,gBAAL,GAAwB,OAAO,CAAC,EAAhC;IACA,KAAK,aAAL,GAAqB,OAAO,CAAC,YAA7B;EACH,CArCyC;;EAuC1C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,GAAG;IACL,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,MAA5B,CAAmC,IAAnC,CAAwC,IAAxC;;IAEA,IAAI,KAAK,gBAAT,EAA2B;MACvB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,EAA+B,KAAK,gBAApC;IACH;;IAED,MAAM,IAAI,GAAG,KAAK,IAAlB;;IAEA,KAAK,aAAL,CAAmB,OAAnB,CAA2B,GAAG,IAAI;MAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa;QACvB,IAAI,EAAE,GAAG,CAAC,IADa;QAEvB,OAAO,EAAE,GAAG,CAAC;MAFU,CAAb,CAAd;;MAKA,IAAI,GAAG,CAAC,EAAR,EAAY;QACR,KAAK,CAAC,IAAN,CAAW,IAAX,EAAiB,GAAG,CAAC,EAArB;MACH;IACJ,CATD;;IAWA,OAAO,IAAP;EACH;;AAnEyC,CAAzB,CAArB","file":"splitButtonView.js","sourcesContent":["/**\n * A SplitButtonView is a split button with a drop down which, when hovered\n * over, will drop down (or up) a list of alternative options.\n *\n * If the view is to be removed, the remove() method must be called as this\n * view adds elements to the DOM that are not under its root element.\n *\n * Deprecated:\n *     4.0:\n *     Consumers should use :js:class:`RB.MenuButtonView` instead.\n */\nRB.SplitButtonView = RB.MenuButtonView.extend({\n    /**\n     * Set up all initial state and event listeners.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     ariaMenuLabel (string):\n     *         A descriptive label for the drop-down menu, for screen readers.\n     *\n     *     text (string):\n     *         The text shown on the button.\n     *\n     *     click (function or string):\n     *         The handler for click events on the primary button.\n     *\n     *     id (string):\n     *         The DOM ID to use for the primary button.\n     *\n     *     alternatives (Array of object):\n     *         A list of alternative buttons. Each item includes ``text``,\n     *         ``click``, and ``id`` keys which are equivalent to the options\n     *         for the primary button.\n     */\n    initialize(options={}) {\n        RB.MenuButtonView.prototype.initialize.call(this, {\n            ariaMenuLabel: options.ariaMenuLabel,\n            hasPrimaryButton: true,\n            menuType: RB.MenuView.TYPE_BUTTON_MENU,\n            onPrimaryButtonClick: options.click,\n            text: options.text,\n        });\n\n        this._primaryButtonID = options.id;\n        this._alternatives = options.alternatives;\n    },\n\n    /**\n     * Render the split button.\n     *\n     * Returns:\n     *     RB.SplitButtonView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.MenuButtonView.prototype.render.call(this);\n\n        if (this._primaryButtonID) {\n            this.$primaryButton.attr('id', this._primaryButtonID);\n        }\n\n        const menu = this.menu;\n\n        this._alternatives.forEach(alt => {\n            const $item = menu.addItem({\n                text: alt.text,\n                onClick: alt.click,\n            });\n\n            if (alt.id) {\n                $item.attr('id', alt.id);\n            }\n        });\n\n        return this;\n    },\n});\n"]}