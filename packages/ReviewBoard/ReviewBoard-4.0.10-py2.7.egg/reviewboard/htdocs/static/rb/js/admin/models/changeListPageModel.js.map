{"version":3,"sources":["changeListPageModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,KAAH,CAAS,cAAT,GAA0B,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe;EACrC,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAkB,QAA7B,EAAuC;IAC7C,OAAO,EAAE,EADoC;IAE7C,cAAc,EAAE;EAF6B,CAAvC,CAD2B;;EAMrC;AACJ;AACA;EACI,UAAU,GAAG;IACT,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAkB,UAAlB,CAA6B,KAA7B,CAAmC,IAAnC,EAAyC,SAAzC;IAEA,KAAK,SAAL,GAAiB,IAAI,QAAQ,CAAC,UAAb,EAAjB;IACA,KAAK,QAAL,CAAc,KAAK,SAAnB,EAA8B,kBAA9B,EACc,MAAM,KAAK,GAAL,CAAS,gBAAT,EAA2B,KAAK,SAAL,CAAe,MAA1C,CADpB;EAEH,CAfoC;;EAiBrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,CAAC,EAAD,EAAK;IACP,KAAK,SAAL,CAAe,GAAf,CAAmB;MACf,EAAE,EAAE;IADW,CAAnB;EAGH,CA5BoC;;EA8BrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,QAAQ,CAAC,EAAD,EAAK;IACT,KAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,SAAL,CAAe,GAAf,CAAmB,EAAnB,CAAtB;EACH;;AAvCoC,CAAf,CAA1B","file":"changeListPageModel.js","sourcesContent":["/**\n * The model for the Administration UI's Change List page.\n *\n * This manages the selection state for the rows in the page.\n *\n * Attributes:\n *     selection (Backbone.Collection of Backbone.Model):\n *         The collection managing selected items. Each is a basic model with\n *         an ID corresponding to the item's ID.\n *\n * Model Attributes:\n *     actions (Array of object):\n *         The actions that are enabled for items on the page. Each is an\n *         object with the following keys:\n *\n *         ``id`` (:js:class:`string`):\n *             The action's identifier.\n *\n *         ``label`` (:js:class:`string`):\n *             The human-readable label.\n */\nRB.Admin.ChangeListPage = RB.Page.extend({\n    defaults: _.defaults(RB.Page.prototype.defaults, {\n        actions: [],\n        selectionCount: 0,\n    }),\n\n    /**\n     * Initialize the page model.\n     */\n    initialize() {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        this.selection = new Backbone.Collection();\n        this.listenTo(this.selection, 'add remove reset',\n                      () => this.set('selectionCount', this.selection.length));\n    },\n\n    /**\n     * Mark an item as selected.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the item to mark as selected.\n     */\n    select(id) {\n        this.selection.add({\n            id: id,\n        });\n    },\n\n    /**\n     * Mark an item as no longer being selected.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the item to unselect.\n     */\n    unselect(id) {\n        this.selection.remove(this.selection.get(id));\n    },\n});\n"]}