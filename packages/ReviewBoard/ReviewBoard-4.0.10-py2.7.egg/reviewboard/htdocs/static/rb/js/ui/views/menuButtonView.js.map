{"version":3,"sources":["menuButtonView.es6.js"],"names":[],"mappings":"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","file":"menuButtonView.js","sourcesContent":["/**\n * A button that offers a drop-down menu when clicked.\n *\n * Menu buttons have the appearance of a button with a drop-down indicator.\n * When clicked, they display a menu either below or above the button\n * (depending on their position on the screen).\n *\n * They may also be grouped into two buttons, one primary button (which works\n * as a standard, independent button) and one drop-down button (which works\n * as above, but just shows the drop-down indicator).\n *\n * Version Added:\n *     4.0\n *\n * Attributes:\n *     $primaryButton (jQuery):\n *         The primary button, if one is configured separate from the drop-down\n *         button.\n *\n *     menu (RB.MenuView):\n *         The menu associated with the button.\n */\nRB.MenuButtonView = Backbone.View.extend({\n    className: 'rb-c-menu-button',\n\n    events: {\n        'mouseenter .rb-c-menu-button__toggle': '_openMenu',\n        'focusout': '_onFocusOut',\n        'mouseleave': '_closeMenu',\n        'keydown .rb-c-menu-button__toggle': '_onToggleButtonKeyDown',\n    },\n\n    template: _.template(dedent`\n        <% if (hasPrimaryButton) { %>\n         <div class=\"rb-c-button-group\" role=\"group\">\n          <button class=\"rb-c-menu-button__primary rb-c-button\"\n                  type=\"button\"><%- buttonText %></button>\n          <button class=\"rb-c-menu-button__toggle rb-c-button\"\n                  id=\"<%- labelID %>\"\n                  type=\"button\"\n                  aria-label=\"<%- menuLabel %>\">\n           <span class=\"rb-icon rb-icon-dropdown-arrow\"></span>\n          </button>\n         </div>\n        <% } else { %>\n         <button class=\"rb-c-button rb-c-menu-button__toggle\"\n                 id=\"<%- labelID %>\"\n                 type=\"button\">\n          <%- buttonText %>\n          <span class=\"rb-icon rb-icon-dropdown-arrow\"></span>\n         </button>\n        <% } %>\n    `),\n\n    /**\n     * Initialize the menu button.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     ariaMenuLabel (string, optional):\n     *         A descriptive label for the drop-down menu, for screen readers.\n     *         This is only needed if a primary button was added. Otherwise,\n     *         ``text`` is used as the label.\n     *\n     *     hasPrimaryButton (boolean, optional):\n     *         Whether there should be a primary button separate from the\n     *         drop-down button.\n     *\n     *     menuItems (Array of object, optional):\n     *         A list of menu items. Each will be passed to\n     *         :js:meth:`RB.MenuView.prototype.addItem`. If not provided,\n     *         explicit items should be added to the menu.\n     *\n     *     menuType (number, optional):\n     *         The type of menu to use. If provided, this must be one of\n     *         :js:attr:`RB.MenuView.TYPE_STANDARD_MENU` or\n     *         :js:attr:`RB.MenuView.TYPE_BUTTON_MENU`. If not provided,\n     *         this will be a standard menu.\n     *\n     *     onPrimaryButtonClick (function, optional):\n     *         The handler for click events on the primary button. If set,\n     *         this implies ``hasPrimaryButton: true``.\n     *\n     *     text (string):\n     *         The text shown on the button.\n     */\n    initialize(options={}) {\n        this._ariaMenuLabel = options.ariaMenuLabel || gettext('More options');\n        this._menuItems = options.menuItems || [];\n        this._menuType = options.menuType || RB.MenuView.TYPE_STANDARD_MENU;\n        this._buttonText = options.text;\n        this._buttonOnClick = options.onPrimaryButtonClick;\n        this._hasPrimaryButton = (!!this._buttonOnClick ||\n                                  options.hasPrimaryButton);\n\n        this.menu = null;\n        this.$primaryButton = null;\n\n        this._$buttonGroup = null;\n        this._openDirection = 'down';\n    },\n\n    /**\n     * Remove the view from the DOM.\n     */\n    remove() {\n        this.menu.remove();\n\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.MenuButtonView:\n     *     This object, for chaining.\n     */\n    render() {\n        const labelID = _.uniqueId('__rb-menubuttonview__label');\n        const hasPrimaryButton = this._hasPrimaryButton;\n\n        this.$el\n            .addClass(this.className)\n            .attr('role', 'group')\n            .html(this.template({\n                buttonText: this._buttonText,\n                hasPrimaryButton: hasPrimaryButton,\n                labelID: labelID,\n                menuLabel: this._ariaMenuLabel,\n            }));\n\n        if (hasPrimaryButton) {\n            this.$primaryButton = this.$('.rb-c-menu-button__primary')\n                .on('click', this._buttonOnClick.bind(this));\n            console.assert(this.$primaryButton.length === 1);\n        }\n\n        this._$dropDownButton = this.$('.rb-c-menu-button__toggle');\n        console.assert(this._$dropDownButton.length === 1);\n\n        /* Create and populate the drop-down menu. */\n        const menu = new RB.MenuView({\n            ariaLabelledBy: labelID,\n            $controller: this._$dropDownButton,\n            type: this._menuType,\n        });\n        menu.render();\n\n        this.listenTo(menu, 'opening', () => {\n            this._$dropDownButton.addClass('js-hover');\n            this._updateMenuPosition();\n        });\n\n        this.listenTo(menu, 'closing', () => {\n            this._$dropDownButton.removeClass('js-hover');\n        });\n\n        for (let i = 0; i < this._menuItems.length; i++) {\n            menu.addItem(this._menuItems[i]);\n        }\n\n        menu.$el.appendTo(this.$el);\n\n        this.menu = menu;\n\n        return this;\n    },\n\n    /**\n     * Position the drop-down menu above or below the button.\n     *\n     * This will attempt to determine whether there's enough space below\n     * the button for the menu to fully appear. If there is not, then the\n     * menu will appear above the button instead.\n     *\n     * The resulting direction will also impact the styling of the button and\n     * menu, helping to create a connected appearance.\n     */\n    _updateMenuPosition() {\n        const $button = this._$dropDownButton;\n        const buttonY1 = $button.offset().top;\n        const buttonY2 = buttonY1 + $button.innerHeight();\n        const pageY1 = window.pageYOffset;\n        const pageY2 = window.pageYOffset + window.innerHeight;\n        let direction;\n\n        if (pageY1 >= buttonY1) {\n            /*\n             * The button is at least partially off-screen, above the current\n             * viewport. Drop the menu down.\n             */\n            direction = 'down';\n        } else if (pageY2 <= buttonY2) {\n            /*\n             * The button is at least partially off-screen, below the current\n             * viewport. Drop the menu up.\n             */\n            direction = 'up';\n        } else {\n            const menuHeight = this.menu.$el.outerHeight();\n\n            /*\n             * The button is fully on-screen. See if there's enough room below\n             * the button for the menu.\n             */\n            if (pageY2 >= buttonY2 + menuHeight) {\n                /* The menu can fully fit below the button. */\n                direction = 'down';\n            } else {\n                /* The menu cannot fully fit below the button. */\n                direction = 'up';\n            }\n        }\n\n        this._openDirection = direction;\n\n        this.$el.toggleClass('-opens-up', direction === 'up');\n        this.menu.$el.css(direction === 'down' ? 'top' : 'bottom',\n                          $button.innerHeight());\n    },\n\n    /**\n     * Show the menu.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass to :js:meth:`RB.MenuView.prototype.open`.\n     */\n    _openMenu(options) {\n        this.menu.open(options);\n    },\n\n    /**\n     * Close the menu.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass to :js:meth:`RB.MenuView.prototype.close`.\n     */\n    _closeMenu(options) {\n        this.menu.close(options);\n    },\n\n    /**\n     * Handle a focus-out event.\n     *\n     * This will immediately hide the menu, if the newly-focused item is\n     * not a child of this view.\n     *\n     * Args:\n     *     evt (jQuery.Event):\n     *         The focus-in event.\n     */\n    _onFocusOut(evt) {\n        evt.stopPropagation();\n\n        /*\n         * Only close the menu if focus has moved to something outside of\n         * this component.\n         */\n        if (!evt.currentTarget.contains(evt.relatedTarget)) {\n            this._closeMenu({\n                animate: false,\n            });\n        }\n    },\n\n    /**\n     * Handle a keydown event.\n     *\n     * When the drop-down button has focus, this will take care of handling\n     * keyboard-based navigation, allowing the menu to be opened or closed.\n     * Opening the menu will transfer focus to the menu items.\n     *\n     * Args:\n     *     evt (jQuery.Event):\n     *         The keydown event.\n     *\n     * Returns:\n     *     boolean:\n     *     ``True`` if the event was handled explicitly by the menu button.\n     *     ``False`` if it should bubble up or invoke default behavior.\n     */\n    _onToggleButtonKeyDown(evt) {\n        switch (evt.which) {\n            case $.ui.keyCode.DOWN:\n            case $.ui.keyCode.RETURN:\n            case $.ui.keyCode.SPACE:\n            case $.ui.keyCode.UP:\n                this._openMenu({\n                    animate: false,\n                });\n\n                if (this._openDirection === 'up') {\n                    this.menu.focusLastItem();\n                } else if (this._openDirection === 'down') {\n                    this.menu.focusFirstItem();\n                }\n\n                return false;\n\n            case $.ui.keyCode.ESCAPE:\n                this._closeMenu({\n                    animate: false,\n                });\n                return false;\n        }\n    },\n});\n"]}