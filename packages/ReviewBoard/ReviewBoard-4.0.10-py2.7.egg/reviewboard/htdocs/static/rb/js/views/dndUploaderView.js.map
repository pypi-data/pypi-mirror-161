{"version":3,"sources":["dndUploaderView.es6.js"],"names":[],"mappings":"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","file":"dndUploaderView.js","sourcesContent":["(function() {\n\n\n/**\n * A model for creating drag and drop targets.\n *\n * Registering a RB.DnDDropTarget with the RB.DnDUploader will create an\n * overlay on top of the target when files are dragged over the page. This\n * overlay will accept dropped files and run the dropAction for each file\n * dropped on it.\n *\n * Model Attributes:\n *     $target (jQuery):\n *         The target element to allow file drops on.\n *\n *     callback (function):\n *         The function to call when a file is dropped.\n *\n *     dropText (string):\n *         The string to show in the overlay.\n */\nconst DnDDropTarget = Backbone.Model.extend({\n    defaults() {\n        return {\n            $target: $(window),\n            callback: function() {},\n            dropText: gettext('Drop to upload')\n        };\n    }\n});\n\n\n/**\n * Displays an overlay over an element that accepts file drops.\n *\n * The overlay appears as semi-transparent black with the dropText message in\n * the center.\n *\n * If the user cancels the drop or moves the mouse out of the page, the\n * overlay will fade away.\n */\nconst DnDDropOverlayView = Backbone.View.extend({\n    className: 'dnd-overlay',\n\n    events: {\n        'dragenter': '_onDragEnter',\n        'dragover': '_onDragOver',\n        'dragleave': '_onDragLeave',\n        'drop': '_onDrop'\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     DnDDropOverlayView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.text(this.model.get('dropText'));\n\n        return this;\n    },\n\n    /**\n     * Show the overlay.\n     */\n    show() {\n        const $target = this.model.get('$target');\n        $target.addClass('dnd-overlay-visible');\n\n        /*\n         * Adding the class to the target may change its visibility or size.\n         * Let that clear before trying to position/size the overlay.\n         */\n        _.defer(() => {\n            const offset = $target.offset();\n            const width = $target.outerWidth() + 'px';\n            const height = $target.outerHeight() + 'px';\n\n            this.$el\n                .css({\n                    width: width,\n                    height: height,\n                    'line-height': height,\n                    left: offset.left + 'px',\n                    top: offset.top + 'px'\n                })\n                .show();\n        });\n    },\n\n    /**\n     * Hide the overlay.\n     */\n    hide() {\n        this.model.get('$target').removeClass('dnd-overlay-visible');\n        this.$el.hide();\n    },\n\n    /**\n     * Close the overlay.\n     *\n     * The overlay will fade out, and once it's gone, it will emit the \"closed\"\n     * event and remove itself from the page.\n     */\n    close() {\n        this.$el.fadeOut(() => {\n            this.trigger('closed');\n            this.remove();\n        });\n    },\n\n    /**\n     * Handle drop events on the overlay.\n     *\n     * This will call the appropriate callback for all dropped files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n        const files = dt && dt.files;\n\n        if (files) {\n            const callback = this.model.get('callback');\n\n            for (let file of Array.from(files)) {\n                callback(file);\n            }\n        }\n\n        this.trigger('closing');\n    },\n\n    /**\n     * Handle dragenter events on the overlay.\n     *\n     * If there's files being dragged, the drop effect (usually represented\n     * by a mouse cursor) will be set to indicate a copy of the files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragEnter(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'copy';\n            this.$el.addClass('dnd-overlay-highlight');\n        }\n    },\n\n    /**\n     * Handle dragover events on the overlay.\n     *\n     * This merely prevents the default action, which indicates to the\n     * underlying API that this element can be dropped on.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event which triggered the callback.\n     */\n    _onDragOver(e) {\n        e.preventDefault();\n    },\n\n    /**\n     * Handle dragleave events on the overlay.\n     *\n     * If there were files previously being dragged over the overlay,\n     * the drop effect will be reset.\n     *\n     * The overlay is always closed on a dragleave.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragLeave(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'none';\n            this.$el.removeClass('dnd-overlay-highlight');\n        }\n    }\n});\n\n\n/*\n * Handles drag-and-drop file uploads for a review request.\n *\n * This makes it possible to drag files from a file manager and drop them\n * into Review Board. This requires browser support for HTML 5 file\n * drag-and-drop, which is available in most modern browsers.\n *\n * The moment the DnDUploader is created, it will begin listening for\n * DnD-related events on the window.\n */\nRB.DnDUploader = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._dropTargets = new Backbone.Collection({\n            model: DnDDropTarget\n        });\n        this._dropOverlays = [];\n        this._hideOverlayTimeout = null;\n        this._overlaysVisible = false;\n        this._overlaysHiding = false;\n\n        _.bindAll(this, '_showOverlays', '_hideOverlays');\n\n        $(window)\n            .on('dragstart dragenter dragover', this._showOverlays)\n            .on('dragend dragleave', this._hideOverlays);\n    },\n\n    /**\n     * Register a new drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     *\n     *     dropText (string):\n     *         The text to show on the overlay.\n     *\n     *     callback (function):\n     *         The function to call when a file is dropped. This takes a single\n     *         file argument, and will be called for each file that is dropped\n     *         on the target.\n     */\n    registerDropTarget($target, dropText, callback) {\n        if (this._dropTargets.findWhere({ $target }) === undefined) {\n            const target = new DnDDropTarget({\n                $target,\n                dropText,\n                callback\n            });\n            this._dropTargets.add(target);\n\n            const overlay = new DnDDropOverlayView({\n                model: target\n            });\n\n            overlay.render().$el\n                .hide()\n                .appendTo(document.body);\n            this.listenTo(overlay, 'closing', this._hideOverlays);\n\n            this._dropOverlays.push(overlay);\n        } else {\n            console.error('Drop target was already registered!', $target);\n        }\n    },\n\n    /**\n     * Unregister an existing drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     */\n    unregisterDropTarget($target) {\n        const target = this._dropTargets.findWhere({ $target: $target });\n        const overlayIx = this._dropOverlays.findIndex(\n            overlay => (overlay.model === target));\n\n        if (overlayIx !== -1) {\n            this._dropOverlays[overlayIx].remove();\n            this._dropOverlays.splice(overlayIx, 1);\n        }\n\n        if (target !== undefined) {\n            this._dropTargets.remove(target);\n        }\n    },\n\n    /**\n     * Show the drop overlays.\n     *\n     * An overlay will be displayed over all the registered drop targets to\n     * give the user a place to drop the files onto. The overlay will report\n     * any files dropped.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _showOverlays(e) {\n        if (e.originalEvent.dataTransfer !== undefined &&\n            Array.from(e.originalEvent.dataTransfer.types).includes('Files')) {\n            this._overlaysHiding = false;\n\n            if (!this._overlaysVisible) {\n                this._overlaysVisible = true;\n                this._dropOverlays.forEach(overlay => overlay.show());\n            }\n        }\n    },\n\n    /**\n     * Hide the drop overlays.\n     */\n    _hideOverlays() {\n        /*\n         * This will get called many times because the event bubbles up from\n         * all the children of the document. We only want to hide the overlays\n         * when the drag exits the window.\n         *\n         * In order to make this work reliably, we only hide the overlays after\n         * a timeout (to make sure there's not a dragenter event coming\n         * immediately after this).\n         */\n        if (this._hideOverlayTimeout) {\n            clearTimeout(this._hideOverlayTimeout);\n        }\n\n        this._overlaysHiding = true;\n        this._hideOverlayTimeout = setTimeout(() => {\n            if (this._overlaysHiding) {\n                this._overlaysVisible = false;\n                this._dropOverlays.forEach(overlay => overlay.hide());\n            }\n        }, 200);\n    }\n}, {\n    instance: null,\n\n    /**\n     * Create the DnDUploader instance.\n     *\n     * Returns:\n     *     RB.DnDUploader:\n     *     The new instance.\n     */\n    create() {\n        console.assert(RB.DnDUploader.instance === null,\n                       'DnDUploader.create may only be called once');\n\n        RB.DnDUploader.instance = new RB.DnDUploader();\n        return RB.DnDUploader.instance;\n    }\n});\n\n\n})();\n"]}