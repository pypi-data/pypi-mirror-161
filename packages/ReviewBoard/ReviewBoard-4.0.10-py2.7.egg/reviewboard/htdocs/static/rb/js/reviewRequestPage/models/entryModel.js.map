{"version":3,"sources":["entryModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,iBAAH,CAAqB,KAArB,GAA6B,QAAQ,CAAC,KAAT,CAAe,MAAf,CAAsB;EAC/C,QAAQ,EAAE;IACN,cAAc,EAAE,IADV;IAEN,SAAS,EAAE,KAFL;IAGN,IAAI,EAAE,IAHA;IAIN,IAAI,EAAE,IAJA;IAKN,mBAAmB,EAAE,IALf;IAMN,MAAM,EAAE,IANF;IAON,gBAAgB,EAAE;EAPZ,CADqC;;EAW/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,KAAK,CAAC,KAAD,EAAQ;IACT,OAAO;MACH,EAAE,EAAE,KAAK,CAAC,EADP;MAEH,SAAS,EAAE,KAAK,CAAC,SAFd;MAGH,cAAc,EAAE,CAAC,CAAC,MAAF,CAAS,KAAK,CAAC,cAAf,IACE,KAAK,CAAC,cADR,GAEE,MAAM,CAAC,GAAP,CAAW,KAAK,CAAC,cAAjB,EAAiC,MAAjC,EALf;MAMH,IAAI,EAAE,KAAK,CAAC,IAAN,IAAc,IANjB;MAOH,gBAAgB,EAAE,CAAC,CAAC,MAAF,CAAS,KAAK,CAAC,gBAAf,IACE,KAAK,CAAC,gBADR,GAEE,MAAM,CAAC,GAAP,CAAW,KAAK,CAAC,gBAAjB,EAAmC,MAAnC,EATjB;MAUH,MAAM,EAAE,KAAK,CAAC,MAVX;MAWH,mBAAmB,EAAE,KAAK,CAAC;IAXxB,CAAP;EAaH,CApC8C;;EAsC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS,CAAC,QAAD,EAAW;IAChB,MAAM,YAAY,GAAG,MAAM,CAAC,GAAP,CAAW,QAAQ,CAAC,gBAApB,EAAsC,MAAtC,EAArB;IAEA;;IACA,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAT,IAAiB,IAAjC;IACA,MAAM,SAAS,GAAG,KAAK,GAAL,CAAS,MAAT,KAAoB,IAAtC;IAEA,OAAQ,YAAY,GAAG,KAAK,GAAL,CAAS,kBAAT,CAAf,IACA,OAAO,KAAK,SADpB;EAEH,CA9D8C;;EAgE/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,iBAAiB,CAAC,SAAD,EAAY,CAC5B,CA7E8C;;EA+E/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,gBAAgB,CAAC,SAAD,EAAY,CAC3B,CA7F8C;;EA+F/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,YAAY,CAAC,QAAD,EAAW;IACnB,KAAK,GAAL,CAAS,MAAT,EAAiB,iBAAjB,CAAmC,IAAnC,EAAyC,QAAzC;EACH,CA5G8C;;EA8G/C;AACJ;AACA;EACI,mBAAmB,GAAG;IAClB,KAAK,GAAL,CAAS,MAAT,EAAiB,wBAAjB,CAA0C,IAA1C;EACH;;AAnH8C,CAAtB,CAA7B","file":"entryModel.js","sourcesContent":["/**\n * An entry on the review request page.\n *\n * This represents entries on the review request page, such as reviews and\n * review request changes. It stores common state used by all entries.\n *\n * This is meant to be subclassed to handle parsing of custom content or\n * storing custom state, but can be used as-is for simple entries.\n *\n * Model Attributes:\n *     addedTimestamp (Date):\n *         The date/time the entry was added.\n *\n *     collapsed (boolean):\n *         Whether this entry is in a collapsed state.\n *\n *     etag (string):\n *         An ETag representing the content or state of the entry.\n *\n *         This is used along with ``updatedTimestamp`` to determine if an\n *         entry has new content.\n *\n *     page (RB.ReviewRequestPage):\n *         The page that owns this entry.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         The review request editor managing state on the page.\n *\n *     typeID (string):\n *         The type of this entry, corresponding to a entry type ID that's\n *         been registered server-side.\n *\n *     updatedTimestamp (Date):\n *         The date/time the entry was last updated.\n *\n *         This is used along with ``etag`` to determine if an entry has new\n *         content.\n */\nRB.ReviewRequestPage.Entry = Backbone.Model.extend({\n    defaults: {\n        addedTimestamp: null,\n        collapsed: false,\n        etag: null,\n        page: null,\n        reviewRequestEditor: null,\n        typeID: null,\n        updatedTimestamp: null,\n    },\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        return {\n            id: attrs.id,\n            collapsed: attrs.collapsed,\n            addedTimestamp: _.isDate(attrs.addedTimestamp)\n                            ? attrs.addedTimestamp\n                            : moment.utc(attrs.addedTimestamp).toDate(),\n            etag: attrs.etag || null,\n            updatedTimestamp: _.isDate(attrs.updatedTimestamp)\n                              ? attrs.updatedTimestamp\n                              : moment.utc(attrs.updatedTimestamp).toDate(),\n            typeID: attrs.typeID,\n            reviewRequestEditor: attrs.reviewRequestEditor,\n        };\n    },\n\n    /**\n     * Return whether an entry has been updated server-side.\n     *\n     * This defaults to comparing the timestamp and the ETag. While these\n     * should always be sufficient, subclasses can override the logic if\n     * needed.\n     *\n     * Args:\n     *     metadata (object):\n     *         Deserialized metadata from the update payload.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the entry has been updated. ``false`` if it has not.\n     */\n    isUpdated(metadata) {\n        const newTimestamp = moment.utc(metadata.updatedTimestamp).toDate();\n\n        /* Normalize these to null, if undefined or empty. */\n        const newETag = metadata.etag || null;\n        const entryETag = this.get('etag') || null;\n\n        return (newTimestamp > this.get('updatedTimestamp') ||\n                newETag !== entryETag);\n    },\n\n    /**\n     * Handle operations before applying an update from the server.\n     *\n     * This can be overridden by entries to store state or before cleanup\n     * before reloading and re-rendering the HTML from the server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    beforeApplyUpdate(entryData) {\n    },\n\n    /**\n     * Handle operations after applying an update from the server.\n     *\n     * This can be overridden by entries to restore state or perform other\n     * post-update tasks after reloading and re-rendering the HTML from the\n     * server.\n     *\n     * Subclasses do not need to call the parent method.\n     *\n     * Args:\n     *     entryData (object):\n     *         The metadata provided by the server in the update.\n     */\n    afterApplyUpdate(entryData) {\n    },\n\n    /**\n     * Watch for updates to this entry.\n     *\n     * The entry will be checked for updates at least once every ``periodMS``\n     * milliseconds.\n     *\n     * Args:\n     *     periodMS (number):\n     *         The frequency at which the updates should be polled. Updates\n     *         will be checked at least this often.\n     */\n    watchUpdates(periodMS) {\n        this.get('page').watchEntryUpdates(this, periodMS);\n    },\n\n    /**\n     * Stop watching for updates to this entry.\n     */\n    stopWatchingUpdates() {\n        this.get('page').stopWatchingEntryUpdates(this);\n    },\n});\n"]}