{"version":3,"sources":["apiTokensView.es6.js"],"names":[],"mappings":"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","file":"apiTokensView.js","sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        localSiteName: null,\n        showRemove: true\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: ['id', 'note', 'policy', 'tokenValue'],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    savePolicy(policy, options) {\n        this._saveAttribute('policy', policy, options);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    _saveAttribute(attr, value, options) {\n        this.resource.ready({\n            ready: () => {\n                this.resource.set(attr, value);\n                this.resource.save(options);\n            }\n        });\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save();\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n\n        try {\n            const policy = JSON.parse(policyStr);\n\n            this.model.savePolicy(policy, {\n                success: () => {\n                    this.model.set('policyType', POLICY_CUSTOM);\n\n                    if (closeOnSave) {\n                        this.remove();\n                    }\n                },\n                error: (model, xhr) => {\n                    if (xhr.errorPayload.err.code === 105 &&\n                        xhr.errorPayload.fields.policy) {\n                        alert(xhr.errorPayload.fields.policy);\n                    } else {\n                        alert(xhr.errorPayload.err.msg);\n                    }\n                }\n            });\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n            } else {\n                throw e;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template([\n        '<div class=\"config-api-token-value\"><%- tokenValue %></div>',\n        '<span class=\"config-api-token-note\"></span>'\n    ].join('')),\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$note = null;\n\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$note = this.$('.config-api-token-note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        const note = this.model.resource.get('note');\n        this._$note\n            .toggleClass('empty', !note)\n            .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.previous('policyType')\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'config-site-api-tokens',\n\n    template: _.template(dedent`\n        <% if (name) { %>\n         <div class=\"djblets-l-config-forms-container\">\n          <h3><%- name %></h3>\n         </div>\n        <% } %>\n        <div class=\"api-tokens\">\n        </div>\n    `),\n\n    generateTokenTemplate: _.template(dedent`\n        <li class=\"generate-api-token djblets-c-config-forms-list__item\">\n         <a href=\"#\"><%- generateText %></a>\n        </li>\n    `),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        this._$generateTokenItem =\n            $(this.generateTokenTemplate({\n                generateText: _`Generate a new API token`,\n            }))\n            .appendTo(this._listView.getBody());\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onGenerateClicked() {\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        apiToken.save({\n            success: () => {\n                this.collection.add({\n                    resource: apiToken\n                });\n\n                this._$generateTokenItem\n                    .detach()\n                    .appendTo(this._listView.getBody());\n            }\n        });\n\n        return false;\n    }\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"api-tokens-list djblets-l-config-forms-container\n                    -is-recessed -is-top-flush\">\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"]}