{"version":3,"sources":["infoboxManagerView.es6.js"],"names":[],"mappings":"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","file":"infoboxManagerView.js","sourcesContent":["/**\n * Manages the registration, display, and interaction of infoboxes.\n *\n * This view is responsible for tracking the various forms of infoboxes needed\n * on a page and handling their display when hovering over a target. It can\n * also create jQuery functions for registering elements with particular\n * infoboxes.\n *\n * There's only one instance used per page, accessed via\n * :js:func:`RB.InfoboxManagerView.getInstance`.\n */\nRB.InfoboxManagerView = Backbone.View.extend({\n    /** The delay after hovering over a target before displaying an infobox. */\n    POPUP_DELAY_MS: 700,\n\n    /** The delay after leaving a target before hiding an infobox. */\n    HIDE_DELAY_MS: 400,\n\n    /** The animation time for fading in an infobox. */\n    FADE_IN_MS: 200,\n\n    /** The animation time for fading out an infobox. */\n    FADE_OUT_MS: 150,\n\n    /**\n     * Initialize the manager.\n     */\n    initialize() {\n        this._infoboxViews = {};\n        this._activeInfoboxView = null;\n        this._cache = {};\n        this._showTimeout = null;\n        this._hideTimeout = null;\n    },\n\n    /**\n     * Remove the manager's infoboxes from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        for (let key in this._infoboxViews) {\n            if (this._infoboxViews.hasOwnProperty(key)) {\n                this._infoboxViews[key].remove();\n            }\n        }\n\n        this._infoboxViews = {};\n        this._cache = {};\n        this._activeInfoboxView = null;\n    },\n\n    /**\n     * Add one or more targets for a particular type of infobox.\n     *\n     * These targets will trigger the specified infobox when hovering over\n     * them.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to register with. This must be a subclass\n     *         of :js:class:`RB.BaseInfoboxView`.\n     *\n     *     $targets (jQuery):\n     *         A set of jQuery targets to register with the infobox.\n     */\n    addTargets(infoboxViewType, $targets) {\n        $targets.each((idx, target) => {\n            const $target = $(target);\n\n            if (!$target.data('has-infobox')) {\n                /*\n                 * Note that we're wanting to bind the functions instead of\n                 * using fat arrow functions in order to avoid having two\n                 * new anonymous functions per target, which is wasteful and\n                 * unnecessary.\n                 */\n                $target\n                    .data('has-infobox', true)\n                    .on('mouseenter',\n                        this._onTargetMouseEnter.bind(this, $target,\n                                                      infoboxViewType))\n                    .on('mouseleave', this._onMouseLeave.bind(this));\n            }\n        });\n    },\n\n    /**\n     * Set the positioning for a particular type of infobox.\n     *\n     * This is used to control how an infobox would be positioned on the\n     * page, relative to the target element. It completely overrides the\n     * default positioning for that type of infobox.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to alter the position for.\n     *\n     *     positioning (object):\n     *         The positioning information. This must be a value compatible\n     *         with :js:func:`$.fn.positionToSide`.\n     */\n    setPositioning(infoboxViewType, positioning) {\n        this.getOrCreateInfobox(infoboxViewType).positioning = positioning;\n    },\n\n    /**\n     * Return an instance of a particular type of infobox.\n     *\n     * If the instance doesn't yet exist, it will be created and registered\n     * with the manager.\n     *\n     * Args:\n     *     InfoboxViewType (prototype):\n     *         The type of infobox to return.\n     *\n     * Returns:\n     *     RB.BaseInfoboxView:\n     *     The resulting infobox instance.\n     */\n    getOrCreateInfobox(InfoboxViewType) {\n        const infoboxID = InfoboxViewType.prototype.infoboxID;\n        console.assert(infoboxID,\n                       'RB.BaseInfoboxView subclasses must have an ' +\n                       'infoboxID defined.');\n\n        let view = this._infoboxViews[infoboxID];\n\n        if (view) {\n            return view;\n        }\n\n        view = new InfoboxViewType();\n        view.$el\n            .hide()\n            .on('mouseenter', this._onInfoboxMouseEnter.bind(this))\n            .on('mouseleave', this._onMouseLeave.bind(this))\n            .appendTo(document.body);\n\n        this._infoboxViews[infoboxID] = view;\n\n        return view;\n    },\n\n    /**\n     * Load the contents for an infobox and display it.\n     *\n     * This will perform a HTTP GET on the infobox URL for the given target\n     * and then show the infobox with those contents. If the URL has already\n     * been fetched, the infobox will be displayed immediately and then the\n     * contents replaced once fetched.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The jQuery target element the infobox is being shown for.\n     *\n     *     infoboxView (RB.BaseInfoboxView):\n     *         The infobox view that will contain the HTML contents.\n     */\n    _loadInfobox($target, infoboxView) {\n        console.assert(\n            $target.length === 1,\n            'Too many targets matched when fetching infobox contents');\n\n        const url = infoboxView.getURLForTarget($target);\n        const cachedData = this._cache[url];\n\n        if (cachedData !== undefined) {\n            /*\n             * If we have cached data, show that immediately and update once we\n             * have the result from the server.\n             */\n            infoboxView.setContents(cachedData);\n            this._showInfobox(infoboxView, $target);\n        }\n\n        this._fetchInfoboxContents(url, html => {\n            this._cache[url] = html;\n            infoboxView.setContents(html);\n\n            if (cachedData === undefined) {\n                this._showInfobox(infoboxView, $target);\n            }\n        });\n    },\n\n    /**\n     * Fetch the contents for an infobox from the given URL.\n     *\n     * Args:\n     *     url (string):\n     *         The URL containing the infobox HTML.\n     *\n     *     onDone (function):\n     *         The handler to call when the infobox HTML has been fetched.\n     */\n    _fetchInfoboxContents(url, onDone) {\n        $.ajax(url, {\n            ifModified: true,\n        }).done(onDone);\n    },\n\n    /**\n     * Display an infobox alongside the given target.\n     *\n     * Args:\n     *     infoboxView (RB.BaseInfoboxView):\n     *         The infobox instance to use.\n     *\n     *     $target (jQuery):\n     *         The jQuery element to position the infobox beside.\n     */\n    _showInfobox(infoboxView, $target) {\n        infoboxView.$el\n            .positionToSide($target, _.defaults(infoboxView.positioning, {\n                fitOnScreen: true,\n            }))\n            .fadeIn(this.FADE_IN_MS);\n\n        this._activeInfoboxView = infoboxView;\n    },\n\n    /**\n     * Hide the active infobox.\n     */\n    _hideInfobox() {\n        if (this._activeInfoboxView) {\n            const curInfoboxView = this._activeInfoboxView;\n\n            this._activeInfoboxView.$el.fadeOut(\n                this.FADE_OUT_MS,\n                () => {\n                    /*\n                     * Only clear the active infobox if it hasn't been\n                     * replaced with a new one.\n                     */\n                    if (curInfoboxView === this._activeInfoboxView) {\n                        this._activeInfoboxView = null;\n                    }\n                });\n        }\n    },\n\n    /**\n     * Handler for when the mouse enters the infobox.\n     *\n     * This will prevent the infobox from being hidden after having left the\n     * target.\n     */\n    _onInfoboxMouseEnter() {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n    },\n\n    /**\n     * Handler for when the mouse enters a target.\n     *\n     * This will wait a small amount of time (in case the user is simply\n     * temporarily mousing over the element) and then show the infobox.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The jQuery target element.\n     *\n     *     InfoboxViewType (prototype):\n     *         The type of infobox to show.\n     */\n    _onTargetMouseEnter($target, InfoboxViewType) {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n\n        this._showTimeout = setTimeout(\n            () => {\n                this._showTimeout = null;\n                this._loadInfobox(\n                    $target,\n                    this.getOrCreateInfobox(InfoboxViewType));\n            },\n            this.POPUP_DELAY_MS);\n    },\n\n    /**\n     * Handler for when the mouse leaves a target or infobox.\n     *\n     * If an existing infobox is currently on-screen, it will be faded\n     * out after a brief delay (allowing time to move the mouse onto the\n     * infobox or back onto the target).\n     */\n    _onMouseLeave() {\n        // If we were going to show an infobox, cancel that.\n        clearTimeout(this._showTimeout);\n        this._showTimeout = null;\n\n        // Check if we need to hide any current infobox.\n        if (this._activeInfoboxView) {\n            /*\n             * We have an infobox on the screen, and the mouse is\n             * leaving it. Since there's no other infobox queued up,\n             * begin the process of fading it out, after a delay.\n             */\n            clearTimeout(this._hideTimeout);\n\n            this._hideTimeout = setTimeout(\n                () => {\n                    this._hideInfobox();\n                    this._hideTimeout = null;\n                },\n                this.HIDE_DELAY_MS);\n        }\n    },\n}, {\n    _instance: null,\n\n    /**\n     * Return an instance of the infobox manager.\n     *\n     * If one does not already exist, it will be created.\n     *\n     * Callers should always use this instead of creating an instance\n     * manually.\n     *\n     * Returns:\n     *     RB.InfoboxManagerView:\n     *     The infobox manager instance.\n     */\n    getInstance() {\n        let instance = RB.InfoboxManagerView._instance;\n\n        if (!instance) {\n            instance = new RB.InfoboxManagerView();\n            this._instance = instance;\n        }\n\n        return instance;\n    },\n\n    /**\n     * Create a jQuery function for registering elements with an infobox.\n     *\n     * This is used to create ``$.fn.`` functions that will register all\n     * matching elements as targets for a particular type of infobox.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to use for these elements.\n     *\n     * Returns:\n     *     function:\n     *     The resulting function. This should be assigned to a ``$.fn.``\n     *     function.\n     */\n    createJQueryFn(infoboxViewType) {\n        return function() {\n            RB.InfoboxManagerView.getInstance().addTargets(infoboxViewType,\n                                                           this);\n\n            return this;\n        };\n    },\n});\n"]}