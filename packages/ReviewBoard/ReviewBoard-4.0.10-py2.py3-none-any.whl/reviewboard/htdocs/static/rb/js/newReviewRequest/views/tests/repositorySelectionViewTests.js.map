{"version":3,"sources":["repositorySelectionViewTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,mDAAD,EAAsD,YAAW;EAClE,IAAI,UAAJ;EACA,IAAI,IAAJ;EAEA,UAAU,CAAC,YAAW;IAClB,UAAU,GAAG,IAAI,QAAQ,CAAC,UAAb,CAAwB,CACjC;MAAE,IAAI,EAAE;IAAR,CADiC,EAEjC;MAAE,IAAI,EAAE;IAAR,CAFiC,EAGjC;MAAE,IAAI,EAAE;IAAR,CAHiC,EAIjC;MAAE,IAAI,EAAE;IAAR,CAJiC,CAAxB,EAKV;MACC,KAAK,EAAE,EAAE,CAAC;IADX,CALU,CAAb;IASA,IAAI,GAAG,IAAI,EAAE,CAAC,uBAAP,CAA+B;MAClC,UAAU,EAAE;IADsB,CAA/B,CAAP;EAGH,CAbS,CAAV;EAeA,QAAQ,CAAC,WAAD,EAAc,YAAW;IAC7B,EAAE,CAAC,YAAD,EAAe,YAAW;MACxB,IAAI,CAAC,MAAL;MACA,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,aAAd,CAAjB;MAEA,MAAM,CAAC,QAAQ,CAAC,MAAV,CAAN,CAAwB,IAAxB,CAA6B,UAAU,CAAC,MAAX,CAAkB,MAA/C;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;QACtC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAX,CAAkB,CAAlB,EAAqB,GAArB,CAAyB,MAAzB,CAAb;QACA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAAD,CAAe,IAAf,GAAsB,KAAtB,EAAD,CAAN,CAAsC,IAAtC,CAA2C,IAA3C;MACH;IACJ,CAVC,CAAF;EAWH,CAZO,CAAR;EAcA,QAAQ,CAAC,gBAAD,EAAmB,YAAW;IAClC,EAAE,CAAC,cAAD,EAAiB,YAAW;MAC1B,IAAI,aAAa,GAAG,KAApB;MAEA,IAAI,CAAC,MAAL;MACA,IAAI,CAAC,EAAL,CAAQ,UAAR,EAAoB,UAAU,IAAI;QAC9B,MAAM,CAAC,UAAU,CAAC,GAAX,CAAe,MAAf,CAAD,CAAN,CAA+B,IAA/B,CAAoC,aAApC;QACA,aAAa,GAAG,IAAhB;MACH,CAHD;MAKA,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,aAAd,CAAjB;MACA,CAAC,CAAC,QAAQ,CAAC,CAAD,CAAT,CAAD,CAAe,KAAf;MAEA,MAAM,CAAC,aAAD,CAAN,CAAsB,IAAtB,CAA2B,IAA3B;IACH,CAbC,CAAF;EAcH,CAfO,CAAR;AAgBH,CAjDI,CAAL","file":"repositorySelectionViewTests.js","sourcesContent":["suite('rb/newReviewRequest/views/RepositorySelectionView', function() {\n    let collection;\n    let view;\n\n    beforeEach(function() {\n        collection = new Backbone.Collection([\n            { name: 'Bitbucket Test' },\n            { name: 'GitHub Test' },\n            { name: 'GitLab Test' },\n            { name: 'Local Git Test' },\n        ], {\n            model: RB.Repository,\n        });\n\n        view = new RB.RepositorySelectionView({\n            collection: collection,\n        });\n    });\n\n    describe('Rendering', function() {\n        it('With items', function() {\n            view.render();\n            const children = view.$el.find('.repository');\n\n            expect(children.length).toBe(collection.models.length);\n\n            for (let i = 0; i < children.length; i++) {\n                const name = collection.models[i].get('name');\n                expect($(children[i]).text().strip()).toBe(name);\n            }\n        });\n    });\n\n    describe('Selected event', function() {\n        it('When clicked', function() {\n            let handlerCalled = false;\n\n            view.render();\n            view.on('selected', repository => {\n                expect(repository.get('name')).toBe('GitHub Test');\n                handlerCalled = true;\n            });\n\n            const children = view.$el.find('.repository');\n            $(children[1]).click();\n\n            expect(handlerCalled).toBe(true);\n        });\n    });\n});\n"]}