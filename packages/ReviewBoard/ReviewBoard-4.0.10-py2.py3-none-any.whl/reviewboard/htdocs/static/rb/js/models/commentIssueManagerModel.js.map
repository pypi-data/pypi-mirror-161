{"version":3,"sources":["commentIssueManagerModel.es6.js"],"names":[],"mappings":"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","file":"commentIssueManagerModel.js","sourcesContent":["/**\n * Manages issue states for comments on a review request.\n *\n * CommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n *\n * Events:\n *     issueStatusUpdated:\n *         The issue status of a comment has changed.\n *\n *         Args:\n *             comment (RB.BaseComment):\n *                 The comment that changed.\n *\n *             oldIssueStatus (string):\n *                 The old issue status.\n *\n *             timestamp (string):\n *                 The latest timestamp for the comment.\n *\n *             commentType (string):\n *                 The comment type identifier (one of\n *                 :js:attr:`RB.CommentIssueManager.CommentTypes`).\n *\n *                 Version Added:\n *                     4.0.8\n */\nRB.CommentIssueManager = Backbone.Model.extend({\n    defaults: {\n        reviewRequest: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this._comments = {};\n    },\n\n    /**\n     * Set the state for a comment.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     *     state (string):\n     *          The new state for the comment's issue. This will be one of\n     *          ``open``, ``resolved``, ``dropped``, or ``verify``.\n     */\n    setCommentState(reviewID, commentID, commentType, state) {\n        const comment = this.getComment(reviewID, commentID, commentType);\n        this._requestState(comment, state);\n    },\n\n    /**\n     * Retrieve the model for a given comment.\n     *\n     * This will either generate the appropriate comment object based on\n     * ``commentType``, or grab the comment from a cache if it's been generated\n     * before.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The comment model.\n     */\n    getComment(reviewID, commentID, commentType) {\n        if (!this._comments[commentID]) {\n            const CommentTypes = RB.CommentIssueManager.CommentTypes;\n            const reviewRequest = this.get('reviewRequest');\n            let comment = null;\n\n            switch (commentType) {\n                case CommentTypes.DIFF:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createDiffComment({id: commentID});\n                    break;\n\n                case CommentTypes.SCREENSHOT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createScreenshotComment(commentID);\n                    break;\n\n                case CommentTypes.FILE_ATTACHMENT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createFileAttachmentComment(commentID);\n                    break;\n\n                case CommentTypes.GENERAL:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createGeneralComment(commentID);\n                    break;\n\n                default:\n                    console.error(\n                        'getComment received unexpected comment type \"%s\"',\n                        commentType);\n            }\n\n            this._comments[commentID] = comment;\n        }\n\n        return this._comments[commentID];\n    },\n\n    /**\n     * Set the state of a comment.\n     *\n     * This will store the new state in the comment on the server, and then\n     * notify listeners of the latest comment information.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment to set the state of.\n     *\n     *     state (string):\n     *         The new issue state for the comment.\n     */\n    _requestState(comment, state) {\n        comment.ready({\n            ready: () => {\n                const oldIssueStatus = comment.get('issueStatus');\n\n                comment.set('issueStatus', state);\n                comment.save({\n                    attrs: ['issueStatus'],\n                    success: (comment, rsp) => {\n                        this._notifyIssueStatusChanged(comment, rsp,\n                                                       oldIssueStatus);\n                    },\n                });\n            },\n        });\n    },\n\n    /**\n     * Notify listeners that a comment's issue status changed.\n     *\n     * This will trigger the ``issueStatusUpdated`` event.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment instance that changed.\n     *\n     *     rsp (object):\n     *         The API response object from saving the comment.\n     *\n     *     oldIssueStatus (string):\n     *         The old issue status.\n     */\n    _notifyIssueStatusChanged(comment, rsp, oldIssueStatus) {\n        const CommentTypes = RB.CommentIssueManager.CommentTypes;\n        let rspComment;\n        let commentType;\n\n        if (rsp.diff_comment) {\n            rspComment = rsp.diff_comment;\n            commentType = CommentTypes.DIFF;\n        } else if (rsp.general_comment) {\n            rspComment = rsp.general_comment;\n            commentType = CommentTypes.GENERAL;\n        } else if (rsp.file_attachment_comment) {\n            rspComment = rsp.file_attachment_comment;\n            commentType = CommentTypes.FILE_ATTACHMENT;\n        } else if (rsp.screenshot_comment) {\n            rspComment = rsp.screenshot_comment;\n            commentType = CommentTypes.SCREENSHOT;\n        } else {\n            console.error(\n                'RB.CommentIssueManager._notifyIssueStatusChanged received ' +\n                'unexpected comment object \"%o\"',\n                rsp);\n            return;\n        }\n\n        console.assert(rspComment);\n        console.assert(commentType);\n\n        this.trigger('issueStatusUpdated', comment, oldIssueStatus,\n                     rspComment.timestamp, commentType);\n    },\n}, {\n    /**\n     * A mapping of comment type constants to values.\n     *\n     * The values should be considered opaque. Callers should use the constants\n     * instead.\n     *\n     * These are only used for functionality in this model and objects\n     * interfacing with this model. They should not be used as generic\n     * indicators for model classes.\n     *\n     * Version Added:\n     *     4.0.8\n     */\n    CommentTypes: {\n        DIFF: 'diff_comments',\n        FILE_ATTACHMENT: 'file_attachment_comments',\n        GENERAL: 'general_comments',\n        SCREENSHOT: 'screenshot_comments',\n    },\n});\n"]}