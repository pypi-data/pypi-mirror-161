{"version":3,"sources":["screenshotCommentModel.es6.js"],"names":[],"mappings":"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","file":"screenshotCommentModel.js","sourcesContent":["/**\n * A comment on a screenshot.\n *\n * Model Attributes:\n *     x (number):\n *         The X coordinate of the pixel at the top-left of the comment region.\n *\n *     y (number):\n *         The Y coordinate of the pixel at the top-left of the comment region.\n *\n *     width (number):\n *         The width of the comment region, in pixels.\n *\n *     height (number):\n *         The height of the comment region, in pixels.\n *\n *     screenshotID (number):\n *         The ID of the screenshot that this comment is on.\n *\n *     screenshot (RB.Screenshot):\n *         The screenshot that this comment is on.\n *\n *     thumbnailURL (string):\n *         The URL to an image file showing the region of the comment.\n */\nRB.ScreenshotComment = RB.BaseComment.extend({\n    defaults: _.defaults({\n        x: null,\n        y: null,\n        width: null,\n        height: null,\n        screenshotID: null,\n        screenshot: null,\n        thumbnailURL: null\n    }, RB.BaseComment.prototype.defaults()),\n\n    rspNamespace: 'screenshot_comment',\n    expandedFields: ['screenshot'],\n\n    attrToJsonMap: _.defaults({\n        width: 'w',\n        height: 'h',\n        thumbnailURL: 'thumbnail_url',\n        screenshotID: 'screenshot_id'\n    }, RB.BaseComment.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'x',\n        'y',\n        'width',\n        'height',\n        'screenshotID'\n    ].concat(RB.BaseComment.prototype.serializedAttrs),\n\n    deserializedAttrs: [\n        'x',\n        'y',\n        'width',\n        'height',\n        'thumbnailURL'\n    ].concat(RB.BaseComment.prototype.deserializedAttrs),\n\n    serializers: _.defaults({\n        screenshotID: RB.JSONSerializers.onlyIfUnloaded\n    }, RB.BaseComment.prototype.serializers),\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const result = RB.BaseComment.prototype.parseResourceData.call(\n            this, rsp);\n\n        result.screenshot = new RB.Screenshot(rsp.screenshot, {\n            parse: true\n        });\n        result.screenshotID = result.screenshot.id;\n\n        return result;\n    },\n\n    /*\n     * Validate the attributes of the model.\n     *\n     * This will check the screenshot ID and the region of the comment,\n     * along with the default comment validation.\n     *\n     * Args:\n     *     attrs (object):\n     *         The model attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'screenshotID') && !attrs.screenshotID) {\n            return RB.ScreenshotComment.strings.INVALID_SCREENSHOT_ID;\n        }\n\n        if (_.has(attrs, 'x') && attrs.x < 0) {\n            return RB.ScreenshotComment.strings.INVALID_X;\n        }\n\n        if (_.has(attrs, 'y') && attrs.y < 0) {\n            return RB.ScreenshotComment.strings.INVALID_Y;\n        }\n\n        if (_.has(attrs, 'width') && attrs.width <= 0) {\n            return RB.ScreenshotComment.strings.INVALID_WIDTH;\n        }\n\n        if (_.has(attrs, 'height') && attrs.height <= 0) {\n            return RB.ScreenshotComment.strings.INVALID_HEIGHT;\n        }\n\n        return RB.BaseComment.prototype.validate.apply(this, arguments);\n    }\n}, {\n    strings: {\n        INVALID_SCREENSHOT_ID: 'screenshotID must be a valid ID',\n        INVALID_X: 'x must be >= 0',\n        INVALID_Y: 'y must be >= 0',\n        INVALID_WIDTH: 'width must be > 0',\n        INVALID_HEIGHT: 'height must be > 0'\n    }\n});\n"]}