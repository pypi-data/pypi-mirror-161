{"version":3,"sources":["postCommitView.es6.js"],"names":[],"mappings":"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","file":"postCommitView.js","sourcesContent":["/**\n * A view orchestrating post-commit review request creation.\n *\n * This brings together the BranchesView and CommitsView to provide a UI for\n * letting people browse through the committed revisions in the repository. When\n * the user clicks on one of the commits, it will create a new review request\n * using that commit's ID.\n */\nRB.PostCommitView = Backbone.View.extend({\n    className: 'post-commit',\n\n    loadErrorTemplate: _.template(dedent`\n        <div class=\"error\">\n         <p><%- errorLoadingText %></p>\n         <p class=\"error-text\">\n          <% _.each(errorLines, function(line) { %><%- line %><br /><% }); %>\n         </p>\n         <p>\n          <%- temporaryFailureText %>\n          <a href=\"#\" id=\"reload_<%- reloadID %>\"><%- tryAgainText %></a>\n         </p>\n        </div>\n    `),\n\n    events: {\n        'click #reload_branches': '_loadBranches',\n        'click #reload_commits': '_loadCommits',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $scrollContainer (jQuery):\n     *         The parent container handling all content scrolling.\n     */\n    initialize(options) {\n        const model = this.model;\n        const repository = model.get('repository');\n        const branches = repository.branches;\n\n        this._$scrollContainer = options.$scrollContainer;\n        this._$error = null;\n\n        // Set up the branch selector and bind it to the \"branch\" attribute\n        this._branchesView = new RB.BranchesView({\n            collection: branches,\n        });\n        this._branchesView.on('selected',\n                              branch => model.set('branch', branch));\n\n        this.listenTo(model, 'change:branch', this._onBranchChanged);\n\n        if (!branches.loaded) {\n            this._loadBranches();\n        }\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.PostCommitView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        $('<div/>')\n            .addClass('branches section-header')\n            .append($('<span/>')\n                .text(gettext('Create from an existing commit on:')))\n            .append(this._branchesView.render().el)\n            .appendTo(this.$el);\n\n        if (this._commitsView) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        return this;\n    },\n\n    /**\n     * Load the list of branches from the repository.\n     *\n     * If there's an error loading the branches, the branches selector and\n     * commits list will be hidden, and an error will be displayed along\n     * with the message from the server. The user will have the ability to\n     * try again.\n     */\n    _loadBranches() {\n        this._clearLoadError();\n\n        const branches = this.model.get('repository').branches;\n\n        branches.fetch({\n            success: () => {\n                branches.loaded = true;\n\n                this._branchesView.$el.show();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.show();\n                }\n            },\n            error: (collection, xhr) => {\n                this._branchesView.$el.hide();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.hide();\n                }\n\n                this._showLoadError('branches', xhr);\n            },\n        });\n    },\n\n    /**\n     * Load the list of commits from the repository.\n     *\n     * If there's an error loading the commits, the commits list will be\n     * hidden, and an error will be displayed along with the message from\n     * the server. The user will have the ability to try again.\n     */\n    _loadCommits() {\n        this._clearLoadError();\n\n        this._commitsCollection.fetch({\n            success: () => {\n                this._commitsView.$el.show();\n                this._commitsView.checkFetchNext();\n            },\n            error: (collection, xhr) => {\n                this._commitsView.$el.hide();\n                this._showLoadError('commits', xhr);\n            },\n        });\n    },\n\n    /**\n     * Clear any displayed error message.\n     */\n    _clearLoadError() {\n        if (this._$error) {\n            this._$error.remove();\n            this._$error = null;\n        }\n    },\n\n    /**\n     * Show an error message indicating a load failure.\n     *\n     * The message from the server will be displayed along with some\n     * helpful text and a link for trying the request again.\n     *\n     * Args:\n     *     reloadID (string):\n     *         An ID to use for the reload link element.\n     *\n     *     xhr (jqXHR):\n     *         The HTTP Request object.\n     */\n    _showLoadError(reloadID, xhr) {\n        this._clearLoadError();\n\n        this._$error = $(this.loadErrorTemplate({\n                errorLoadingText: gettext('There was an error loading information from this repository:'),\n                temporaryFailureText: gettext('This may be a temporary failure.'),\n                tryAgainText: gettext('Try again'),\n                errorLines: xhr.errorText.split('\\n'),\n                reloadID: reloadID,\n            }))\n            .appendTo(this.$el);\n    },\n\n    /**\n     * Callback for when the user chooses a different branch.\n     *\n     * Fetches a new list of commits starting from the tip of the selected\n     * branch.\n     *\n     * Args:\n     *     model (RB.PostCommitModel):\n     *         The data model.\n     *\n     *     branch (RB.RepositoryBranch):\n     *         The selected branch.\n     */\n    _onBranchChanged(model, branch) {\n        if (this._commitsView) {\n            this.stopListening(this._commitsCollection);\n            this._commitsView.remove();\n        }\n\n        this._commitsCollection =\n            this.model.get('repository').getCommits({\n                branch: branch.id,\n                start: branch.get('commit'),\n            });\n        this.listenTo(this._commitsCollection, 'create',\n                      this._onCreateReviewRequest);\n\n        this._commitsView = new RB.CommitsView({\n            collection: this._commitsCollection,\n            $scrollContainer: this._$scrollContainer,\n        });\n        this.listenTo(this._commitsView, 'loadError', xhr => {\n            this._showLoadError('commits', xhr);\n        });\n\n        if (this._rendered) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        this._loadCommits();\n    },\n\n    /**\n     * Callback for when a commit is selected.\n     *\n     * Creates a new review request with the given commit ID and redirects the\n     * browser to it.\n     *\n     * Args:\n     *     commit (RB.RepositoryCommit):\n     *         The selected commit.\n     */\n    _onCreateReviewRequest(commit) {\n        if (this._createPending) {\n            // Do nothing\n            return;\n        }\n\n        this._createPending = true;\n        this._commitsView.setPending(commit);\n\n        const repository = this.model.get('repository');\n        const reviewRequest = new RB.ReviewRequest({\n            repository: repository.id,\n            localSitePrefix: repository.get('localSitePrefix')\n        });\n\n        reviewRequest.createFromCommit({\n            commitID: commit.id,\n            success: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n            error: (model, xhr) => {\n                this._commitsView.setPending(null);\n                this._createPending = false;\n                alert(xhr.errorText);\n            },\n        });\n    },\n});\n"]}