{"version":3,"sources":["repositoryCommitModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,gBAAH,GAAsB,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;EACzC,QAAQ,GAAG;IACP,OAAO,CAAC,CAAC,QAAF,CAAW;MACd,UAAU,EAAE,IADE;MAEd,UAAU,EAAE,IAFE;MAGd,IAAI,EAAE,IAHQ;MAId,MAAM,EAAE,IAJM;MAKd,OAAO,EAAE,IALK;MAMd,OAAO,EAAE,IANK;MAOd,gBAAgB,EAAE;IAPJ,CAAX,EAQJ,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EARI,CAAP;EASH,CAXwC;;EAazC,YAAY,EAAE,SAb2B;EAezC,iBAAiB,EAAE,CACf,YADe,EAEf,MAFe,EAGf,IAHe,EAIf,QAJe,EAKf,SALe,EAMf,SANe,EAOf,kBAPe,CAfsB;EAyBzC,eAAe,EAAE,CACb,YADa,EAEb,MAFa,EAGb,IAHa,EAIb,QAJa,EAKb,SALa,EAMb,kBANa,CAzBwB;EAkCzC,aAAa,EAAE;IACX,UAAU,EAAE,aADD;IAEX,gBAAgB,EAAE,oBAFP;IAGX,OAAO,EAAE;EAHE,CAlC0B;EAwCzC,aAAa,EAAE;IACX,IAAI,EAAE,IAAI,IAAI,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAT,CAAH,GAAoB,EAD3B;IAEX,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,CAApB,EAAuB,CAAvB;EAFT,CAxC0B;EA6CzC,WAAW,EAAE;IACT,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,QAAL;EADL,CA7C4B;;EAiDzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,iBAAiB,CAAC,GAAD,EAAM;IACnB,MAAM,IAAI,GAAG,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,iBAA1B,CAA4C,IAA5C,CACT,IADS,EACH,GADG,CAAb;IAGA,IAAI,CAAC,UAAL,GAAkB,GAAG,CAAC,IAAJ,IAAY,GAAG,CAAC,OAAhB,IAA2B,GAAG,CAAC,WAAjD;IAEA,OAAO,IAAP;EACH;;AAnEwC,CAAvB,CAAtB","file":"repositoryCommitModel.js","sourcesContent":["/**\n * A commit in a repository.\n *\n * Model Attributes:\n *     accessible (boolean):\n *         Whether this commit appears accessible. On some version control\n *         systems, not all commits may be accessible due to ACLs or other\n *         policy mechanisms. In these cases, we shouldn't let people try to\n *         make a review request for them, because it will fail.\n *\n *     authorName (string):\n *         The name of the author of the commit.\n *\n *     date (Date):\n *         The date of the commit.\n *\n *     parent (string):\n *         The ID of the commit's parent.\n *\n *     message (string):\n *         The commit message or comment.\n *\n *     summary (string):\n *         The first line of the commit message.\n *\n *     reviewRequestURL (string):\n *         The URL of an existing review request for this commit, if one\n *         exists.\n */\nRB.RepositoryCommit = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            accessible: true,\n            authorName: null,\n            date: null,\n            parent: null,\n            message: null,\n            summary: null,\n            reviewRequestURL: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'commits',\n\n    deserializedAttrs: [\n        'authorName',\n        'date',\n        'id',\n        'parent',\n        'message',\n        'summary',\n        'reviewRequestURL'\n    ],\n\n    serializedAttrs: [\n        'authorName',\n        'date',\n        'id',\n        'parent',\n        'message',\n        'reviewRequestURL'\n    ],\n\n    attrToJsonMap: {\n        authorName: 'author_name',\n        reviewRequestURL: 'review_request_url',\n        summary: 'message'\n    },\n\n    deserializers: {\n        date: date => date ? new Date(date) : '',\n        summary: message => message.split('\\n', 1)[0]\n    },\n\n    serializers: {\n        date: date => date.toString()\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *          The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.accessible = rsp.date || rsp.message || rsp.author_name;\n\n        return data;\n    }\n});\n"]}