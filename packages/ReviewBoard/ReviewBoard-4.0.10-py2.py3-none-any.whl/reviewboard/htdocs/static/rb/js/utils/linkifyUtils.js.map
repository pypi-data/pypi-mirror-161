{"version":3,"sources":["linkifyUtils.es6.js"],"names":[],"mappings":"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","file":"linkifyUtils.js","sourcesContent":["RB.LinkifyUtils = {\n    URL_RE: new RegExp(\n        '\\\\b((' + [\n            'https://',\n            'http://',\n            'ftp://',\n            'ftps://',\n            'gopher://',\n            'mailto:',\n            'news:',\n            'sms:'\n        ].join('|') +\n        ')[\\\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*([\\\\-A-Za-z0-9+@#\\/%=~_();|]|))',\n        'g'\n    ),\n\n    /**\n     * Linkify all URLs within some text.\n     *\n     * This will turn things that look like URLs into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all URLs replaced by <a> tags.\n     */\n    linkifyURLs(text) {\n        return text.replace(\n            RB.LinkifyUtils.URL_RE,\n            function(url) {\n                /*\n                 * We might catch an entity at the end of the URL. This is hard\n                 * to avoid, since we can't rely on advanced RegExp techniques\n                 * in all browsers. So, we'll now search for it and prevent it\n                 * from being part of the URL if it exists. However, a URL with\n                 * an open bracket will not have its close bracket removed. This\n                 * was a modification to the original bug fix.\n                 *\n                 * See bug 1069.\n                 */\n                const parts = url.match(/^(.*)(&[a-z]+;|\\))$/);\n                const openParen = url.match(/.*\\(.*/);\n\n                let extra = '';\n\n                if (parts !== null && openParen === null) {\n                    /* We caught an entity. Set it free. */\n                    url = parts[1];\n                    extra = parts[2];\n                }\n\n                return `<a target=\"_blank\" href=\"${url}\">${url}</a>${extra}`;\n            });\n    },\n\n    /**\n     * Linkify /r/# review request numbers.\n     *\n     * This will turn things that look like references to other review requests\n     * into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all \"/r/#\" text replaced by <a> tags.\n     */\n    linkifyReviewRequests(text) {\n        return text.replace(\n            /(^|\\s|&lt;|\\(|\\[|{)\\/(r\\/\\d+(\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|]*)?)/g,\n            function(text, m1, m2) {\n                const parts = m2.match(/^(.*)(&[a-z]+;|\\))$/);\n\n                let extra = '';\n                let url = m2;\n\n                if (parts !== null) {\n                    /* We caught an entity. Set it free. */\n                    url = parts[1];\n                    extra = parts[2];\n                }\n\n                const href = SITE_ROOT + url + (url.substr(-1) === '/' ? '' : '/');\n\n                return `${m1}<a target=\"_blank\" href=\"${href}\" class=\"review-request-link\">/${url}</a>${extra}`;\n            });\n    },\n\n    /**\n     * Linkify bug numbers.\n     *\n     * This will turn things that look like references to bugs (such as\n     * \"bug 408\") into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all bug references replaced by <a> tags.\n     */\n    linkifyBugs(text, bugTrackerURL) {\n        if (bugTrackerURL) {\n            return text.replace(\n                /\\b(bug|issue) (#([^.,)\\]\\s]+)|#?(\\d+))/gi,\n                function(text, m2, m3, bugnum1, bugnum2) {\n                    /*\n                     * The bug number can appear in either of those groups,\n                     * depending on how this was typed, so try both.\n                     */\n                    const bugnum = bugnum1 || bugnum2;\n                    const href = bugTrackerURL.replace(\"--bug_id--\", bugnum);\n\n                    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n                });\n        } else {\n            return text;\n        }\n    },\n\n    /**\n     * Linkify text using all available methods.\n     *\n     * Linkifies a block of text, turning URLs, /r/#/ paths, and bug numbers\n     * into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     *\n     *     isHTMLEncoded (boolean):\n     *         Whether or not the given text has already had dangerous\n     *         characters (like < or >) replaced by their HTML entities. If\n     *         this is false, the text will first be encoded.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all linkifyable items replaced by <a> tags.\n     */\n    linkifyText(text, bugTrackerURL, isHTMLEncoded) {\n        if (!isHTMLEncoded) {\n            text = text.htmlEncode();\n        }\n\n        text = RB.LinkifyUtils.linkifyURLs(text);\n        text = RB.LinkifyUtils.linkifyReviewRequests(text);\n        text = RB.LinkifyUtils.linkifyBugs(text, bugTrackerURL);\n        return text;\n    },\n\n    /**\n     * Linkify text within a pre-established DOM tree.\n     *\n     * This iterates through a tree of nodes, linkifying any text nodes that\n     * reference bug URLs, review requests, or contain unlinked plain-text\n     * URLs.\n     *\n     * This will avoid linking anything within a <pre> tag, to avoid messing\n     * with code blocks, and <a> tags, to avoid linkifying existing links.\n     *\n     * Args:\n     *     el (Element):\n     *         The element to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     */\n    linkifyChildren(el, bugTrackerURL) {\n        for (let i = 0; i < el.childNodes.length; i++) {\n            const node = el.childNodes[i];\n\n            if (node.nodeType === node.TEXT_NODE) {\n                if (node.textContent) {\n                    const newText = RB.LinkifyUtils.linkifyText(\n                        node.textContent, bugTrackerURL);\n\n                    if (newText !== node.textContent) {\n                        $(node).replaceWith(newText);\n                    }\n                }\n            } else if (node.nodeType === node.ELEMENT_NODE) {\n                if (node.nodeName !== 'PRE' && node.nodeName !== 'A') {\n                    RB.LinkifyUtils.linkifyChildren(node, bugTrackerURL);\n                }\n            }\n        }\n    }\n};\n"]}