{"version":3,"sources":["reviewablePageView.es6.js"],"names":[],"mappings":"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","file":"reviewablePageView.js","sourcesContent":["(function() {\n\n\n/**\n * An update bubble showing an update to the review request or a review.\n */\nconst UpdatesBubbleView = Backbone.View.extend({\n    id: 'updates-bubble',\n\n    template: _.template([\n        '<span id=\"updates-bubble-summary\"><%- summary %></span>',\n        ' by ',\n        '<a href=\"<%- user.url %>\" id=\"updates-bubble-user\">',\n        '<%- user.fullname || user.username %>',\n        '</a>',\n        '<span id=\"updates-bubble-buttons\">',\n        ' <a href=\"#\" class=\"update-page\"><%- updatePageText %></a>',\n        ' | ',\n        ' <a href=\"#\" class=\"ignore\"><%- ignoreText %></a>',\n    ].join('')),\n\n    events: {\n        'click .update-page': '_onUpdatePageClicked',\n        'click .ignore': '_onIgnoreClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     updateInfo (object):\n     *         Information about the update, fetched from the server.\n     */\n    initialize(options) {\n        this.options = options;\n    },\n\n    /**\n     * Render the bubble with the information provided during construction.\n     *\n     * The bubble starts hidden. The caller must call open() to display it.\n     *\n     * Returns:\n     *     UpdatesBubbleView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .html(this.template(_.defaults({\n                updatePageText: gettext('Update Page'),\n                ignoreText: gettext('Ignore'),\n            }, this.options.updateInfo)))\n            .hide();\n\n        return this;\n    },\n\n    /**\n     * Open the bubble on the screen.\n     */\n    open() {\n        this.$el\n            .css('position', 'fixed')\n            .fadeIn();\n    },\n\n    /**\n     * Close the update bubble.\n     *\n     * After closing, the bubble will be removed from the DOM.\n     */\n    close() {\n        this.trigger('closed');\n        this.$el.fadeOut(_.bind(this.remove, this));\n    },\n\n    /**\n     * Handle clicks on the \"Update Page\" link.\n     *\n     * Loads the review request page.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onUpdatePageClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('updatePage');\n    },\n\n    /*\n     * Handle clicks on the \"Ignore\" link.\n     *\n     * Ignores the update and closes the page.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onIgnoreClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.close();\n    },\n});\n\n\n/**\n * A page managing reviewable content for a review request.\n *\n * This provides common functionality for any page associated with a review\n * request, such as the diff viewer, review UI, or the review request page\n * itself.\n */\nRB.ReviewablePageView = RB.PageView.extend({\n    events: _.defaults({\n        'click #review-action': '_onEditReviewClicked',\n        'click #ship-it-action': '_onShipItClicked',\n        'click #general-comment-action': '_onAddCommentClicked',\n        'click .has-menu .has-menu': '_onMenuClicked',\n    }, RB.PageView.prototype.events),\n\n    /**\n     * Initialize the page.\n     *\n     * This will construct a ReviewRequest, CommentIssueManager,\n     * ReviewRequestEditor, and other required objects, based on data\n     * provided during construction.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     reviewRequestData (object):\n     *         The model attributes for a new RB.ReviewRequest instance.\n     *\n     *     editorData (object):\n     *         The model attributes for a new RB.ReviewRequestEditor instance.\n     *\n     *     lastActivityTimestamp (string):\n     *         The last known timestamp for activity on this review request.\n     *\n     *     checkUpdatesType (string, optional):\n     *         The type of updates to check for.\n     */\n    initialize(options) {\n        RB.PageView.prototype.initialize.apply(this, arguments);\n\n        this.options = options;\n\n        RB.DnDUploader.create();\n\n        this.reviewRequestEditorView = new RB.ReviewRequestEditorView({\n            el: $('#review-request'),\n            model: this.model.reviewRequestEditor,\n        });\n\n        this._updatesBubble = null;\n        this._favIconURL = null;\n        this._favIconNotifyURL = null;\n        this._logoNotificationsURL = null;\n\n        /*\n         * Some extensions, like Power Pack and rbstopwatch, expect a few legacy\n         * attributes on the view. Set these here so these extensions can access\n         * them. Note that extensions should ideally use the new form, if\n         * they're able to support Review Board 3.0+.\n         */\n        ['reviewRequest', 'pendingReview'].forEach(attrName => {\n            this[attrName] = this.model.get(attrName);\n\n            this.listenTo(this.model, `change:${attrName}`, () => {\n                this[attrName] = this.model.get(attrName);\n            });\n        });\n\n        /*\n         * Allow the browser to report notifications, if the user has this\n         * enabled.\n         */\n        RB.NotificationManager.instance.setup();\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this.$('.star').parent(),\n            });\n        }\n\n        this.listenTo(this.model, 'reviewRequestUpdated',\n                      this._onReviewRequestUpdated);\n    },\n\n    /**\n     * Render the page.\n     *\n     * Returns:\n     *     RB.ReviewablePageView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.PageView.prototype.render.call(this);\n\n        const $favicon = $('head').find('link[rel=\"shortcut icon\"]');\n\n        this._favIconURL = $favicon.attr('href');\n        this._favIconNotifyURL = STATIC_URLS['rb/images/favicon_notify.ico'];\n        this._logoNotificationsURL = STATIC_URLS['rb/images/logo.png'];\n\n        const pendingReview = this.model.get('pendingReview');\n\n        this.draftReviewBanner = RB.DraftReviewBannerView.create({\n            el: $('#review-banner'),\n            model: pendingReview,\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        this.listenTo(pendingReview, 'destroy published',\n                      () => this.draftReviewBanner.hideAndReload());\n\n        this.reviewRequestEditorView.render();\n\n        return this;\n    },\n\n    /**\n     * Remove this view from the page.\n     */\n    remove() {\n        this.draftReviewBanner.remove();\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Catch the review updated event and send the user a visual update.\n     *\n     * This function will handle the review updated event and decide whether\n     * to send a notification depending on browser and user settings.\n     *\n     * Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n    _onReviewRequestUpdated(info) {\n        this._updateFavIcon(this._favIconNotifyURL);\n\n        if (RB.NotificationManager.instance.shouldNotify()) {\n            this._showDesktopNotification(info);\n        }\n\n        this._showUpdatesBubble(info);\n    },\n\n    /**\n     * Create the updates bubble showing information about the last update.\n     *\n     * Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n    _showUpdatesBubble(info) {\n        if (this._updatesBubble) {\n            this._updatesBubble.remove();\n        }\n\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this._updatesBubble = new UpdatesBubbleView({\n            updateInfo: info,\n            reviewRequest: reviewRequest,\n        });\n\n        this.listenTo(this._updatesBubble, 'closed',\n                      () => this._updateFavIcon(this._favIconURL));\n\n        this.listenTo(this._updatesBubble, 'updatePage', () => {\n            window.location = reviewRequest.get('reviewURL');\n        });\n\n        this._updatesBubble.render().$el.appendTo(this.$el);\n        this._updatesBubble.open();\n    },\n\n    /**\n     * Show the user a desktop notification for the last update.\n     *\n     * This function will create a notification if the user has not\n     * disabled desktop notifications and the browser supports HTML5\n     * notifications.\n     *\n     *  Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n    _showDesktopNotification(info) {\n        const reviewRequest = this.model.get('reviewRequest');\n\n        RB.NotificationManager.instance.notify({\n            title: info.summary,\n            body: interpolate(gettext('Review request #%s, by %s'), [\n                reviewRequest.id,\n                info.user.fullname || info.user.username,\n            ]),\n            iconURL: this._logoNotificationsURL,\n            onClick: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n        });\n    },\n\n    /**\n     * Update the favicon for the page.\n     *\n     * This is used to change the favicon shown on the page based on whether\n     * there's a server-side update notification for the review request.\n     */\n    _updateFavIcon(url) {\n        $('head')\n            .find('link[rel=\"shortcut icon\"]')\n                .remove()\n            .end()\n            .append($('<link/>')\n                .attr({\n                    href: url,\n                    rel: 'shortcut icon',\n                    type: 'image/x-icon',\n                }));\n    },\n\n    /**\n     * Handle a click on the \"Edit Review\" button.\n     *\n     * Displays a review dialog.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onEditReviewClicked() {\n        RB.ReviewDialogView.create({\n            review: this.model.get('pendingReview'),\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handle a click on the \"Add Comment\" button.\n     *\n     * Displays a comment dialog.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onAddCommentClicked() {\n        const pendingReview = this.model.get('pendingReview');\n        const comment = pendingReview.createGeneralComment(\n            undefined,\n            RB.UserSession.instance.get('commentsOpenAnIssue'));\n\n        this.listenTo(comment, 'saved',\n                      () => RB.DraftReviewBannerView.instance.show());\n\n        RB.CommentDialogView.create({\n            comment: comment,\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handle a click on the \"Ship It\" button.\n     *\n     * Confirms that the user wants to post the review, and then posts it\n     * and reloads the page.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onShipItClicked() {\n        if (confirm(gettext('Are you sure you want to post this review?'))) {\n            this.model.markShipIt();\n        }\n\n        return false;\n    },\n\n    /**\n     * Generic handler for menu clicks.\n     *\n     * This simply prevents the click from bubbling up or invoking the\n     * default action. This function is used for dropdown menu titles\n     * so that their links do not send a request to the server when one\n     * of their dropdown actions are clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onMenuClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    },\n});\n\n\n})();\n"]}