{"version":3,"sources":["abstractReviewableView.es6.js"],"names":[],"mappings":"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","file":"abstractReviewableView.js","sourcesContent":["/**\n * Abstract base for review UIs.\n *\n * This provides all the basics for creating a review UI. It does the\n * work of loading in comments, creating views, and displaying comment dialogs,\n */\nRB.AbstractReviewableView = Backbone.View.extend({\n    /**\n     * The AbstractCommentBlockView subclass.\n     *\n     * This is the type that will be instantiated for rendering comment blocks.\n     */\n    commentBlockView: null,\n\n    /**\n     * The list type (as a string) for passing to CommentDlg.\n     */\n    commentsListName: null,\n\n    /**\n     * Initialize AbstractReviewableView.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the view.\n     */\n    initialize(options={}) {\n        console.assert(this.commentBlockView,\n                       'commentBlockView must be defined by the subclass');\n        console.assert(this.commentsListName,\n                       'commentsListName must be defined by the subclass');\n\n        this.commentDlg = null;\n        this._activeCommentBlock = null;\n        this.renderedInline = options.renderedInline || false;\n    },\n\n    /**\n     * Render the reviewable to the page.\n     *\n     * This will call the subclass's renderContent(), and then handle\n     * rendering each comment block on the reviewable.\n     *\n     * Returns:\n     *     RB.AbstractReviewableView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.renderContent();\n\n        this.model.commentBlocks.each(this._addCommentBlockView, this);\n        this.model.commentBlocks.on('add', this._addCommentBlockView, this);\n\n        return this;\n    },\n\n    /**\n     * Render the content of the reviewable.\n     *\n     * This should be overridden by subclasses.\n     */\n    renderContent() {\n    },\n\n    /**\n     * Create a new comment in a comment block and opens it for editing.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the comment block creation.\n     */\n    createAndEditCommentBlock(options) {\n        if (this.commentDlg !== null &&\n            this.commentDlg.model.get('dirty') &&\n            !confirm(gettext('You are currently editing another comment. Would you like to discard it and create a new one?'))) {\n            return;\n        }\n\n        let defaultCommentBlockFields =\n            _.result(this.model, 'defaultCommentBlockFields');\n\n        if (defaultCommentBlockFields.length === 0 &&\n            this.model.reviewableIDField) {\n            console.log('Deprecation notice: Reviewable subclass is missing ' +\n                        'defaultCommentBlockFields. Rename reviewableIDField ' +\n                        'to defaultCommentBlockFields, and make it a list.');\n            defaultCommentBlockFields = [this.model.reviewableIDField];\n        }\n\n        /* As soon as we add the comment block, show the dialog. */\n        this.once('commentBlockViewAdded',\n                  commentBlockView => this.showCommentDlg(commentBlockView));\n\n        _.extend(options,\n                 _.pick(this.model.attributes, defaultCommentBlockFields));\n        this.model.createCommentBlock(options);\n    },\n\n    /**\n     * Show the comment details dialog for a comment block.\n     *\n     * Args:\n     *     commentBlockView (RB.AbstractCommentBlockView):\n     *         The comment block to show the dialog for.\n     */\n    showCommentDlg(commentBlockView) {\n        const commentBlock = commentBlockView.model;\n\n        commentBlock.ensureDraftComment();\n\n        if (this._activeCommentBlock === commentBlock) {\n            return;\n        }\n\n        this.stopListening(this.commentDlg, 'closed');\n        this.commentDlg = RB.CommentDialogView.create({\n            comment: commentBlock.get('draftComment'),\n            publishedComments: commentBlock.get('serializedComments'),\n            publishedCommentsType: this.commentsListName,\n            position: dlg => commentBlockView.positionCommentDlg(dlg),\n        });\n        this._activeCommentBlock = commentBlock;\n\n        this.listenTo(this.commentDlg, 'closed', () => {\n            this.commentDlg = null;\n            this._activeCommentBlock = null;\n        });\n    },\n\n    /**\n     * Add a CommentBlockView for the given CommentBlock.\n     *\n     * This will create a view for the block, render it, listen for clicks\n     * in order to show the comment dialog, and then emit\n     * 'commentBlockViewAdded'.\n     *\n     * Args:\n     *     commentBlock (RB.AbstractCommentBlock):\n     *         The comment block to add a view for.\n     */\n    _addCommentBlockView(commentBlock) {\n        const commentBlockView = new this.commentBlockView({\n            model: commentBlock\n        });\n\n        commentBlockView.on('clicked', () => this.showCommentDlg(commentBlockView));\n        commentBlockView.render();\n        this.trigger('commentBlockViewAdded', commentBlockView);\n    },\n});\n"]}