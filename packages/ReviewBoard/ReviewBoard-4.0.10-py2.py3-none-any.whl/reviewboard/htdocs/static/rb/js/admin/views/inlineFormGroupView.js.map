{"version":3,"sources":["inlineFormGroupView.es6.js"],"names":[],"mappings":"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","file":"inlineFormGroupView.js","sourcesContent":["/**\n * A view for managing a group of inline forms for related model objects.\n *\n * This takes care of managing the form data and rendering of multiple inline\n * forms, allowing the addition of new inline forms (up to the configured\n * limit for the model), ensuring there's a minimum available, and tracking\n * what needs to be sent to the server when saving the model.\n *\n * There's an expectation that the last form provided in the group is going to\n * be a template used for any new forms that are added.\n */\nRB.Admin.InlineFormGroupView = Backbone.View.extend({\n    events: {\n        'click .rb-c-admin-form-inline-group__add-action': '_onAddClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._$addButton = null;\n        this._$inlineTemplate = null;\n        this._$inlines = null;\n        this._inlineViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormGroupView:\n     *     This object, for chaining.\n     */\n    render() {\n        const model = this.model;\n        const prefix = model.get('prefix');\n\n        const $inlines = this.$el.children(\n            '.rb-c-admin-form-inline-group__inlines');\n        console.assert($inlines.length === 1);\n\n        const $actions = this.$el.children(\n            '.rb-c-admin-form-inline-group__actions');\n        console.assert($actions.length === 1);\n\n        const $addButton = $actions.children(\n            '.rb-c-admin-form-inline-group__add-action');\n        console.assert($addButton.length === 1);\n\n        this._$inlines = $inlines;\n\n        /*\n         * Set up and store the template for later use. We'll remove it from\n         * the DOM so we don't end up binding anything to it.\n         */\n        this._$inlineTemplate = $inlines.children('.-is-template')\n            .detach()\n            .removeClass('-is-template');\n        console.assert(this._$inlineTemplate.length === 1);\n\n        /*\n         * Populate the state in the model.\n         *\n         * The form field names come from Django's own ManagementForm\n         * (django.forms.formsets), and are outside our control. They may need\n         * to be updated if Django reworks their naming or logic, though this\n         * is probably unlikely.\n         */\n        const $initialForms = $inlines.children(`#id_${prefix}-INITIAL_FORMS`);\n        const $maxNumForms = $inlines.children(`#id_${prefix}-MAX_NUM_FORMS`);\n        const $minNumForms = $inlines.children(`#id_${prefix}-MIN_NUM_FORMS`);\n        const $totalForms = $inlines.children(`#id_${prefix}-TOTAL_FORMS`);\n\n        console.assert($initialForms.length === 1);\n        console.assert($maxNumForms.length === 1);\n        console.assert($minNumForms.length === 1);\n        console.assert($totalForms.length === 1);\n\n        const maxInlines = $maxNumForms.val();\n\n        model.set({\n            initialInlines: parseInt($initialForms.val(), 10),\n            maxInlines: maxInlines === '' ? null : parseInt(maxInlines, 10),\n            minInlines: parseInt($minNumForms.val(), 10),\n        });\n\n        /*\n         * Update the total forms state and the visibility of the Add button\n         * whenever we change the number of inlines in the group. This will also\n         * update just below when we first populate the value on the model.\n         */\n        this.listenTo(model.inlines, 'update', () => {\n            $addButton.setVisible(model.canAddInline());\n            $totalForms.val(model.inlines.length);\n        });\n\n        this.listenTo(model.inlines, 'remove', this._onInlineRemoved);\n\n        /*\n         * Create and track views for every inline.\n         */\n        $inlines.children('.rb-c-admin-form-inline').each((index, el) => {\n            this._setupInlineForm(el, {\n                index: index,\n                isInitial: true,\n            });\n        });\n\n        console.assert(\n            parseInt($totalForms.val(), 10) === model.inlines.length);\n\n        return this;\n    },\n\n    /**\n     * Add a new inline form.\n     *\n     * This will add a new inline form and register it, scheduling it to be\n     * sent to the server when the main form is submitted.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new inline form view.\n     */\n    addInlineForm() {\n        const newIndex = this.model.inlines.length;\n\n        const $inline = this._$inlineTemplate.clone();\n        const view = this._setupInlineForm($inline[0]);\n        view.model.set('index', newIndex);\n\n        this._$inlines.append($inline);\n\n        this.trigger('inlineFormAdded', view);\n\n        return view;\n    },\n\n    /**\n     * Set up an inline form.\n     *\n     * This will construct a :js:class:`RB.Admin.InlineFormView` for the\n     * element, show it, and update any form state.\n     *\n     * Args:\n     *     el (Element):\n     *         The element representing the inline form.\n     *\n     *     attrs (object):\n     *         Attributes for the model.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new view for the element.\n     */\n    _setupInlineForm(el, attrs) {\n        const model = this.model;\n\n        const inline = new RB.Admin.InlineForm(_.extend({\n            prefix: model.get('prefix'),\n        }, attrs));\n\n        const inlineView = new RB.Admin.InlineFormView({\n            el: el,\n            model: inline,\n        });\n        inlineView.render();\n\n        this._inlineViews.push(inlineView);\n        model.inlines.add(inline);\n\n        return inlineView;\n    },\n\n    /**\n     * Handle the removal of an inline form.\n     *\n     * This will remove the inline form and its view from the page, and update\n     * the indexes of all other inline forms.\n     *\n     * Args:\n     *     inline (RB.Admin.InlineForm):\n     *         The inline form that was removed.\n     */\n    _onInlineRemoved(inline) {\n        const index = inline.get('index');\n        const inlineView = this._inlineViews[index];\n\n        this._inlineViews.splice(index, 1);\n        inlineView.remove();\n\n        /* Update the indexes of all remaining form views. */\n        this._inlineViews.forEach((view, i) => view.model.set('index', i));\n\n        this.trigger('inlineFormRemoved', inlineView);\n    },\n\n    /**\n     * Handle an click on Add <inline name>.\n     *\n     * This will add a new inline form view.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The click event.\n     */\n    _onAddClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.addInlineForm();\n    },\n});\n"]}