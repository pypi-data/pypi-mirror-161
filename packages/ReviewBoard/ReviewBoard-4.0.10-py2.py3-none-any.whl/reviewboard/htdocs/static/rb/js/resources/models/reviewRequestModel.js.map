{"version":3,"sources":["reviewRequestModel.es6.js"],"names":[],"mappings":"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","file":"reviewRequestModel.js","sourcesContent":["/**\n * A review request.\n *\n * ReviewRequest is the starting point for much of the resource API. Through\n * it, the caller can create drafts, diffs, file attachments, and screenshots.\n *\n * Fields on a ReviewRequest are set by accessing the ReviewRequest.draft\n * object. Through there, fields can be set like any other model and then\n * saved.\n *\n * A review request can be closed by using the close() function, reopened\n * through reopen(), or even permanently destroyed by calling destroy().\n */\nRB.ReviewRequest = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            approved: false,\n            approvalFailure: null,\n            branch: null,\n            bugTrackerURL: null,\n            bugsClosed: null,\n            commitID: null,\n            closeDescription: null,\n            closeDescriptionRichText: false,\n            dependsOn: [],\n            description: null,\n            descriptionRichText: false,\n            draftReview: null,\n            lastUpdated: null,\n            localSitePrefix: null,\n            'public': null,\n            repository: null,\n            reviewURL: null,\n            state: null,\n            summary: null,\n            targetGroups: [],\n            targetPeople: [],\n            testingDone: null,\n            testingDoneRichText: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review_request',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        approvalFailure: 'approval_failure',\n        bugsClosed: 'bugs_closed',\n        closeDescription: 'close_description',\n        closeDescriptionRichText: 'close_description_text_type',\n        dependsOn: 'depends_on',\n        descriptionRichText: 'description_text_type',\n        lastUpdated: 'last_updated',\n        reviewURL: 'url',\n        targetGroups: 'target_groups',\n        targetPeople: 'target_people',\n        testingDone: 'testing_done',\n        testingDoneRichText: 'testing_done_text_type'\n    },\n\n    deserializedAttrs: [\n        'approved',\n        'approvalFailure',\n        'branch',\n        'bugsClosed',\n        'closeDescription',\n        'dependsOn',\n        'description',\n        'lastUpdated',\n        'public',\n        'reviewURL',\n        'summary',\n        'targetGroups',\n        'targetPeople',\n        'testingDone'\n    ],\n\n    /**\n     * Initialize the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         Initial values for the model attributes.\n     *\n     *     options (object):\n     *         Additional options for the object construction.\n     *\n     * Option Args:\n     *     extraDraftAttrs (object):\n     *         Additional attributes to include when creating a review request\n     *         draft.\n     */\n    initialize(attrs, options={}) {\n        RB.BaseResource.prototype.initialize.call(this, attrs, options);\n\n        this.reviews = new Backbone.Collection([], {\n            model: RB.Review\n        });\n\n        this.draft = new RB.DraftReviewRequest(_.defaults({\n            parentObject: this,\n            branch: this.get('branch'),\n            bugsClosed: this.get('bugsClosed'),\n            dependsOn: this.get('dependsOn'),\n            description: this.get('description'),\n            descriptionRichText: this.get('descriptionRichText'),\n            summary: this.get('summary'),\n            targetGroups: this.get('targetGroups'),\n            targetPeople: this.get('targetPeople'),\n            testingDone: this.get('testingDone'),\n            testingDoneRichText: this.get('testingDoneRichText')\n        }, options.extraDraftAttrs));\n    },\n\n    /**\n     * Return the URL for syncing this model.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the API resource.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/review-requests/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    },\n\n    /**\n     * Create the review request from an existing commit.\n     *\n     * This can only be used for new ReviewRequest instances, and requires\n     * a commitID option.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Option Args:\n     *     commitID (string):\n     *         The ID of the commit to create the review request from.\n     */\n    createFromCommit(options, context) {\n        console.assert(options.commitID);\n        console.assert(this.isNew());\n\n        this.set('commitID', options.commitID);\n        this.save(\n            _.extend({\n                createFromCommit: true\n            }, options),\n            context);\n    },\n\n    /**\n     * Create a Diff object for this review request.\n     *\n     * Returns:\n     *     RB.Diff:\n     *     The new diff model.\n     */\n    createDiff() {\n        return new RB.Diff({\n            parentObject: this\n        });\n    },\n\n    /**\n     * Create a Review object for this review request.\n     *\n     * If an ID is specified, the Review object will reference that ID.\n     * Otherwise, it is considered a draft review, and will either return\n     * the existing one (if the draftReview attribute is set), or create\n     * a new one (and set the attribute).\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review, for existing reviews.\n     *\n     *     extraAttrs (object):\n     *         Additional attributes to set on new models.\n     *\n     * Returns:\n     *     RB.Review:\n     *     The new review object.\n     */\n    createReview(reviewID, extraAttrs={}) {\n        let review;\n\n        if (reviewID === undefined) {\n            review = this.get('draftReview');\n\n            if (review === null) {\n                review = new RB.DraftReview({\n                    parentObject: this\n                });\n\n                this.set('draftReview', review);\n            }\n        } else {\n            review = this.reviews.get(reviewID);\n\n            if (!review) {\n                review = new RB.Review(_.defaults({\n                    parentObject: this,\n                    id: reviewID\n                }, extraAttrs));\n                this.reviews.add(review);\n            }\n\n        }\n\n        return review;\n    },\n\n    /**\n     * Create a Screenshot object for this review request.\n     *\n     * Args:\n     *     screenshotID (number):\n     *         The ID of the screenshot, for existing screenshots.\n     *\n     * Returns:\n     *     RB.Screenshot:\n     *     The new screenshot object.\n     */\n    createScreenshot(screenshotID) {\n        return new RB.Screenshot({\n            parentObject: this,\n            id: screenshotID\n        });\n    },\n\n    /**\n     * Create a FileAttachment object for this review request.\n     *\n     * Args:\n     *     attributes (object):\n     *         Additional attributes to include on the new model.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment object.\n     */\n    createFileAttachment(attributes) {\n        return new RB.FileAttachment(_.defaults({\n            parentObject: this\n        }, attributes));\n    },\n\n    /**\n     * Mark a review request as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether the review request is starred.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    setStarred(starred, options, context) {\n        const watched = RB.UserSession.instance.watchedReviewRequests;\n\n        if (starred) {\n            watched.addImmediately(this, options, context);\n        } else {\n            watched.removeImmediately(this, options, context);\n        }\n    },\n\n    /**\n     * Close the review request.\n     *\n     * A 'type' option must be provided, which must match one of the\n     * close types (ReviewRequest.CLOSE_DISCARDED or\n     * ReviewRequest.CLOSE_SUBMITTED).\n     *\n     * An optional description can be set by passing a 'description' option.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    close(options, context) {\n        const data = {};\n\n        console.assert(options);\n\n        if (options.type === RB.ReviewRequest.CLOSE_DISCARDED) {\n            data.status = 'discarded';\n        } else if (options.type === RB.ReviewRequest.CLOSE_SUBMITTED) {\n            data.status = 'submitted';\n        } else {\n            if (_.isFunction(options.error)) {\n                options.error.call(context, {\n                    errorText: 'Invalid close type'\n                });\n            }\n\n            return;\n        }\n\n        if (options.description !== undefined) {\n            data.close_description = options.description;\n        }\n\n        if (options.richText !== undefined) {\n            data.close_description_text_type =\n                (options.richText ? 'markdown' : 'plain');\n        }\n\n        if (options.postData !== undefined) {\n            _.extend(data, options.postData);\n        }\n\n        const changingState = (options.type !== this.get('state'));\n\n        const saveOptions = _.defaults({\n            data: data,\n            success: () => {\n                if (changingState) {\n                    this.trigger('closed');\n                }\n\n                this.markUpdated(this.get('lastUpdated'));\n\n                if (_.isFunction(options.success)) {\n                    options.success.call(context);\n                }\n            }\n        }, options);\n\n        delete saveOptions.type;\n        delete saveOptions.description;\n\n        this.save(saveOptions, context);\n    },\n\n    /**\n     * Reopen the review request.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    reopen(options={}, context=undefined) {\n        this.save(\n            _.defaults({\n                data: {\n                    status: 'pending'\n                },\n                success: () => {\n                    this.trigger('reopened');\n                    this.markUpdated(this.get('lastUpdated'));\n\n                    if (_.isFunction(options.success)) {\n                        options.success.call(context);\n                    }\n                }\n            }, options),\n            context);\n    },\n\n    /**\n     * Marks the review request as having been updated at the given timestamp.\n     *\n     * This should be used when an action will trigger an update to the\n     * review request's Last Updated timestamp, but where we don't want\n     * a notification later on. The local copy of the timestamp can be\n     * bumped to mark it as up-to-date.\n     *\n     * Args:\n     *     timestamp (string):\n     *         The timestamp to store.\n     */\n    markUpdated(timestamp) {\n        this._lastUpdateTimestamp = timestamp;\n    },\n\n    /**\n     * Begin checking for server-side updates to the review request.\n     *\n     * The 'updated' event will be triggered when there's a new update.\n     *\n     * Args:\n     *     type (string):\n     *         The type of updates to check for.\n     *\n     *     lastUpdateTimestamp (string):\n     *         The timestamp of the last known update.\n     */\n    beginCheckForUpdates(type, lastUpdateTimestamp) {\n        this._checkUpdatesType = type;\n        this._lastUpdateTimestamp = lastUpdateTimestamp;\n\n        this.ready({\n            ready: () => setTimeout(this._checkForUpdates.bind(this),\n                                    RB.ReviewRequest.CHECK_UPDATES_MSECS)\n        });\n    },\n\n    /**\n     * Check for updates.\n     *\n     * This is called periodically after an initial call to\n     * beginCheckForUpdates. It will see if there's a new update yet on the\n     * server, and if there is, trigger the 'updated' event.\n     */\n    _checkForUpdates() {\n        RB.apiCall({\n            type: 'GET',\n            prefix: this.get('sitePrefix'),\n            noActivityIndicator: true,\n            url: this.get('links').last_update.href,\n            success: rsp => {\n                const lastUpdate = rsp.last_update;\n\n                if ((!this._checkUpdatesType ||\n                     this._checkUpdatesType === lastUpdate.type) &&\n                    this._lastUpdateTimestamp !== lastUpdate.timestamp) {\n                    this.trigger('updated', lastUpdate);\n                }\n\n                this._lastUpdateTimestamp = lastUpdate.timestamp;\n\n                setTimeout(this._checkForUpdates.bind(this),\n                           RB.ReviewRequest.CHECK_UPDATES_MSECS);\n            }\n        });\n    },\n\n    /**\n     * Serialize for sending to the server.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Option Args:\n     *     createFromCommit (boolean):\n     *         Whether this save is going to create a new review request from\n     *         an existing committed change.\n     *\n     * Returns:\n     *     object:\n     *     Data suitable for passing to JSON.stringify.\n     */\n    toJSON(options={}) {\n        if (this.isNew()) {\n            const commitID = this.get('commitID');\n            const repository = this.get('repository');\n            const result = {};\n\n            if (commitID) {\n                result.commit_id = commitID;\n\n                if (options.createFromCommit) {\n                    result.create_from_commit_id = true;\n                }\n            }\n\n            if (repository) {\n                result.repository = repository;\n            }\n\n            return result;\n        } else {\n            return _super(this).toJSON.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const state = {\n            pending: RB.ReviewRequest.PENDING,\n            discarded: RB.ReviewRequest.CLOSE_DISCARDED,\n            submitted: RB.ReviewRequest.CLOSE_SUBMITTED\n        }[rsp.status];\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.state = state;\n        data.closeDescriptionRichText =\n            (rawTextFields.close_description_text_type === 'markdown');\n        data.descriptionRichText =\n            (rawTextFields.description_text_type === 'markdown');\n        data.testingDoneRichText =\n            (rawTextFields.testing_done_text_type === 'markdown');\n\n        return data;\n    }\n}, {\n    CHECK_UPDATES_MSECS: 5 * 60 * 1000, // Every 5 minutes\n\n    CLOSE_DISCARDED: 1,\n    CLOSE_SUBMITTED: 2,\n    PENDING: 3,\n\n    VISIBILITY_VISIBLE: 1,\n    VISIBILITY_ARCHIVED: 2,\n    VISIBILITY_MUTED: 3\n});\n"]}