{"version":3,"sources":["diffFragmentViewTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,2BAAD,EAA8B,YAAW;EAC1C,MAAM,gBAAgB,GAAG,CAAC,CAAC,QAAF,woBAAzB;;EAmCA,IAAI,IAAJ;EACA,IAAI,QAAJ;EAEA,UAAU,CAAC,YAAW;IAClB,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,UAAlB,CAAX;IAEA,IAAI,GAAG,IAAI,EAAE,CAAC,gBAAP,CAAwB;MAC3B,QAAQ,EAAE,QADiB;MAE3B,WAAW,EAAE;IAFc,CAAxB,CAAP;IAIA,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,gBAAgB,EAA9B;IACA,aAAa,CAAC,MAAd,CAAqB,IAAI,CAAC,GAA1B;IAEA;;IACA,KAAK,CAAC,CAAD,EAAI,OAAJ,CAAL,CAAkB,GAAlB,CAAsB,QAAtB,CAA+B,EAAE,IAAI,EAAE,EAAvC;IACA,KAAK,CAAC,CAAD,EAAI,OAAJ,CAAL,CAAkB,GAAlB,CAAsB,QAAtB,CAA+B,EAAE,IAAI,EAAE,EAAvC;EACH,CAbS,CAAV;EAeA,QAAQ,CAAC,QAAD,EAAW,YAAW;IAC1B,EAAE,CAAC,uCAAD,EAA0C,YAAW;MACnD,IAAI,CAAC,MAAL;MAEA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,IAApD;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,KAA/C;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,IAAhD;MAEA;AACZ;AACA;AACA;AACA;;MACY,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,GAAtC,CAA0C,IAA1C,CAA+C,MAA/C;;MAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;QACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,GAArC,CAAyC,IAAzC,CAA8C,MAA9C;MACH,CAFD;IAGH,CAjBC,CAAF;IAmBA,EAAE,CAAC,sCAAD,EAAyC,YAAW;MAClD,IAAI,CAAC,GAAL,CAAS,IAAT;MACA,IAAI,CAAC,MAAL;MAEA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,IAApD;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;MAEA;AACZ;AACA;AACA;AACA;;MACY,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;MAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;QACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;MACH,CAFD;IAGH,CAlBC,CAAF;IAoBA,EAAE,CAAC,4BAAD,EAA+B,YAAW;MACxC,IAAI,CAAC,YAAL,GAAoB,KAApB;MACA,IAAI,CAAC,MAAL;MAEA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,KAApD;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;MACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;MAEA;AACZ;AACA;AACA;AACA;;MACY,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;MAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;QACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;MACH,CAFD;IAGH,CAlBC,CAAF;EAmBH,CA3DO,CAAR;EA6DA,QAAQ,CAAC,QAAD,EAAW,YAAW;IAC1B,EAAE,CAAC,wBAAD,EAA2B,YAAW;MACpC,IAAI,CAAC,MAAL;MACA,IAAI,CAAC,CAAL,CAAO,kBAAP,EAA2B,EAA3B,CAA8B,CAA9B,EAAiC,KAAjC;MAEA,MAAM,CAAC,QAAD,CAAN,CAAiB,gBAAjB;MACA,MAAM,CAAC,QAAQ,CAAC,KAAT,CAAe,UAAf,GAA4B,IAA5B,CAAiC,CAAjC,EAAoC,cAArC,CAAN,CACK,IADL,CACU,MADV;IAEH,CAPC,CAAF;IASA,EAAE,CAAC,uBAAD,EAA0B,YAAW;MACnC,IAAI,CAAC,MAAL;MACA,IAAI,CAAC,CAAL,CAAO,oBAAP,EAA6B,EAA7B,CAAgC,CAAhC,EAAmC,KAAnC;MAEA,MAAM,CAAC,QAAD,CAAN,CAAiB,gBAAjB;MACA,MAAM,CAAC,QAAQ,CAAC,KAAT,CAAe,UAAf,GAA4B,IAA5B,CAAiC,CAAjC,EAAoC,cAArC,CAAN,CACK,IADL,CACU,KADV;IAEH,CAPC,CAAF;IASA,QAAQ,CAAC,YAAD,EAAe,YAAW;MAC9B,EAAE,CAAC,2BAAD,EAA8B,YAAW;QACvC,IAAI,CAAC,MAAL;QAEA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,GAAG,IAAI;UACtC,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;UAEA,OAAO,IAAP;QACH,CAJD;QAKA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;QAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;UACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;QACH,CAFD;MAGH,CAjBC,CAAF;MAmBA,EAAE,CAAC,4BAAD,EAA+B,YAAW;QACxC,IAAI,CAAC,YAAL,GAAoB,KAApB;QACA,IAAI,CAAC,MAAL;QAEA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,GAAG,IAAI;UACtC,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;UAEA,OAAO,IAAP;QACH,CAJD;QAKA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;QAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;UACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;QACH,CAFD;MAGH,CAlBC,CAAF;IAmBH,CAvCO,CAAR;IAyCA,QAAQ,CAAC,YAAD,EAAe,YAAW;MAC9B,EAAE,CAAC,2BAAD,EAA8B,YAAW;QACvC,IAAI,UAAU,GAAG,IAAjB;QAEA,IAAI,CAAC,MAAL;QAEA;;QACA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,GAAG,IAAI;UACtC,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;UAEA,OAAO,UAAP;QACH,CAJD;QAKA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA;;QACA,UAAU,GAAG,KAAb;QACA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,IAAhD;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,KAA/C;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,GAAtC,CAA0C,IAA1C,CAA+C,MAA/C;;QAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;UACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,GAArC,CAAyC,IAAzC,CAA8C,MAA9C;QACH,CAFD;MAGH,CAxBC,CAAF;MA0BA,EAAE,CAAC,4BAAD,EAA+B,YAAW;QACxC,IAAI,UAAU,GAAG,IAAjB;QAEA,IAAI,CAAC,YAAL,GAAoB,KAApB;QACA,IAAI,CAAC,MAAL;QAEA;;QACA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,GAAG,IAAI;UACtC,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;UAEA,OAAO,UAAP;QACH,CAJD;QAKA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA;;QACA,UAAU,GAAG,KAAb;QACA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;QAEA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;QACA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;QAEA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,QAAQ,IAAI;UACnC,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;QACH,CAFD;MAGH,CAzBC,CAAF;IA0BH,CArDO,CAAR;EAsDH,CAlHO,CAAR;AAmHH,CAtOI,CAAL","file":"diffFragmentViewTests.js","sourcesContent":["suite('rb/views/DiffFragmentView', function() {\n    const fragmentTemplate = _.template(dedent`\n        <table>\n         <thead>\n         </thead>\n         <tbody class=\"diff-header diff-header-above\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"20,0\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"insert\"></tbody>\n         <tbody class=\"insert\">\n          <tr>\n           <td>\n            <div class=\"diff-collapse-btn\" data-lines-of-context=\"0,0\"></div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"diff-header diff-header-below\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"0,20\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n        </table>\n    `);\n\n    let view;\n    let loadDiff;\n\n    beforeEach(function() {\n        loadDiff = jasmine.createSpy('loadDiff');\n\n        view = new RB.DiffFragmentView({\n            loadDiff: loadDiff,\n            collapsible: true,\n        });\n        view.$el.html(fragmentTemplate());\n        $testsScratch.append(view.$el);\n\n        /* Make all the deferred/delayed functions run immediately. */\n        spyOn(_, 'defer').and.callFake(cb => cb());\n        spyOn(_, 'delay').and.callFake(cb => cb());\n    });\n\n    describe('render', function() {\n        it('With visible and collapsible === true', function() {\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(false);\n            expect(view._$table.hasClass('collapsed')).toBe(true);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).not.toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).not.toBe('none');\n            });\n        });\n\n        it('With hidden and collapsible === true', function() {\n            view.$el.hide();\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n\n        it('With collapsible === false', function() {\n            view._collapsible = false;\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(false);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n    });\n\n    describe('Events', function() {\n        it('click expansion button', function() {\n            view.render();\n            view.$('.diff-expand-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('20,0');\n        });\n\n        it('click collapse button', function() {\n            view.render();\n            view.$('.diff-collapse-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('0,0');\n        });\n\n        describe('mouseenter', function() {\n            it('With collapsible === true', function() {\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                view._collapsible = false;\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n\n        describe('mouseleave', function() {\n            it('With collapsible === true', function() {\n                let isHovering = true;\n\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(true);\n                expect(view._$table.hasClass('expanded')).toBe(false);\n                expect(view._$thead.css('transform')).not.toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).not.toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                let isHovering = true;\n\n                view._collapsible = false;\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n    });\n});\n"]}