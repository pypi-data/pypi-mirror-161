{"version":3,"sources":["inlineFormGroupModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,KAAH,CAAS,eAAT,GAA2B,QAAQ,CAAC,KAAT,CAAe,MAAf,CAAsB;EAC7C,QAAQ,EAAE;IACN,cAAc,EAAE,CADV;IAEN,UAAU,EAAE,CAFN;IAGN,UAAU,EAAE,CAHN;IAIN,MAAM,EAAE;EAJF,CADmC;;EAQ7C;AACJ;AACA;EACI,UAAU,GAAG;IACT,KAAK,OAAL,GAAe,IAAI,QAAQ,CAAC,UAAb,CAAwB,EAAxB,EAA4B;MACvC,KAAK,EAAE,EAAE,CAAC,KAAH,CAAS;IADuB,CAA5B,CAAf;EAGH,CAf4C;;EAiB7C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,YAAY,GAAG;IACX,MAAM,UAAU,GAAG,KAAK,GAAL,CAAS,YAAT,CAAnB;IAEA,OAAO,UAAU,KAAK,IAAf,IAAuB,KAAK,OAAL,CAAa,MAAb,GAAsB,UAApD;EACH;;AAhC4C,CAAtB,CAA3B","file":"inlineFormGroupModel.js","sourcesContent":["/**\n * The model managing a group of inline form.\n *\n * This tracks a list of inline forms referenced used in the group, and\n * provides state to send back to the server when saving the group and\n * related utility functions.\n *\n * Attributes:\n *     inlines (Backbone.Collection of RB.Admin.InlineForm):\n *         The inline forms that are part of this group.\n *\n * Model Attributes:\n *     initialInlines (number):\n *         The number of inlines originally provided to the page.\n *\n *     maxInlines (number):\n *         The maximum number of inlines allowed on the page.\n *\n *     minInlines (number):\n *         The minimum number of inlines allowed on the page.\n *\n *     prefix (string):\n *         The prefix for any IDs and form field names in the group.\n */\nRB.Admin.InlineFormGroup = Backbone.Model.extend({\n    defaults: {\n        initialInlines: 0,\n        maxInlines: 0,\n        minInlines: 0,\n        prefix: null,\n    },\n\n    /**\n     * Initialize the group.\n     */\n    initialize() {\n        this.inlines = new Backbone.Collection([], {\n            model: RB.Admin.InlineForm,\n        });\n    },\n\n    /**\n     * Return whether a new inline can be added.\n     *\n     * A new inline can be added if there's no maximum, or the maximum has\n     * not yet been reached.\n     *\n     * Returns:\n     *     boolean:\n     *     ``True`` if a new inline can be added. ``False`` if the limit has\n     *     been reached.\n     */\n    canAddInline() {\n        const maxInlines = this.get('maxInlines');\n\n        return maxInlines === null || this.inlines.length < maxInlines;\n    },\n});\n"]}