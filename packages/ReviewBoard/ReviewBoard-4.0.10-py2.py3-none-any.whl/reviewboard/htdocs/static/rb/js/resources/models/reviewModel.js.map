{"version":3,"sources":["reviewModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,MAAH,GAAY,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;EAC/B,QAAQ,GAAG;IACP,OAAO,CAAC,CAAC,QAAF,CAAW;MACd,aAAa,EAAE,IADD;MAEd,MAAM,EAAE,KAFM;MAGd,UAAU,KAHI;MAId,OAAO,EAAE,IAJK;MAKd,eAAe,EAAE,KALH;MAMd,UAAU,EAAE,IANE;MAOd,kBAAkB,EAAE,KAPN;MAQd,UAAU,EAAE,IARE;MASd,cAAc,EAAE,EATF;MAUd,gBAAgB,EAAE,IAVJ;MAWd,kBAAkB,EAAE,EAXN;MAYd,aAAa,EAAE,EAZD;MAad,SAAS,EAAE;IAbG,CAAX,EAcJ,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EAdI,CAAP;EAeH,CAjB8B;;EAmB/B,YAAY,EAAE,QAnBiB;EAqB/B,aAAa,EAAE;IACX,UAAU,EAAE,aADD;IAEX,kBAAkB,EAAE,uBAFT;IAGX,OAAO,EAAE,UAHE;IAIX,eAAe,EAAE,oBAJN;IAKX,aAAa,EAAE,iBALJ;IAMX,gBAAgB,EAAE,oBANP;IAOX,MAAM,EAAE;EAPG,CArBgB;EA+B/B,eAAe,EAAE,CACb,eADa,EAEb,kBAFa,EAGb,QAHa,EAIb,SAJa,EAKb,iBALa,EAMb,YANa,EAOb,oBAPa,EAQb,QARa,CA/Bc;EA0C/B,iBAAiB,EAAE,CACf,QADe,EAEf,SAFe,EAGf,YAHe,EAIf,QAJe,EAKf,WALe,CA1CY;EAkD/B,WAAW,EAAE;IACT,aAAa,EAAE,EAAE,CAAC,eAAH,CAAmB,WADzB;IAET,gBAAgB,EAAE,EAAE,CAAC,eAAH,CAAmB,WAF5B;IAGT,eAAe,EAAE,EAAE,CAAC,eAAH,CAAmB,QAH3B;IAIT,kBAAkB,EAAE,EAAE,CAAC,eAAH,CAAmB,QAJ9B;IAKT,UAAU,KAAK,IAAI,KAAK,GAAG,CAAH,GAAO;EALtB,CAlDkB;EA0D/B,iBAAiB,EAAE,IA1DY;;EA4D/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,iBAAiB,CAAC,GAAD,EAAM;IACnB,MAAM,aAAa,GAAG,GAAG,CAAC,eAAJ,IAAuB,GAA7C;IACA,MAAM,IAAI,GAAG,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,iBAA1B,CAA4C,IAA5C,CACT,IADS,EACH,GADG,CAAb;IAGA,IAAI,CAAC,eAAL,GACK,aAAa,CAAC,kBAAd,KAAqC,UAD1C;IAEA,IAAI,CAAC,kBAAL,GACK,aAAa,CAAC,qBAAd,KAAwC,UAD7C;;IAGA,IAAI,GAAG,CAAC,eAAR,EAAyB;MACrB,IAAI,CAAC,aAAL,GAAqB;QACjB,UAAU,EAAE,GAAG,CAAC,eAAJ,CAAoB,WADf;QAEjB,OAAO,EAAE,GAAG,CAAC,eAAJ,CAAoB;MAFZ,CAArB;IAIH;;IAED,IAAI,GAAG,CAAC,oBAAR,EAA8B;MAC1B,IAAI,CAAC,kBAAL,GAA0B;QACtB,UAAU,EAAE,GAAG,CAAC,oBAAJ,CAAyB,WADf;QAEtB,OAAO,EAAE,GAAG,CAAC,oBAAJ,CAAyB;MAFZ,CAA1B;IAIH;;IAED,IAAI,GAAG,CAAC,gBAAR,EAA0B;MACtB,IAAI,CAAC,cAAL,GAAsB;QAClB,UAAU,EAAE,GAAG,CAAC,gBAAJ,CAAqB,WADf;QAElB,OAAO,EAAE,GAAG,CAAC,gBAAJ,CAAqB;MAFZ,CAAtB;IAIH;;IAED,OAAO,IAAP;EACH,CAvG8B;;EAyG/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,iBAAiB,GAAU;IACvB,IAAI,OAAJ;;IAEA,IAAI,UAAK,MAAL,KAAgB,CAApB,EAAuB;MACnB,OAAO,mDAAP;IACH,CAFD,MAEO;MACH,OAAO,CAAC,IAAR,CAAa,CACT,8CADS,EAET,4DAFS,EAGT,mDAHS,EAIX,IAJW,CAIN,EAJM,CAAb;MAMA,OAAO,GAAG;QACN,EAAE,kDADI;QAEN,UAAU,kDAFJ;QAGN,eAAe,kDAHT;QAIN,YAAY,kDAJN;QAKN,UAAU;MALJ,CAAV;IAOH;;IAED,IAAI,CAAC,CAAC,OAAO,CAAC,eAAV,IAA6B,CAAC,CAAC,OAAO,CAAC,cAA3C,EAA2D;MACvD,OAAO,CAAC,KAAR,CACI,wDACA,uDAFJ;MAGA;IACH;;IAED,OAAO,IAAI,EAAE,CAAC,WAAP,CAAmB,CAAC,CAAC,QAAF,CAAW;MAAC,YAAY,EAAE;IAAf,CAAX,EAAiC,OAAjC,CAAnB,CAAP;EACH,CA3K8B;;EA6K/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,uBAAuB,CAAC,EAAD,EAAK,YAAL,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAzB,EAAgC,MAAhC,EAAwC;IAC3D,OAAO,IAAI,EAAE,CAAC,iBAAP,CAAyB;MAC5B,YAAY,EAAE,IADc;MAE5B,EAAE,EAAE,EAFwB;MAG5B,YAAY,EAAE,YAHc;MAI5B,CAAC,EAAE,CAJyB;MAK5B,CAAC,EAAE,CALyB;MAM5B,KAAK,EAAE,KANqB;MAO5B,MAAM,EAAE;IAPoB,CAAzB,CAAP;EASH,CAnN8B;;EAqN/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,2BAA2B,CAAC,EAAD,EAAK,gBAAL,EACC,2BADD,EAC8B;IACrD,OAAO,IAAI,EAAE,CAAC,qBAAP,CAA6B;MAChC,YAAY,EAAE,IADkB;MAEhC,EAAE,EAAE,EAF4B;MAGhC,gBAAgB,EAAE,gBAHc;MAIhC,2BAA2B,EAAE;IAJG,CAA7B,CAAP;EAMH,CA/O8B;;EAiP/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,oBAAoB,CAAC,EAAD,EAAK,WAAL,EAAkB;IAClC,OAAO,IAAI,EAAE,CAAC,cAAP,CAAsB;MACzB,YAAY,EAAE,IADW;MAEzB,EAAE,EAAE,EAFqB;MAGzB,WAAW,EAAE;IAHY,CAAtB,CAAP;EAKH,CArQ8B;;EAuQ/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,WAAW,GAAG;IACV,IAAI,UAAU,GAAG,KAAK,GAAL,CAAS,YAAT,CAAjB;;IAEA,IAAI,UAAU,KAAK,IAAnB,EAAyB;MACrB,UAAU,GAAG,IAAI,EAAE,CAAC,WAAP,CAAmB;QAC5B,YAAY,EAAE;MADc,CAAnB,CAAb;MAGA,KAAK,GAAL,CAAS,YAAT,EAAuB,UAAvB;MAEA,UAAU,CAAC,IAAX,CAAgB,WAAhB,EAA6B,MAAM;QAC/B,MAAM,aAAa,GAAG,KAAK,GAAL,CAAS,cAAT,CAAtB;QACA,aAAa,CAAC,WAAd,CAA0B,UAAU,CAAC,GAAX,CAAe,WAAf,CAA1B;QACA,KAAK,GAAL,CAAS,YAAT,EAAuB,IAAvB;MACH,CAJD;IAKH;;IAED,OAAO,UAAP;EACH;;AAlS8B,CAAvB,CAAZ","file":"reviewModel.js","sourcesContent":["/**\n * A review.\n *\n * This corresponds to a top-level review. Replies are encapsulated in\n * RB.ReviewReply.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     shipIt (boolean):\n *         Whether this review has the \"Ship It!\" state.\n *\n *     public (boolean):\n *         Whether this review has been published.\n *\n *     bodyTop (string):\n *         The contents of the header that shows up above all comments in the\n *         review.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The contents of the footer that shows up below all comments in the\n *         review.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     draftReply (RB.ReviewReply):\n *         The draft reply to this review, if any.\n *\n *     htmlTextFields (object):\n *         The contents of any HTML-rendered text fields, if the caller fetches\n *         or posts with ``includeTextTypes=html``. The keys in this object are\n *         the field names, and the values are the HTML versions of those\n *         attributes.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     markdownTextFields (object):\n *         The source contents of any Markdown text fields, if the caller\n *         fetches or posts with ``includeTextTypes=markdown``. The keys in\n *         this object are the field names, and the values are the Markdown\n *         source of those fields.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if the caller fetches or posts\n *         with includeTextTypes=raw. The keys in this object are the field\n *         names, and the values are the raw versions of those attributes.\n *\n *     timestamp (string):\n *         The timestamp of this review.\n */\nRB.Review = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            shipIt: false,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            draftReply: null,\n            htmlTextFields: {},\n            includeTextTypes: null,\n            markdownTextFields: {},\n            rawTextFields: {},\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review',\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        shipIt: 'ship_it'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'shipIt',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'shipIt',\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? 1 : undefined\n    },\n\n    supportsExtraData: true,\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *    rsp (object):\n     *        The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n\n        if (rsp.raw_text_fields) {\n            data.rawTextFields = {\n                bodyBottom: rsp.raw_text_fields.body_bottom,\n                bodyTop: rsp.raw_text_fields.body_top\n            };\n        }\n\n        if (rsp.markdown_text_fields) {\n            data.markdownTextFields = {\n                bodyBottom: rsp.markdown_text_fields.body_bottom,\n                bodyTop: rsp.markdown_text_fields.body_top\n            };\n        }\n\n        if (rsp.html_text_fields) {\n            data.htmlTextFields = {\n                bodyBottom: rsp.html_text_fields.body_bottom,\n                bodyTop: rsp.html_text_fields.body_top,\n            };\n        }\n\n        return data;\n    },\n\n    /**\n     * Create a new diff comment for this review.\n     *\n     * Args:\n     *     options (object):\n     *         Options for creating the review.\n     *\n     * Option Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileDiffID (number):\n     *         The ID of the FileDiff that this comment is for.\n     *\n     *     interFileDiffID (number):\n     *         The ID of the FileDiff that represents the \"new\" side of an\n     *         interdiff. If this is specified, the ``fileDiffID`` argument\n     *         represents the \"old\" side.\n     *\n     *         This option is mutually exclusive with ``baseFileDiffID``.\n     *\n     *     beginLineNum (number):\n     *         The line number of the start of the comment.\n     *\n     *     endLineNum (number):\n     *         The line number of the end of the comment.\n     *\n     *     baseFileDiffID (number):\n     *         The ID of the base FileDiff in the cumulative diff that the\n     *         comment is to be made upon.\n     *\n     *         This option is mutually exclusive with ``interFileDiffID``.\n     *\n     * Returns:\n     *     RB.DiffComment:\n     *     The new comment object.\n     */\n    createDiffComment(...args) {\n        let options;\n\n        if (args.length === 1) {\n            options = args[0];\n        } else {\n            console.warn([\n                'RB.Review.createDiffComment(id, fileDiffID, ',\n                'interFileDiffID, beginLineNum, endLineNum) is deprecated. ',\n                'Use RB.Review.createDiffComment(options) instead.',\n            ].join(''));\n\n            options = {\n                id: args[0],\n                fileDiffID: args[1],\n                interFileDiffID: args[2],\n                beginLineNum: args[3],\n                endLineNum: args[4],\n            };\n        }\n\n        if (!!options.interFileDiffID && !!options.baseFileDiffID) {\n            console.error(\n                'Options `interFileDiffID` and `baseFileDiffID` for ' +\n                'RB.Review.createDiffComment() are mutually exclusive.');\n            return;\n        }\n\n        return new RB.DiffComment(_.defaults({parentObject: this}, options));\n    },\n\n    /**\n     * Create a new screenshot comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     screenshotID (number):\n     *         The ID of the Screenshot that this comment is for.\n     *\n     *     x (number):\n     *         The X coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     y (number):\n     *         The Y coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     width (number):\n     *         The width of the comment region, in pixels.\n     *\n     *     height (number):\n     *         The height of the comment region, in pixels.\n     *\n     * Returns:\n     *     RB.ScreenshotComment:\n     *     The new comment object.\n     */\n    createScreenshotComment(id, screenshotID, x, y, width, height) {\n        return new RB.ScreenshotComment({\n            parentObject: this,\n            id: id,\n            screenshotID: screenshotID,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        });\n    },\n\n    /**\n     * Create a new file attachment comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileAttachmentID (number):\n     *         The ID of the FileAttachment that this comment is for.\n     *\n     *     diffAgainstFileAttachmentID (number):\n     *         The ID of the FileAttachment that the ``fileAttachmentID`` is\n     *         diffed against, if the comment is for a file diff.\n     *\n     * Returns:\n     *     RB.FileAttachmentComment:\n     *     The new comment object.\n     */\n    createFileAttachmentComment(id, fileAttachmentID,\n                                diffAgainstFileAttachmentID) {\n        return new RB.FileAttachmentComment({\n            parentObject: this,\n            id: id,\n            fileAttachmentID: fileAttachmentID,\n            diffAgainstFileAttachmentID: diffAgainstFileAttachmentID\n        });\n    },\n\n    /**\n     * Create a new general comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     issueOpened (boolean):\n     *         Whether this comment should have an open issue.\n     *\n     * Returns:\n     *     RB.GeneralComment:\n     *     The new comment object.\n     */\n    createGeneralComment(id, issueOpened) {\n        return new RB.GeneralComment({\n            parentObject: this,\n            id: id,\n            issueOpened: issueOpened\n        });\n    },\n\n    /**\n     * Create a new reply.\n     *\n     * If an existing draft reply exists, return that. Otherwise create a draft\n     * reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The new reply object.\n     */\n    createReply() {\n        let draftReply = this.get('draftReply');\n\n        if (draftReply === null) {\n            draftReply = new RB.ReviewReply({\n                parentObject: this\n            });\n            this.set('draftReply', draftReply);\n\n            draftReply.once('published', () => {\n                const reviewRequest = this.get('parentObject');\n                reviewRequest.markUpdated(draftReply.get('timestamp'));\n                this.set('draftReply', null);\n            });\n        }\n\n        return draftReply;\n    }\n});\n"]}