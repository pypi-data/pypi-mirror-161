{"version":3,"sources":["fileAttachmentThumbnailView.es6.js"],"names":[],"mappings":"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","file":"fileAttachmentThumbnailView.js","sourcesContent":["/**\n * Displays a thumbnail depicting a file attachment.\n *\n * There are two ways that Review Board currently renders file attachments.\n * One is on page load (as part of the initial page template), and the other\n * is dynamically (when uploading vs Drag and Drop or manual upload).\n *\n * Depending on the method, we either already have elements to work with,\n * or we don't. In the latter case, it's currently up to the caller to\n * tell us, using the renderThumbnail option.\n *\n * File attachments that aren't already on the page that are currently loading\n * will be displayed as a blank file attachment (no identifying information)\n * with a spinner. When loaded, it will appear as a standard file attachment.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the file attachment (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the file attachment (caption) has finished.\n *\n *     * commentSaved\n *       - A draft comment on the file has been saved.\n *         (Only for file attachments without a Review UI.)\n */\nRB.FileAttachmentThumbnail = Backbone.View.extend({\n    className: 'file-container',\n\n    events: {\n        'click .file-delete': '_onDeleteClicked',\n        'click .file-add-comment a': '_onAddCommentClicked',\n        'click .file-update a': '_onUpdateClicked',\n    },\n\n    template: _.template(dedent`\n        <div class=\"file\">\n         <div class=\"file-actions-container\">\n          <ul class=\"file-actions\"></ul>\n         </div>\n         <div class=\"file-thumbnail-container\"></div>\n         <div class=\"file-caption-container\">\n          <div class=\"file-caption can-edit\"><a href=\"<%- downloadURL %>\" class=\"<%- captionClass %>\"><%- caption %></a></div>\n         </div>\n        </div>\n        `),\n\n    actionsTemplate: _.template([\n        '<% if (loaded) { %>',\n        '<%  if (reviewURL) { %>',\n        '<li><a class=\"file-review\" href=\"<%- reviewURL %>\">',\n        '<span class=\"fa fa-comment-o\"></span> <%- reviewText %></a>',\n        '</li>',\n        '<%  } else { %>',\n        '<li class=\"file-add-comment\">',\n        '<a href=\"#\"><span class=\"fa fa-comment-o\"></span> <%- commentText %></a>',\n        '</li>',\n        '<%  } %>',\n        '<li><a class=\"file-download\" href=\"<%- downloadURL %>\">',\n        '<span class=\"fa fa-download\"></span> <%- downloadText %>',\n        '</a></li>',\n        '<%  if (canEdit) { %>',\n        '<%   if (attachmentHistoryID) { %>',\n        '<li class=\"file-update\">',\n        '<a href=\"#\" data-attachment-history-id=\"<%- attachmentHistoryID %>\">',\n        '<span class=\"fa fa-upload\"></span> <%- updateText %>',\n        '</a></li>',\n        '<%   } %>',\n        '<li class=\"file-delete\"><a href=\"#\">',\n        '<span class=\"fa fa-trash-o\"></span> <%- deleteText %>',\n        '</a></li>',\n        '<%  } %>',\n        '<% } %>',\n    ].join('')),\n\n    thumbnailContainerTemplate: _.template([\n        '<% if (!loaded) { %>',\n        '<span class=\"fa fa-spinner fa-pulse\"></span>',\n        '<% } else { %>',\n        '<%     if (reviewURL) { %>',\n        '<a href=\"<%- reviewURL %>\" class=\"file-thumbnail-overlay\"></a>',\n        '<%     } %>',\n        '<%=  thumbnailHTML %>',\n        '<% } %>',\n    ].join('')),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     canEdit (boolean):\n     *         Whether the user has permission to edit the file attachment.\n     *\n     *     comments (Array):\n     *         The comments on the file attachment.\n     *\n     *     renderThumbnail (boolean):\n     *         Whether the thumbnail should be rendered. This exists because we\n     *         sometimes attach to existing DOM elements rather than rendering\n     *         from scratch.\n     *\n     *     reviewRequest (RB.ReviewRequest):\n     *         The review request model.\n     *\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The review request editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        this._draftComment = null;\n        this._comments = [];\n        this._commentsProcessed = false;\n        this._scrollingThumbnail = false;\n        this._playingVideo = false;\n    },\n\n    /**\n     * Render the file attachment, and hooks up all events.\n     *\n     * If the renderThumbnail option was provided when constructing the view,\n     * this will render the thumbnail from scratch, and then dynamically\n     * update it as it loads. It will start off displaying with a spinner,\n     * if not yet loaded.\n     *\n     * In either case, this will set up the caption editor and other signals\n     * to control the lifetime of the thumbnail.\n     *\n     * Returns:\n     *     RB.FileAttachmentThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        /*\n         * Until FileAttachmentThumbnail is the only thing rendering thumbnails,\n         * we'll be in a situation where we may either be working with an\n         * existing DOM element (for existing file attachments), or a new one\n         * (for newly uploaded file attachments). In the latter case, we'll want\n         * to render our own thumbnail.\n         */\n        if (this.options.renderThumbnail) {\n            this._renderContents();\n        }\n\n        this._$captionContainer = this.$('.file-caption');\n        this._$caption = this._$captionContainer.find('a.edit');\n\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.listenTo(this.model, 'change:caption', this._onCaptionChanged);\n        this._onCaptionChanged();\n\n        this.$el.hover(this._onHoverIn.bind(this),\n                       this._onHoverOut.bind(this));\n\n        if (this.options.renderThumbnail) {\n            this._$actionsContainer = this.$('.file-actions-container');\n            this._$actions = this._$actionsContainer.children('.file-actions');\n            this._$captionContainer = this.$('.file-caption-container');\n            this._$thumbnailContainer = this.$('.file-thumbnail-container');\n            this._$file = this.$('.file');\n\n            this._$actions.find('.file-download')\n                .bindProperty('href', this.model, 'downloadURL', {\n                    elementToModel: false,\n                });\n\n            this._$caption.bindProperty('href', this.model, 'downloadURL', {\n                elementToModel: false,\n            });\n\n            this.listenTo(this.model, 'change:loaded', this._onLoadedChanged);\n            this._onLoadedChanged();\n\n            this.listenTo(this.model, 'change:thumbnailHTML',\n                          this._renderThumbnail);\n            this._renderThumbnail();\n        }\n\n        if (this.options.canEdit !== false) {\n            this._captionEditorView = new RB.InlineEditorView({\n                el: this._$caption,\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: true,\n            });\n            this._captionEditorView.render();\n\n            this.listenTo(this._captionEditorView, 'beginEditPreShow', () => {\n                this.$el.addClass('editing');\n                this._stopAnimating();\n            });\n\n            this.listenTo(this._captionEditorView, 'beginEdit', () => {\n                if (this._$caption.hasClass('empty-caption')) {\n                    this._captionEditorView.$field.val('');\n                }\n\n                this.trigger('beginEdit');\n            });\n\n            this.listenTo(this._captionEditorView, 'cancel', () => {\n                this.$el.removeClass('editing');\n                this.trigger('endEdit');\n            });\n\n            this.listenTo(this._captionEditorView, 'complete', (value) => {\n                this.$el.removeClass('editing');\n\n                /*\n                 * We want to set the caption after ready() finishes, in case\n                 * it loads state and overwrites.\n                 */\n                this.model.ready({\n                    ready: () => {\n                        this.model.set('caption', value);\n                        this.trigger('endEdit');\n                        this.model.save({\n                            attrs: ['caption'],\n                        });\n                    },\n                });\n            });\n        }\n\n        return this;\n    },\n\n    /**\n     * Fade the view in.\n     */\n    fadeIn() {\n        this.$el\n            .css('opacity', 0)\n            .fadeTo(1000, 1);\n    },\n\n    /**\n     * Show the comment dialog for the file attachment.\n     *\n     * This is only ever used if the file attachment does not have a\n     * Review UI for it. A single comment dialog will appear, allowing\n     * comments on the file as a whole.\n     */\n    showCommentDlg() {\n        console.assert(!this.model.get('reviewURL'),\n                       'showCommentDlg can only be called if the file ' +\n                       'attachment does not have a review UI');\n        this._processComments();\n        this._createDraftComment();\n\n        RB.CommentDialogView.create({\n            comment: this._draftComment,\n            publishedComments: this._comments,\n            publishedCommentsType: 'file_attachment_comments',\n            position: {\n                beside: {\n                    el: this.$el,\n                    side: 'br',\n                    fitOnScreen: true,\n                },\n            },\n        });\n    },\n\n    /**\n     * Process all comments provided when constructing the view.\n     *\n     * The comments will be made usable by the comment dialog.\n     *\n     * This is only used if the file attachment does not have a Review UI.\n     */\n    _processComments() {\n        if (this._commentsProcessed) {\n            return;\n        }\n\n        const comments = this.options.comments || [];\n\n        comments.forEach(comment => {\n            if (comment.localdraft) {\n                this._createDraftComment(comment.comment_id, comment.text);\n            } else {\n                this._comments.push(comment);\n            }\n        });\n\n        this._commentsProcessed = true;\n    },\n\n    /**\n     * Create a new draft comment with the given ID and text.\n     *\n     * Only one draft comment can be created at a time.\n     *\n     * This is only used if the file attachment does not have a Review UI.\n     *\n     * Args:\n     *     commentID (number):\n     *         The ID of the draft comment.\n     *\n     *     text (string):\n     *         The comment text.\n     */\n    _createDraftComment(commentID, text) {\n        if (this._draftComment !== null) {\n            return;\n        }\n\n        const review = this.options.reviewRequest.createReview();\n        this._draftComment = review.createFileAttachmentComment(commentID,\n                                                                this.model.id);\n\n        if (text) {\n            this._draftComment.set('text', text);\n        }\n\n        this.listenTo(this._draftComment, 'saved',\n                      () => this.trigger('commentSaved', this._draftComment));\n    },\n\n    /**\n     * Render the contents of this view's element.\n     *\n     * This is only done when requested by the caller.\n     */\n    _renderContents() {\n        const caption = this.model.get('caption');\n        const captionText = caption ? caption : gettext('No caption');\n        const captionClass = caption ? 'edit' : 'edit empty-caption';\n\n        this.$el\n            .html(this.template(_.defaults({\n                caption: captionText,\n                captionClass: captionClass,\n            }, this.model.attributes)))\n            .addClass(this.className);\n    },\n\n    /**\n     * Render the thumbnail for the file attachment.\n     */\n    _renderThumbnail() {\n        this._$thumbnailContainer.html(\n            this.thumbnailContainerTemplate(this.model.attributes));\n\n        Djblets.enableRetinaImages(this._$thumbnailContainer);\n\n        // Disable tabbing to any <a> elements inside the thumbnail.\n        this._$thumbnailContainer.find('a').each((i, el) => {\n            el.tabIndex = -1;\n        });\n    },\n\n    /**\n     * Handler for when the model's 'loaded' property changes.\n     *\n     * Depending on if the file attachment is now loaded, either a\n     * blank spinner thumbnail will be shown, or a full thumbnail.\n     */\n    _onLoadedChanged() {\n        this._$actions.html(this.actionsTemplate(_.defaults({\n            canEdit: this.options.canEdit,\n            deleteText: gettext('Delete'),\n            downloadText: gettext('Download'),\n            reviewText: gettext('Review'),\n            commentText: gettext('Comment'),\n            updateText: gettext('Update'),\n        }, this.model.attributes)));\n    },\n\n    /**\n     * Handler for when the model's caption changes.\n     *\n     * If a caption is set, the thumbnail will display it. Otherwise,\n     * it will display \"No caption\".\n     */\n    _onCaptionChanged() {\n        const caption = this.model.get('caption');\n\n        if (caption) {\n            this._$caption\n                .text(caption)\n                .removeClass('empty-caption');\n        } else {\n            this._$caption\n                .text(gettext('No caption'))\n                .addClass('empty-caption');\n        }\n    },\n\n    /**\n     * Handler for the New Comment button.\n     *\n     * Shows the comment dialog.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onAddCommentClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.showCommentDlg();\n    },\n\n    /**\n     * Handler for the Update button.\n     *\n     * Shows the upload form.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onUpdateClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const updateDlg = new RB.UploadAttachmentView({\n            attachmentHistoryID: $(e.target).data('attachment-history-id'),\n            presetCaption: this.model.get('caption'),\n            reviewRequestEditor: this.options.reviewRequestEditor,\n        });\n        updateDlg.show();\n    },\n\n    /**\n     * Handler for the Delete button.\n     *\n     * Deletes the file attachment from the review request draft.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n\n    /**\n     * Handler for when the mouse hovers over the thumbnail.\n     *\n     * Determines if we should scroll the thumbnail or not.\n     */\n    _onHoverIn() {\n        const $thumbnail = this.$('.file-thumbnail').children();\n        const actionsWidth = this._$actionsContainer.outerWidth();\n        const actionsRight = (this._$file.offset().left +\n                              this._$file.outerWidth() +\n                              actionsWidth);\n\n        this.trigger('hoverIn', this.$el);\n\n        /*\n         * Position the actions menu to the left or right of the attachment\n         * thumbnail.\n         */\n        if (actionsRight > $(window).width()) {\n            this._$actionsContainer\n                .css('left', -actionsWidth)\n                .addClass('left');\n        } else {\n            this._$actionsContainer\n                .css('left', '100%')\n                .addClass('right');\n        }\n\n        if (!this.$el.hasClass('editing') && $thumbnail.length === 1) {\n            const thumbnailEl = $thumbnail[0];\n\n            if (thumbnailEl.tagName === 'VIDEO') {\n                /* The thumbnail contains a video, so let's start playing it. */\n                const promise = thumbnailEl.play();\n\n                if (promise === undefined) {\n                    /* Older browsers don't return Promises. */\n                    this._playingVideo = true;\n                } else {\n                    promise\n                        .then(() => {\n                            this._playingVideo = true;\n                        })\n                        .catch(error => {\n                            /* Ignore the error. We just won't play it. */\n                            console.error(\n                                'Unable to play the video attachment: %s',\n                                error);\n                        });\n                }\n            } else {\n                /* Scroll the container to show all available content. */\n                const elHeight = this.$el.height();\n                const thumbnailHeight = $thumbnail.height() || 0;\n\n                if (thumbnailHeight > elHeight) {\n                    const distance = elHeight - thumbnailHeight;\n                    const duration =\n                        (Math.abs(distance) / 200) * 1000; // 200 pixels/s\n\n                    this._scrollingThumbnail = true;\n                    $thumbnail\n                        .delay(1000)\n                        .animate(\n                            { 'margin-top': distance + 'px' },\n                            {\n                                duration: duration,\n                                easing: 'linear',\n                            })\n                        .delay(500)\n                        .animate(\n                            { 'margin-top': 0 },\n                            {\n                                duration: duration,\n                                easing: 'linear',\n                                complete: () => {\n                                    this._scrollingThumbnail = false;\n                                },\n                            });\n                }\n            }\n        }\n    },\n\n    /**\n     * Handler for when the mouse stops hovering over the thumbnail.\n     *\n     * Removes the classes for the actions container, and stops animating\n     * the thumbnail contents.\n     */\n    _onHoverOut() {\n        this.trigger('hoverOut');\n\n        this._$actionsContainer\n            .removeClass('left')\n            .removeClass('right');\n\n        this._stopAnimating();\n    },\n\n    /**\n     * Stop animating this thumbnail.\n     *\n     * This is when moving the mouse outside of the thumbnail, or when the\n     * caption editor is opened.\n     */\n    _stopAnimating() {\n        if (this._scrollingThumbnail) {\n            this._scrollingThumbnail = false;\n            this.$('.file-thumbnail').children()\n                .stop(true)\n                .animate(\n                    { 'margin-top': 0 },\n                    { duration: 100 });\n        } else if (this._playingVideo) {\n            this._playingVideo = false;\n            this.$('video')[0].pause();\n        }\n    },\n});\n"]}