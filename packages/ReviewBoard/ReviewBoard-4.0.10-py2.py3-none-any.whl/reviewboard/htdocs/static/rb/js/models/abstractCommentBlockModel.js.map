{"version":3,"sources":["abstractCommentBlockModel.es6.js"],"names":[],"mappings":"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","file":"abstractCommentBlockModel.js","sourcesContent":["/**\n * Represents a region of reviewable content that contains comments.\n *\n * This stores all comments that match a given region, as defined by a\n * subclass of AbstractCommentBlock.\n *\n * New draft comments can be created, which will later be stored on the\n * server.\n *\n * The total number of comments in the block (including any draft comment)\n * will be stored, which may be useful for display.\n *\n * Model Attributes:\n *     canDelete (boolean):\n *         Whether or not the comment can be deleted.\n *\n *     count (number):\n *         The total number of comments, including a draft comment.\n *\n *     draftComment (RB.BaseComment):\n *         The draft comment that this block is associated with.\n *\n *     hasDraft (boolean):\n *         Whether or not the review request has a draft.\n *\n *     review (RB.Review):\n *         The review that the associated comment is a part of.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that this comment is on.\n *\n *     serializedComments (Array of object):\n *         An array of serialized comments for display.\n */\nRB.AbstractCommentBlock = Backbone.Model.extend({\n    defaults: {\n        hasDraft: false,\n        canDelete: false,\n        draftComment: null,\n        reviewRequest: null,\n        review: null,\n        serializedComments: [],\n        count: 0\n    },\n\n    /**\n     * Initialize the AbstractCommentBlock.\n     */\n    initialize() {\n        console.assert(this.get('reviewRequest'),\n                       'reviewRequest must be provided');\n        console.assert(this.get('review'),\n                       'review must be provided');\n\n        /*\n         * Find out if there are any draft comments and filter them out of the\n         * stored list of comments.\n         */\n        const comments = this.get('serializedComments');\n        const newSerializedComments = [];\n\n        if (comments.length > 0) {\n            comments.forEach(comment => {\n                // We load in encoded text, so decode it.\n                comment.text = $('<div>').html(comment.text).text();\n\n                if (comment.localdraft) {\n                    this.ensureDraftComment(comment.comment_id, {\n                        text: comment.text,\n                        richText: comment.rich_text,\n                        issueOpened: comment.issue_opened,\n                        issueStatus: comment.issue_status,\n                        html: comment.html,\n                    });\n                } else {\n                    newSerializedComments.push(comment);\n                }\n            }, this);\n\n            this.set('serializedComments', newSerializedComments);\n        } else {\n            this.ensureDraftComment();\n        }\n\n        this.on('change:draftComment', this._updateCount, this);\n        this._updateCount();\n    },\n\n    /**\n     * Return whether or not the comment block is empty.\n     *\n     * A comment block is empty if there are no stored comments and no\n     * draft comment.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the comment block is empty.\n     */\n    isEmpty() {\n        return (this.get('serializedComments').length === 0 &&\n                !this.has('draftComment'));\n    },\n\n    /**\n     * Create a draft comment, optionally with a given ID and text.\n     *\n     * This must be implemented by a subclass to return a Comment class\n     * specific to the subclass.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        console.assert(false, 'This must be implemented by a subclass');\n    },\n\n    /**\n     * Create a draft comment in this comment block.\n     *\n     * Only one draft comment can exist per block, so if one already exists,\n     * this will do nothing.\n     *\n     * The actual comment object is up to the subclass to create.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment.\n     *\n     *     comment_attr (object):\n     *         Attributes to set on the comment model.\n     */\n    ensureDraftComment(id, comment_attr) {\n        if (this.has('draftComment')) {\n            return;\n        }\n\n        const comment = this.createComment(id);\n        comment.set(comment_attr);\n        comment.on('saved', this._updateCount, this);\n        comment.on('destroy', () => {\n            this.set('draftComment', null);\n            this._updateCount();\n        });\n\n        this.set('draftComment', comment);\n    },\n\n    /**\n     * Update the displayed number of comments in the comment block.\n     *\n     * If there's a draft comment, it will be added to the count. Otherwise,\n     * this depends solely on the number of published comments.\n     */\n    _updateCount() {\n        let count = this.get('serializedComments').length;\n\n        if (this.has('draftComment')) {\n            count++;\n        }\n\n        this.set('count', count);\n    },\n});\n"]}