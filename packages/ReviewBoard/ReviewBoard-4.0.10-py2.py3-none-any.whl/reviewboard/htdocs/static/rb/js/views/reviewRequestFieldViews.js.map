{"version":3,"sources":["reviewRequestFieldViews.es6.js"],"names":[],"mappings":"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","file":"reviewRequestFieldViews.js","sourcesContent":["(function() {\n\n\nconst Fields = {};\n\n\n/**\n * Base class for all field views.\n */\nFields.BaseFieldView = Backbone.View.extend({\n    /**\n     * The name of the property in the model for if this field is editable.\n     */\n    editableProp: 'editable',\n\n    /** Whether the contents of the field should be stored in extraData. */\n    useExtraData: true,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     fieldID (string):\n     *         The ID of the field.\n     */\n    initialize(options) {\n        this.fieldID = options.fieldID;\n        this.jsonFieldName = options.jsonFieldName ||\n                             this.jsonFieldName ||\n                             this.fieldID;\n        this._fieldName = undefined;\n        this.$el.data('field-id', this.fieldID);\n    },\n\n    /**\n     * The name of the attribute within the model.\n     *\n     * Returns:\n     *     string:\n     *     The namee of the attribute that this field will reflect.\n     */\n    fieldName() {\n        /*\n         * This implementation will convert names with underscores to camel\n         * case. This covers the typical naming between Python and JavaScript.\n         * If subclasses need something different, they can override this with\n         * either a new function or a regular attribute.\n         */\n        if (this._fieldName === undefined) {\n            this._fieldName = this.fieldID.replace(\n                /_(.)/g, (m, c) => c.toUpperCase());\n        }\n\n        return this._fieldName;\n    },\n\n    /**\n     * Load the stored value for the field.\n     *\n     * This will load from the draft if representing a built-in field\n     * (``useExtraData === false``) or from extra_data if a custom field\n     * (``useExtraData === true``).\n     *\n     * Args:\n     *     options (object):\n     *         Options for :js:func:`RB.ReviewRequestEditor.getDraftField`.\n     *\n     * Returns:\n     *     *:\n     *     The stored value for the field.\n     */\n    _loadValue(options) {\n        const fieldName = (this.useExtraData\n                           ? this.jsonFieldName\n                           : _.result(this, 'fieldName'));\n\n        return this.model.getDraftField(\n            fieldName,\n            _.defaults({\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        this.model.setDraftField(\n            _.result(this, 'fieldName'),\n            value,\n            _.defaults({\n                jsonFieldName: this.jsonFieldName,\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * This should be overridden by subclasses, if necessary.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return false;\n    },\n\n    /**\n     * Finish the field's save operation.\n     *\n     * This should be overridden by subclasses, if necessary.\n     */\n    finishSave() {\n    },\n});\n\n\n/**\n * A field view for text-based fields.\n */\nFields.TextFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Autocomplete definitions.\n     *\n     * This should be overridden by subclasses.\n     */\n    autocomplete: null,\n\n    /** Whether the view is multi-line or single line. */\n    multiline: false,\n\n    /** Whether the field allows Markdown-formatted text. */\n    allowRichText: false,\n\n    /**\n     * Whether edits should be triggered only by clicking on the icon.\n     *\n     * If this is true, edits can only be triggered by clicking on the icon.\n     * If this is false, clicks on the field itself will also trigger an edit.\n     */\n    useEditIconOnly: false,\n\n    /**\n     * The model attribute for if this field is rich text.\n     *\n     * This is the name of the attribute which indicates whether the field\n     * contains Markdown-formatted text or plain text.\n     *\n     * Returns:\n     *     string:\n     *     The name of the model atribute indicating whether the field contains\n     *     rich text.\n     */\n    richTextAttr() {\n        return this.allowRichText\n               ? `${_.result(this, 'fieldName')}RichText`\n               : null;\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view. See the parent class for details.\n     */\n    initialize(options) {\n        Fields.BaseFieldView.prototype.initialize.call(this, options);\n\n        this.jsonTextTypeFieldName = (this.jsonFieldName === 'text'\n                                      ? 'text_type'\n                                      : `${this.jsonFieldName}_text_type`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return (this.allowRichText\n                ? RB.RichTextInlineEditorView\n                : RB.InlineEditorView);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.TextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (!this.$el.hasClass('editable')) {\n            return this;\n        }\n\n        const fieldName = _.result(this, 'fieldName');\n        const EditorClass = this._getInlineEditorClass();\n\n        const inlineEditorOptions = {\n            el: this.$el,\n            formClass: `${this.$el.prop('id')}-editor`,\n            editIconClass: 'rb-icon rb-icon-edit',\n            enabled: this.model.get(this.editableProp),\n            multiline: this.multiline,\n            useEditIconOnly: this.useEditIconOnly,\n            showRequiredFlag: this.$el.hasClass('required'),\n            deferEventSetup: this.autocomplete !== null,\n        };\n\n        if (this.allowRichText) {\n            _.extend(inlineEditorOptions, {\n                textEditorOptions: {\n                    minHeight: 0,\n                    richText: this._loadRichTextValue(),\n                },\n                matchHeight: false,\n                hasRawValue: true,\n                rawValue: this._loadValue({\n                    useRawTextValue: true,\n                }) || '',\n            });\n        }\n\n        this.inlineEditorView = new EditorClass(inlineEditorOptions);\n        this.inlineEditorView.render();\n\n        this.listenTo(this.inlineEditorView, 'beginEdit',\n                      () => this.model.incr('editCount'));\n\n        this.listenTo(this.inlineEditorView, 'resize',\n                      () => this.trigger('resize'));\n\n        this.listenTo(this.inlineEditorView, 'cancel', () => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n        });\n\n        this.listenTo(this.inlineEditorView, 'complete', value => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n\n            const saveOptions = {\n                allowMarkdown: this.allowRichText,\n                error: err => {\n                    this._formatField();\n                    this.trigger('fieldError', err);\n                },\n                success: () => {\n                    this._formatField();\n                    this.trigger('fieldSaved');\n                },\n            };\n\n            if (this.allowRichText) {\n                saveOptions.richText =\n                    this.inlineEditorView.textEditor.richText;\n                saveOptions.jsonTextTypeFieldName = this.jsonTextTypeFieldName;\n            }\n\n            this._saveValue(value, saveOptions);\n        });\n\n        if (this.autocomplete !== null) {\n            this._buildAutoComplete();\n            this.inlineEditorView.setupEvents();\n        }\n\n        this.listenTo(\n            this.model,\n            `change:${this.editableProp}`,\n            (model, editable) => {\n                if (editable) {\n                    this.inlineEditorView.enable();\n                } else {\n                    this.inlineEditorView.disable();\n                }\n            });\n\n        this.listenTo(this.model, `fieldChanged:${fieldName}`,\n                      this._formatField);\n\n        return this;\n    },\n\n    /**\n     * Convert an item to a hyperlink.\n     *\n     * Args:\n     *     item (object):\n     *         The item to link. The content is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add to the link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes the item and returns the text for the\n     *         link. If not specified, the item itself will be used as the\n     *         text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes the item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link element wrapped in jQuery.\n     */\n    _convertToLink(item, options={}) {\n        if (!item) {\n            return $();\n        }\n\n        const $link = $('<a/>')\n            .attr('href', (options.makeItemURL\n                           ? options.makeItemURL(item)\n                           : item))\n            .text(options.makeItemText ? options.makeItemText(item) : item);\n\n        if (options.cssClass) {\n            $link.addClass(options.cssClass);\n        }\n\n        return $link;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const ac = this.autocomplete;\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.inlineEditorView.$field\n            .rbautocomplete({\n                formatItem: data => {\n                    let s = data[ac.nameKey];\n\n                    if (ac.descKey && data[ac.descKey]) {\n                        s += ` <span>(${_.escape(data[ac.descKey])})</span>`;\n                    }\n\n                    return s;\n                },\n                matchCase: false,\n                multiple: true,\n                parse: data => {\n                    const items = _.isFunction(ac.fieldName)\n                                  ? ac.fieldName(data)\n                                  : data[ac.fieldName];\n\n                    return items.map(item => {\n                        if (ac.parseItem) {\n                            item = ac.parseItem(item);\n                        }\n\n                        return {\n                            data: item,\n                            value: item[ac.nameKey],\n                            result: item[ac.nameKey],\n                        };\n                    });\n                },\n                url: SITE_ROOT + reviewRequest.get('localSitePrefix') +\n                     'api/' + (ac.resourceName || ac.fieldName) + '/',\n                extraParams: ac.extraParams,\n                cmp: ac.cmp,\n                width: 350,\n                error: xhr => {\n                    let text;\n\n                    try {\n                        text = JSON.parse(xhr.responseText).err.msg;\n                    } catch (e) {\n                        text = `HTTP ${xhr.status} ${xhr.statusText}`;\n                    }\n\n                    alert(text);\n                },\n            })\n            .on('autocompleteshow', () => {\n                /*\n                 * Add the footer to the bottom of the results pane the\n                 * first time it's created.\n                 *\n                 * Note that we may have multiple .ui-autocomplete-results\n                 * elements, and we don't necessarily know which is tied to\n                 * this. So, we'll look for all instances that don't contain\n                 * a footer.\n                 */\n                const resultsPane = $('.ui-autocomplete-results:not(' +\n                                      ':has(.ui-autocomplete-footer))');\n\n                if (resultsPane.length > 0) {\n                    $('<div/>')\n                        .addClass('ui-autocomplete-footer')\n                        .text(gettext('Press Tab to auto-complete.'))\n                        .appendTo(resultsPane);\n                }\n            });\n    },\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const value = this._loadValue();\n\n        if (_.isFunction(this.formatValue)) {\n            this.formatValue(value);\n        } else {\n            this.$el.text(value);\n        }\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return this.inlineEditorView && this.inlineEditorView.isDirty();\n    },\n\n    /**\n     * Finish the field's save operation.\n     */\n    finishSave() {\n        this.inlineEditorView.submit();\n    },\n\n    /**\n     * Load the rich text value for the field.\n     *\n     * This will look up the rich text boolean attribute for built-in\n     * fields or the text type information in extra_data, returning\n     * whether the field is set to use rich text.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is set for rich text. This will be\n     *     ``undefined`` if an explicit value isn't stored.\n     */\n    _loadRichTextValue() {\n        if (this.useExtraData) {\n            const textTypeFieldName = this.jsonTextTypeFieldName;\n            const textType = this.model.getDraftField(\n                textTypeFieldName,\n                {\n                    useExtraData: true,\n                    useRawTextValue: true,\n                });\n\n            if (textType === undefined) {\n                return undefined;\n            }\n\n            console.assert(\n                textType === 'plain' || textType === 'markdown',\n                `Text type \"${textType}\" in field \"${textTypeFieldName}\" ` +\n                `not supported.`);\n\n            return textType === 'markdown';\n        } else {\n            return this.model.getDraftField(_.result(this, 'richTextAttr'));\n        }\n    },\n});\n\n\n/**\n * A field view for multiline text-based fields.\n */\nFields.MultilineTextFieldView = Fields.TextFieldView.extend({\n    multiline: true,\n    allowRichText: null,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        Fields.TextFieldView.prototype.initialize.call(this, options);\n\n        /*\n         * If this field is coming from an extension which doesn't specify any\n         * JS-side version, we need to pull some data out of the markup.\n         */\n        if (this.allowRichText === null) {\n            this.allowRichText = this.$el.data('allow-markdown');\n\n            const reviewRequest = this.model.get('reviewRequest');\n            const extraData = reviewRequest.draft.get('extraData');\n\n            const rawValue = this.$el.data('raw-value');\n            extraData[this.jsonFieldName] = (rawValue !== undefined\n                                             ? rawValue || ''\n                                             : this.$el.text());\n            this.$el.removeAttr('data-raw-value');\n\n            if (this.allowRichText) {\n                extraData[this.jsonTextTypeFieldName] =\n                    (this.$el.hasClass('rich-text') ? 'markdown' : 'plain');\n            }\n        }\n    },\n\n    /**\n     * Linkify a block of text.\n     *\n     * This turns URLs, /r/#/ paths, and bug numbers into clickable links. It's\n     * a wrapper around RB.formatText that handles passing in the bug tracker.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the text formatting.\n     *\n     * Option Args:\n     *     newText (string, optional):\n     *         The new text to format into the element. If not specified, the\n     *         existing contents of the element are used.\n     */\n    formatText(options) {\n        const reviewRequest = this.model.get('reviewRequest');\n\n        options = _.defaults({\n            bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            isHTMLEncoded: true,\n        }, options);\n\n        if (this.allowRichText) {\n            options.richText = this._loadRichTextValue();\n        }\n\n        RB.formatText(this.$el, options);\n\n        this.$('img').on('load', () => this.trigger('resize'));\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.MultilineTextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.formatText();\n\n        return this;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (object):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        if (this.allowRichText) {\n            this.formatText({ newText: data });\n        }\n    },\n});\n\n\n/**\n * A field view for fields that include multiple comma-separated values.\n */\nFields.CommaSeparatedValuesTextFieldView = Fields.TextFieldView.extend({\n    useEditIconOnly: true,\n\n    /**\n     * Convert an array of items to a list of hyperlinks.\n     *\n     * Args:\n     *     list (Array);\n     *         An array of items. The contents of the item is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add for each link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes an item and returns the text for the link.\n     *         If not specified, the item itself will be used as the text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes an item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link elements in a jQuery list.\n     */\n    _urlizeList(list, options={}) {\n        let $links = $();\n\n        if (list) {\n            for (let i = 0; i < list.length; i++) {\n                $links = $links.add(this._convertToLink(list[i], options));\n\n                if (i < list.length - 1) {\n                    $links = $links.add(document.createTextNode(', '));\n                }\n            }\n        }\n\n        return $links;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el.html(data.join(', '));\n    },\n});\n\n\n/**\n * A field view for checkbox fields.\n */\nFields.CheckboxFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.CheckboxFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.is(':checked'), {\n                error: err => this.trigger('fieldError', err),\n                success: () => this.trigger('fieldSaved'),\n            });\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for dropdown fields.\n */\nFields.DropdownFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DropdownFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.val(), {\n                error: err => this.trigger('fieldError', err),\n                success: () => this.trigger('fieldSaved'),\n            });\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for date fields.\n */\nFields.DateFieldView = Fields.TextFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DateFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.inlineEditorView.$field\n            .datepicker({\n                changeMonth: true,\n                changeYear: true,\n                dateFormat: $.datepicker.ISO_8601,\n                showButtonPanel: true,\n                onSelect: (dateText, instance) => {\n                    if (dateText !== instance.lastVal) {\n                        this.inlineEditorView._dirty = true;\n                    }\n                },\n            });\n\n        return this;\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        const m = moment(value, 'YYYY-MM-DD', true);\n\n        if (!m.isValid()) {\n            value = '';\n            this.$el.text('');\n        }\n\n        Fields.TextFieldView.prototype._saveValue.call(this, value, options);\n    },\n});\n\n\n/**\n * The \"Branch\" field.\n */\nFields.BranchFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Bugs\" field.\n */\nFields.BugsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        const reviewRequest = this.model.get('reviewRequest');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n\n        if (bugTrackerURL) {\n            this.$el\n                .empty()\n                .append(this._urlizeList(data, {\n                    makeItemURL: item => bugTrackerURL.replace(\n                        '--bug_id--', item),\n                    cssClass: 'bug',\n                }))\n                .find('.bug').bug_infobox();\n        } else {\n            this.$el.text(data.join(', '));\n        }\n    },\n});\n\n\n/**\n * The change description field.\n */\nFields.ChangeDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    jsonFieldName: 'changedescription',\n    useExtraData: false,\n});\n\n\n/**\n * The commit list field.\n *\n * This provides expand/collapse functionality for commit messages that are\n * more than a single line.\n */\nFields.CommitListFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Initialize the field.\n     */\n    initialize() {\n        this._commitListView = null;\n    },\n\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.CommitListFieldView:\n     *     This view (for chaining).\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        /*\n         * We needn't render the view because it has already been rendered by\n         * the server.\n         */\n        this._commitListView = new RB.DiffCommitListView({\n            el: this.$('.commit-list'),\n            model: new RB.DiffCommitList({\n                commits: this.model.get('commits'),\n                isInterdiff: false,\n            }),\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * The close description field.\n */\nFields.CloseDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n    editableProp: 'statusEditable',\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     */\n    _saveValue(value, options) {\n        this.model.get('reviewRequest').close(_.defaults({\n            type: this.closeType,\n            description: value,\n            postData: {\n                force_text_type: 'html',\n                include_text_types: 'raw',\n            },\n        }, options));\n    },\n});\n\n\n/**\n * The \"Depends On\" field.\n */\nFields.DependsOnFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: data => data.search.review_requests,\n        nameKey: 'id',\n        descKey: 'id',\n        display_name: 'summary',\n        resourceName: 'search',\n        parseItem: item => {\n            item.id = item.id.toString();\n            item.display_name = item.summary;\n\n            return item;\n        },\n        extraParams: {\n            summary: 1,\n        },\n        cmp: (term, a, b) => b.data.id - a.data.id,\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.id,\n                cssClass: 'review-request-link',\n            }))\n            .find('.review-request-link').review_request_infobox();\n    },\n});\n\n\n/**\n * The \"Description\" field.\n */\nFields.DescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\n/**\n * The \"Owner\" field.\n */\nFields.OwnerFieldView = Fields.TextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (string):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        const $link = this._convertToLink(\n            data,\n            {\n                makeItemURL: item => {\n                    const href = item.href;\n                    return href.substr(href.indexOf('/users'));\n                },\n                makeItemText: item => item.title,\n                cssClass: 'user',\n            });\n\n        this.$el\n            .empty()\n            .append($link.user_infobox());\n    }\n});\n\n\n/**\n * The \"Summary\" field.\n */\nFields.SummaryFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Groups\" field.\n */\nFields.TargetGroupsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'groups',\n        nameKey: 'name',\n        descKey: 'display_name',\n        extraParams: {\n            displayname: 1,\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.name,\n            }));\n    },\n});\n\n\n/**\n * The \"People\" field.\n */\nFields.TargetPeopleFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.username,\n                cssClass: 'user',\n            }))\n            .find('.user').user_infobox();\n    }\n});\n\n\n/**\n * The \"Testing Done\" field.\n */\nFields.TestingDoneFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\nRB.ReviewRequestFields = Fields;\n\n\n})();\n"]}