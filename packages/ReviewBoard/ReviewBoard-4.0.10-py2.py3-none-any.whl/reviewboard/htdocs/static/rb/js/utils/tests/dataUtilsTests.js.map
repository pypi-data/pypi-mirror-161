{"version":3,"sources":["dataUtilsTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,oBAAD,EAAuB,YAAW;EACnC,EAAE,CAAC,uBAAD,EAA0B,UAAS,IAAT,EAAe;IACvC,MAAM,GAAG,GAAG,QAAZ;IACA,MAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,CAAC,GAAD,CAAT,CAAb;IAEA,EAAE,CAAC,SAAH,CAAa,qBAAb,CAAmC,IAAnC,EAAyC,MAAM,IAAI;MAC/C,MAAM,CAAC,MAAM,CAAC,UAAR,CAAN,CAA0B,IAA1B,CAA+B,CAA/B;MAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,MAAb,CAAjB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,UAA3B,EAAuC,CAAC,EAAxC,EAA4C;QACxC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAlC;MACH;;MAED,IAAI;IACP,CAVD;EAWH,CAfC,CAAF;EAiBA,EAAE,CAAC,kBAAD,EAAqB,UAAS,IAAT,EAAe;IAClC,MAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,CAAC,iBAAD,CAAT,CAAb;IAEA,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,IAA9B,EAAoC,MAAM,IAAI;MAC1C,MAAM,CAAC,OAAO,MAAR,CAAN,CAAsB,IAAtB,CAA2B,QAA3B;MACA,MAAM,CAAC,MAAD,CAAN,CAAe,IAAf,CAAoB,iBAApB;MAEA,IAAI;IACP,CALD;EAMH,CATC,CAAF;EAWA,EAAE,CAAC,6BAAD,EAAgC,UAAS,IAAT,EAAe;IAC7C,MAAM,IAAI,GAAG,QAAb;IACA,MAAM,IAAI,GAAG,KAAb;IAEA,MAAM,KAAK,GAAG,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,CAAd;IACA,MAAM,KAAK,GAAG,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,CAAd;IAEA,EAAE,CAAC,SAAH,CAAa,2BAAb,CAAyC,CAAC,KAAD,EAAQ,KAAR,CAAzC,EACyC,CAAC,OAAD,EAAU,OAAV,KAAsB;MAC3D,MAAM,CAAC,OAAO,CAAC,UAAT,CAAN,CAA2B,IAA3B,CAAgC,CAAhC;MACA,MAAM,CAAC,OAAO,CAAC,UAAT,CAAN,CAA2B,IAA3B,CAAgC,CAAhC;MAEA,MAAM,SAAS,GAAG,IAAI,QAAJ,CAAa,OAAb,CAAlB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,UAA5B,EAAwC,CAAC,EAAzC,EAA6C;QACzC,MAAM,CAAC,SAAS,CAAC,QAAV,CAAmB,CAAnB,CAAD,CAAN,CAA8B,IAA9B,CAAmC,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAnC;MACH;;MAED,MAAM,SAAS,GAAG,IAAI,QAAJ,CAAa,OAAb,CAAlB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,UAA5B,EAAwC,CAAC,EAAzC,EAA6C;QACzC,MAAM,CAAC,SAAS,CAAC,QAAV,CAAmB,CAAnB,CAAD,CAAN,CAA8B,IAA9B,CAAmC,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAnC;MACH;;MAED,IAAI;IACP,CAlBD;EAmBH,CA1BC,CAAF;EA4BA,EAAE,CAAC,wBAAD,EAA2B,UAAS,IAAT,EAAe;IACxC,MAAM,KAAK,GAAG,IAAI,IAAJ,CAAS,CAAC,iBAAD,CAAT,CAAd;IACA,MAAM,KAAK,GAAG,IAAI,IAAJ,CAAS,CAAC,aAAD,CAAT,CAAd;IAEA,EAAE,CAAC,SAAH,CAAa,sBAAb,CAAoC,CAAC,KAAD,EAAQ,KAAR,CAApC,EACoC,CAAC,OAAD,EAAU,OAAV,KAAsB;MACtD,MAAM,CAAC,OAAO,OAAR,CAAN,CAAuB,IAAvB,CAA4B,QAA5B;MACA,MAAM,CAAC,OAAO,OAAR,CAAN,CAAuB,IAAvB,CAA4B,QAA5B;MACA,MAAM,CAAC,OAAD,CAAN,CAAgB,IAAhB,CAAqB,iBAArB;MACA,MAAM,CAAC,OAAD,CAAN,CAAgB,IAAhB,CAAqB,aAArB;MAEA,IAAI;IACP,CARD;EASH,CAbC,CAAF;EAeA,QAAQ,CAAC,kBAAD,EAAqB,YAAW;IACpC,EAAE,CAAC,WAAD,EAAc,YAAW;MACvB,MAAM,MAAM,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;MACA,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;QACI,IAAI,EAAE,MADV;QAEI,MAAM,EAAE;MAFZ,CAD8C,CAA9B,CAApB;MAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;MAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;QACpC,MAAM,CAAC,QAAQ,CAAC,OAAT,CAAiB,CAAjB,CAAD,CAAN,CAA4B,IAA5B,CAAiC,MAAM,CAAC,CAAD,CAAvC;MACH;IACJ,CAfC,CAAF;IAiBA,EAAE,CAAC,YAAD,EAAe,YAAW;MACxB,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;MACA,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;QACI,IAAI,EAAE,OADV;QAEI,MAAM,EAAE;MAFZ,CAD8C,CAA9B,CAApB;MAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;MAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;QACpC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,MAAM,CAAC,CAAD,CAAxC;MACH;IACJ,CAfC,CAAF;IAiBA,QAAQ,CAAC,YAAD,EAAe,YAAW;MAC9B,MAAM,MAAM,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,OADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAC,GAAG,CAAtB,EAAyB,IAAzB,CAAD,CAAN,CAAuC,IAAvC,CAA4C,MAAM,CAAC,CAAD,CAAlD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,OADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAC,GAAG,CAAtB,CAAD,CAAN,CAAiC,IAAjC,CAAsC,MAAM,CAAC,CAAD,CAA5C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,QAAQ,CAAC,aAAD,EAAgB,YAAW;MAC/B,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,QADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAC,GAAG,CAAvB,EAA0B,IAA1B,CAAD,CAAN,CAAwC,IAAxC,CAA6C,MAAM,CAAC,CAAD,CAAnD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,QADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,CAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAC,GAAG,CAAvB,CAAD,CAAN,CAAkC,IAAlC,CAAuC,MAAM,CAAC,CAAD,CAA7C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,QAAQ,CAAC,YAAD,EAAe,YAAW;MAC9B,MAAM,MAAM,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,OADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAC,GAAG,CAAtB,EAAyB,IAAzB,CAAD,CAAN,CAAuC,IAAvC,CAA4C,MAAM,CAAC,CAAD,CAAlD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,OADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAC,GAAG,CAAtB,CAAD,CAAN,CAAiC,IAAjC,CAAsC,MAAM,CAAC,CAAD,CAA5C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,QAAQ,CAAC,aAAD,EAAgB,YAAW;MAC/B,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,QADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAC,GAAG,CAAvB,EAA0B,IAA1B,CAAD,CAAN,CAAwC,IAAxC,CAA6C,MAAM,CAAC,CAAD,CAAnD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,QADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAC,GAAG,CAAvB,CAAD,CAAN,CAAkC,IAAlC,CAAuC,MAAM,CAAC,CAAD,CAA7C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,QAAQ,CAAC,cAAD,EAAiB,YAAW;MAChC,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,SADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,UAAT,CAAoB,CAAC,GAAG,CAAxB,EAA2B,IAA3B,CAAD,CAAN,CAAyC,IAAzC,CAA8C,MAAM,CAAC,CAAD,CAApD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,SADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,UAAT,CAAoB,CAAC,GAAG,CAAxB,CAAD,CAAN,CAAmC,IAAnC,CAAwC,MAAM,CAAC,CAAD,CAA9C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,QAAQ,CAAC,cAAD,EAAiB,YAAW;MAChC,MAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf;MAEA,EAAE,CAAC,eAAD,EAAkB,YAAW;QAC3B,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,SADV;UAEI,MAAM,EAAE;QAFZ,CAD8C,CAA9B,CAApB;QAMA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,UAAT,CAAoB,CAAC,GAAG,CAAxB,EAA2B,IAA3B,CAAD,CAAN,CAAyC,IAAzC,CAA8C,MAAM,CAAC,CAAD,CAApD;QACH;MACJ,CAdC,CAAF;MAgBA,EAAE,CAAC,YAAD,EAAe,YAAW;QACxB,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;UACI,IAAI,EAAE,SADV;UAEI,MAAM,EAAE,MAFZ;UAGI,SAAS,EAAE;QAHf,CAD8C,CAA9B,CAApB;QAOA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;QAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;;QAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;UACpC,MAAM,CAAC,QAAQ,CAAC,UAAT,CAAoB,CAAC,GAAG,CAAxB,CAAD,CAAN,CAAmC,IAAnC,CAAwC,MAAM,CAAC,CAAD,CAA9C;QACH;MACJ,CAfC,CAAF;IAgBH,CAnCO,CAAR;IAqCA,EAAE,CAAC,qBAAD,EAAwB,YAAW;MACjC,MAAM,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa,gBAAb,CAA8B,CAC9C;QACI,IAAI,EAAE,OADV;QAEI,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAFZ;QAGI,SAAS,EAAE;MAHf,CAD8C,EAM9C;QACI,IAAI,EAAE,OADV;QAEI,MAAM,EAAE,CAAC,GAAD;MAFZ,CAN8C,EAU9C;QACI,IAAI,EAAE,QADV;QAEI,MAAM,EAAE,CAAC,EAAD;MAFZ,CAV8C,EAc9C;QACI,IAAI,EAAE,SADV;QAEI,MAAM,EAAE,CAAC,KAAD;MAFZ,CAd8C,CAA9B,CAApB;MAmBA,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;MAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,EAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,EAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,GAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,CAAD,CAAN,CAAoC,IAApC,CAAyC,EAAzC;MACA,MAAM,CAAC,QAAQ,CAAC,UAAT,CAAoB,EAApB,EAAwB,IAAxB,CAAD,CAAN,CAAsC,OAAtC,CAA8C,KAA9C;IACH,CA5BC,CAAF;EA6BH,CA9RO,CAAR;EAgSA,EAAE,CAAC,WAAD,EAAc,UAAS,IAAT,EAAe;IAC3B,MAAM,IAAI,GAAG,EAAE,CAAC,SAAH,CAAa,SAAb,CAAuB,CAChC,KADgC,EAEhC,CACI;MACI,IAAI,EAAE,OADV;MAEI,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;IAFZ,CADJ,EAKI;MACI,IAAI,EAAE,QADV;MAEI,MAAM,EAAE,CAAC,GAAD;IAFZ,CALJ,CAFgC,EAYhC,IAAI,IAAJ,CAAS,CAAC,KAAD,CAAT,CAZgC,CAAvB,CAAb;IAeA,EAAE,CAAC,SAAH,CAAa,qBAAb,CAAmC,IAAnC,EAAyC,WAAW,IAAI;MACpD,MAAM,CAAC,WAAW,CAAC,UAAb,CAAN,CAA+B,IAA/B,CAAoC,EAApC;MAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,WAAb,CAAjB;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,IAAtB,CAAD,CAAN,CAAoC,IAApC,CAAyC,GAAzC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAD,CAAN,CAA6B,IAA7B,CAAkC,IAAI,UAAJ,CAAe,CAAf,CAAlC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAD,CAAN,CAA8B,IAA9B,CAAmC,IAAI,UAAJ,CAAe,CAAf,CAAnC;MACA,MAAM,CAAC,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAD,CAAN,CAA8B,IAA9B,CAAmC,IAAI,UAAJ,CAAe,CAAf,CAAnC;MAEA,IAAI;IACP,CAfD;EAgBH,CAhCC,CAAF;AAiCH,CAzYI,CAAL","file":"dataUtilsTests.js","sourcesContent":["suite('rb/utils/dataUtils', function() {\n    it('readBlobAsArrayBuffer', function(done) {\n        const str = 'abc123';\n        const blob = new Blob([str]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, result => {\n            expect(result.byteLength).toBe(6);\n\n            const dataView = new DataView(result);\n\n            for (let i = 0; i < result.byteLength; i++) {\n                expect(dataView.getUint8(i)).toBe(str.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readBlobAsString', function(done) {\n        const blob = new Blob(['This is a test.']);\n\n        RB.DataUtils.readBlobAsString(blob, result => {\n            expect(typeof result).toBe('string');\n            expect(result).toBe('This is a test.');\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsArrayBuffers', function(done) {\n        const str1 = 'abc123';\n        const str2 = 'foo';\n\n        const blob1 = new Blob([str1]);\n        const blob2 = new Blob([str2]);\n\n        RB.DataUtils.readManyBlobsAsArrayBuffers([blob1, blob2],\n                                                 (result1, result2) => {\n            expect(result1.byteLength).toBe(6);\n            expect(result2.byteLength).toBe(3);\n\n            const dataView1 = new DataView(result1);\n\n            for (let i = 0; i < result1.byteLength; i++) {\n                expect(dataView1.getUint8(i)).toBe(str1.charCodeAt(i));\n            }\n\n            const dataView2 = new DataView(result2);\n\n            for (let i = 0; i < result2.byteLength; i++) {\n                expect(dataView2.getUint8(i)).toBe(str2.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsStrings', function(done) {\n        const blob1 = new Blob(['This is a test.']);\n        const blob2 = new Blob(['hello world']);\n\n        RB.DataUtils.readManyBlobsAsStrings([blob1, blob2],\n                                            (result1, result2) => {\n            expect(typeof result1).toBe('string');\n            expect(typeof result2).toBe('string');\n            expect(result1).toBe('This is a test.');\n            expect(result2).toBe('hello world');\n\n            done();\n        });\n    });\n\n    describe('buildArrayBuffer', function() {\n        it('With int8', function() {\n            const values = [-1, 0, 1];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getInt8(i)).toBe(values[i]);\n            }\n        });\n\n        it('With uint8', function() {\n            const values = [1, 2, 3];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'uint8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getUint8(i)).toBe(values[i]);\n            }\n        });\n\n        describe('With int16', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint16', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With int32', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float64', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8)).toBe(values[i]);\n                }\n            });\n        });\n\n        it('With complex schema', function() {\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int32',\n                    values: [10, 20],\n                    bigEndian: true,\n                },\n                {\n                    type: 'uint8',\n                    values: [100],\n                },\n                {\n                    type: 'uint16',\n                    values: [64],\n                },\n                {\n                    type: 'float64',\n                    values: [1.234],\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(19);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getInt32(0)).toBe(10);\n            expect(dataView.getInt32(4)).toBe(20);\n            expect(dataView.getUint8(8)).toBe(100);\n            expect(dataView.getUint16(9, true)).toBe(64);\n            expect(dataView.getFloat64(11, true)).toEqual(1.234);\n        });\n    });\n\n    it('buildBlob', function(done) {\n        const blob = RB.DataUtils.buildBlob([\n            'abc',\n            [\n                {\n                    type: 'uint8',\n                    values: [1, 2],\n                },\n                {\n                    type: 'uint32',\n                    values: [100],\n                },\n            ],\n            new Blob(['def']),\n        ]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, arrayBuffer => {\n            expect(arrayBuffer.byteLength).toBe(12);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getUint8(0)).toBe('a'.charCodeAt(0));\n            expect(dataView.getUint8(1)).toBe('b'.charCodeAt(0));\n            expect(dataView.getUint8(2)).toBe('c'.charCodeAt(0));\n            expect(dataView.getUint8(3)).toBe(1);\n            expect(dataView.getUint8(4)).toBe(2);\n            expect(dataView.getUint32(5, true)).toBe(100);\n            expect(dataView.getUint8(9)).toBe('d'.charCodeAt(0));\n            expect(dataView.getUint8(10)).toBe('e'.charCodeAt(0));\n            expect(dataView.getUint8(11)).toBe('f'.charCodeAt(0));\n\n            done();\n        });\n    });\n});\n"]}