name: Testing

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Set Cache Key
      run: echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Install Dependencies
      run: |
        python -m pip install pre-commit
        pre-commit install --install-hooks
    - name: Run Pre-Commit
      run: |
        pre-commit run --show-diff-on-failure --color=always --all-files

  Linux:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 15

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version:
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      run: |
        nox --force-color -e tests-3 --install-only

    - name: Test
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-3 -- -vv --log-cli-level=debug tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log
        retention-days: 15

  Windows:
    runs-on: windows-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version:
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      shell: bash
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-3 --install-only

    - name: Test
      shell: bash
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-3 -- -vv --log-cli-level=debug tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log
        retention-days: 15

  macOS:
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        python-version:
          - 3.5
          - 3.6
          - 3.7
          - 3.8
          - 3.9

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Test Requirements
      run: |
        nox --force-color -e tests-3 --install-only

    - name: Test
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-3 -- -vv --log-cli-level=debug tests/

    - name: Create CodeCov Flags
      if: always()
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info)))")

    - name: Upload Project Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},project
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Project
        REPORT_PATH: artifacts/coverage-project.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Tests Code Coverage
      if: always()
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        REPORT_FLAGS: ${{ steps.codecov-flags.outputs.flags }},tests
        REPORT_NAME: ${{ runner.os }}-Py${{ matrix.python-version }}-Tests
        REPORT_PATH: artifacts/coverage-tests.xml
      run: |
        if [ ! -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
          if curl --max-time 30 -L https://codecov.io/bash --output codecov.sh; then
              break
          fi
            n=$((n+1))
            sleep 15
          done
        fi
        if [ -f codecov.sh ]; then
          n=0
          until [ "$n" -ge 5 ]
          do
            if bash codecov.sh -R $(pwd) -n "${REPORT_NAME}" -f "${REPORT_PATH}" -F "${REPORT_FLAGS}"; then
                break
            fi
            n=$((n+1))
            sleep 15
          done
        fi

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: artifacts/runtests-*.log
        retention-days: 15
