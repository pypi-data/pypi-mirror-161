{"version":3,"sources":["BiasRankComponent.tsx","index.tsx"],"names":["BiasRankComponent","state","numClicks","isFocused","width","height","render","name","props","args","size","theme","style","borderStyling","primaryColor","border","outline","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","fill","strokeWidth","stroke","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iQAgBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EACnCC,MAAQ,I,EACRC,OAAS,G,EAETC,OAAS,WAGd,IAAMC,EAAO,EAAKC,MAAMC,KAAX,KACPC,EAAO,EAAKF,MAAMC,KAAX,KAKLE,EAAU,EAAKH,MAAfG,MACFC,EAA6B,GAKnC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKZ,MAAME,UAAYQ,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,wCACUN,EADV,SAEE,4BACEK,MAAOA,EACPK,QAAS,EAAKC,UACdC,SAAU,EAAKX,MAAMW,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SALf,aASA,yBACEnB,MAAOM,EAAK,GACZL,OAAQ,EAAKA,QACb,0BACED,MAAOM,EACPL,OAAQ,EAAKA,OACbO,MApC8B,CAACY,KAAM,eAAgBC,YAAa,EAAGC,OAAO,mB,EA6C9ER,UAAY,WAGlB,EAAKS,UACH,SAAAC,GAAS,MAAK,CAAE1B,UAAW0B,EAAU1B,UAAY,MACjD,kBAAM2B,IAAUC,kBAAkB,EAAK7B,MAAMC,e,EAKzCmB,SAAW,WACjB,EAAKM,SAAS,CAAExB,WAAW,K,EAIrBoB,QAAU,WAChB,EAAKI,SAAS,CAAExB,WAAW,K,yBA7EC4B,KAsFjBC,cAAwBhC,GClGvCiC,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f648ff23.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass BiasRankComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n  public width = 300\n  public height = 30\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const size = this.props.args[\"size\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    const barStyle: React.CSSProperties = {fill: \"rgb(0,0,255)\", strokeWidth: 1, stroke:\"rgb(0,0,0)\"}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n        <svg \n          width={size+10}\n          height={this.height}>\n          <rect \n            width={size} \n            height={this.height}\n            style={barStyle}> \n          </rect>\n        </svg>\n\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(BiasRankComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport BiasRankComponent from \"./BiasRankComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BiasRankComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}