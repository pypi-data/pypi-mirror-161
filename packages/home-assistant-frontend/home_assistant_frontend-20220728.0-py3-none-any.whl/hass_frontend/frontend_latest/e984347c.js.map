{"version":3,"file":"e984347c.js","mappings":";;;;AAOA;;;ACwDA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAKA;;;;;AAKA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAMA;;;;;;AAOA;;AAGA;AACA;AACA;;;AAGA;;AAGA;;;;;;;;;AAgCA;;AAEA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1HA","sources":["webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-updates.ts"],"sourcesContent":["import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical, mdiRefresh } from \"@mdi/js\";\nimport { HassEntities } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { shouldHandleRequestSelectedEvent } from \"../../../common/mwc/handle-request-selected-event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-bar\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-metric\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioSupervisorInfo,\n  HassioSupervisorInfo,\n  reloadSupervisor,\n  setSupervisorOption,\n  SupervisorOptions,\n} from \"../../../data/hassio/supervisor\";\nimport {\n  checkForEntityUpdates,\n  filterUpdateEntitiesWithInstall,\n} from \"../../../data/update\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../dashboard/ha-config-updates\";\n\n@customElement(\"ha-config-section-updates\")\nclass HaConfigSectionUpdates extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _showSkipped = false;\n\n  @state() private _supervisorInfo?: HassioSupervisorInfo;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      fetchHassioSupervisorInfo(this.hass).then((data) => {\n        this._supervisorInfo = data;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    const canInstallUpdates = this._filterUpdateEntitiesWithInstall(\n      this.hass.states,\n      this._showSkipped\n    );\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.updates.caption\")}\n      >\n        <div slot=\"toolbar-icon\">\n          <ha-icon-button\n            .label=${this.hass.localize(\n              \"ui.panel.config.updates.check_updates\"\n            )}\n            .path=${mdiRefresh}\n            @click=${this._checkUpdates}\n          ></ha-icon-button>\n          <ha-button-menu corner=\"BOTTOM_START\" multi>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <ha-check-list-item\n              left\n              @request-selected=${this._toggleSkipped}\n              .selected=${this._showSkipped}\n            >\n              ${this.hass.localize(\"ui.panel.config.updates.show_skipped\")}\n            </ha-check-list-item>\n            ${this._supervisorInfo?.channel !== \"dev\"\n              ? html`\n                  <li divider role=\"separator\"></li>\n                  <mwc-list-item @request-selected=${this._toggleBeta}>\n                    ${this._supervisorInfo?.channel === \"stable\"\n                      ? this.hass.localize(\"ui.panel.config.updates.join_beta\")\n                      : this.hass.localize(\n                          \"ui.panel.config.updates.leave_beta\"\n                        )}\n                  </mwc-list-item>\n                `\n              : \"\"}\n          </ha-button-menu>\n        </div>\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              ${canInstallUpdates.length\n                ? html`\n                    <ha-config-updates\n                      .hass=${this.hass}\n                      .narrow=${this.narrow}\n                      .updateEntities=${canInstallUpdates}\n                      showAll\n                    ></ha-config-updates>\n                  `\n                : html`\n                    <div class=\"no-updates\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.updates.no_updates\"\n                      )}\n                    </div>\n                  `}\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _toggleSkipped(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n\n    this._showSkipped = !this._showSkipped;\n  }\n\n  private async _toggleBeta(\n    ev: CustomEvent<RequestSelectedDetail>\n  ): Promise<void> {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n\n    if (this._supervisorInfo!.channel === \"stable\") {\n      const confirmed = await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.dialogs.join_beta_channel.title\"),\n        text: html`${this.hass.localize(\"ui.dialogs.join_beta_channel.warning\")}\n          <br />\n          <b> ${this.hass.localize(\"ui.dialogs.join_beta_channel.backup\")} </b>\n          <br /><br />\n          ${this.hass.localize(\"ui.dialogs.join_beta_channel.release_items\")}\n          <ul>\n            <li>Home Assistant Core</li>\n            <li>Home Assistant Supervisor</li>\n            <li>Home Assistant Operating System</li>\n          </ul>\n          <br />\n          ${this.hass.localize(\"ui.dialogs.join_beta_channel.confirm\")}`,\n        confirmText: this.hass.localize(\"ui.panel.config.updates.join_beta\"),\n        dismissText: this.hass.localize(\"ui.common.cancel\"),\n      });\n\n      if (!confirmed) {\n        return;\n      }\n    }\n\n    try {\n      const data: Partial<SupervisorOptions> = {\n        channel: this._supervisorInfo!.channel === \"stable\" ? \"beta\" : \"stable\",\n      };\n      await setSupervisorOption(this.hass, data);\n      await reloadSupervisor(this.hass);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  private async _checkUpdates(): Promise<void> {\n    checkForEntityUpdates(this, this.hass);\n  }\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities, showSkipped: boolean) =>\n      filterUpdateEntitiesWithInstall(entities, showSkipped)\n  );\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      max-width: 600px;\n      margin: 0 auto;\n      height: 100%;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      padding: 0;\n    }\n\n    .no-updates {\n      padding: 16px;\n    }\n    li[divider] {\n      border-bottom-color: var(--divider-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-updates\": HaConfigSectionUpdates;\n  }\n}\n"],"names":[],"sourceRoot":""}