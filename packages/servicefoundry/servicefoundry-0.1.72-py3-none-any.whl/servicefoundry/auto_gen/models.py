# generated by datamodel-codegen:
#   filename:  service_component.json
#   timestamp: 2022-07-27T17:23:00+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, PositiveInt, conint, constr


class Command(BaseModel):
    command: Optional[Union[str, List[str]]] = Field(
        None, description="+usage= Overwrite the Entrypoint of the container."
    )
    args: Optional[List[str]] = Field(
        None, description="+usage=Overwrite the CMD of the container."
    )


class Cpu(BaseModel):
    cpu_request: str = Field(
        "200m",
        description="+usage=CPU units request for the component.\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu",
    )
    cpu_limit: str = Field(
        "200m", description="+usage=CPU unit limit for the component."
    )


class DockerFileBuildConfig(BaseModel):
    type: constr(regex=r"dockerfile")
    docker_file_path: str = Field(
        "./Dockerfile",
        description='+usage=The file path of the Dockerfile relative to project root path.\nDefaults to "./Dockerfile".',
    )
    build_context_path: str = Field(
        "./",
        description='+usage=Build context path for the Dockerfile relative to project root path.\nDefaults to "./".',
    )


class Env(BaseModel):
    name: str = Field(..., description="+usage=Env variable name.")
    value: str = Field(..., description="+usage=The value of the environment variable.")


class GithubSource(BaseModel):
    type: constr(regex=r"github")
    repo_url: str = Field(..., description="+usage=The repository URL.")
    ref: str = Field(..., description="+usage=The commit sha, branch name or the tag.")


class Vendor(Enum):
    """
    +usage=GPU vendor. Defaults to "nvidia"
    """

    nvidia = "nvidia"
    amd = "amd"


class Gpu(BaseModel):
    limit: PositiveInt = Field(1, description="+usage=GPU limit for the component.")
    vendor: Vendor = Field(
        "nvidia", description='+usage=GPU vendor. Defaults to "nvidia"'
    )


class HttpHeader(BaseModel):
    name: str
    value: str


class HttpProbe(BaseModel):
    """
    +usage=Instructions for assessing container health by executing an HTTP GET request.
    """

    type: constr(regex=r"http")
    path: str = Field(
        ...,
        description="+usage=The endpoint, relative to the port, to which the HTTP GET request should be directed.",
    )
    port: conint(ge=0, le=65535) = Field(
        ...,
        description="+usage=The TCP socket within the container to which the HTTP GET request should be directed.",
    )
    host: Optional[str] = None
    scheme: str = "http"
    http_headers: Optional[List[HttpHeader]] = None


class Image(BaseModel):
    registry_fqn: Optional[str] = Field(
        None,
        description="+usage=FQN of the container registry. If you have registered a private\nregistry with us, add the FQN of the registry here.",
    )
    image: str = Field(
        ...,
        description="+usage=The image URI. This should be relative to the registry if one was\nset using the `registry_fqn` field. Public Dockerhub images can be referenced\ndirectly without registry info. Ex:- `image: postgres:14.4`",
    )


class LocalSource(BaseModel):
    type: constr(regex=r"local")
    project_root_path: str = Field("./", description="+usage=Local project root path.")


class Memory(BaseModel):
    memory_request: str = Field(
        "256Mi",
        description="+usage=Memory units request for the component.\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory",
    )
    memory_limit: str = Field(
        "256Mi", description="+usage=Memory units limit for the component."
    )


class Protocol(Enum):
    """
    +usage=Protocol for the port.
    """

    tcp = "tcp"
    udp = "udp"


class Port(BaseModel):
    protocol: Protocol = Field("tcp", description="+usage=Protocol for the port.")
    port: conint(ge=0, le=65535) = Field(
        80, description="+usage=Port number to expose."
    )
    target_port: conint(ge=0) = Field(
        80,
        description="+usage=Target port on the pod where the requests will be routed.",
    )
    name: Optional[str] = Field(None, description="+usage=Name of the port.")


class RemoteSource(BaseModel):
    type: constr(regex=r"remote")
    remote_uri: str


class ImagePullPolicy(Enum):
    """
        +usage=Image pull policy for the service.
    https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    """

    IfNotPresent = "IfNotPresent"
    Never = "Never"
    Always = "Always"


class TfyPythonBuildPackBuildConfig(BaseModel):
    type: constr(regex=r"tfy-python-buildpack")
    python_version: str
    build_context_path: str = "./"


class Build(BaseModel):
    source: Union[RemoteSource, GithubSource, LocalSource] = Field(
        ...,
        description="+usage=Configure code source to be used for building the image.",
    )
    config: Union[DockerFileBuildConfig, TfyPythonBuildPackBuildConfig] = Field(
        ..., description="+usage=Image build config."
    )


class HealthProbe(BaseModel):
    config: HttpProbe
    initial_delay_seconds: conint(ge=0) = Field(
        0,
        description="+usage=Number of seconds after the container is started before the first probe is initiated.",
    )
    period_seconds: conint(ge=0) = Field(
        10, description="+usage=How often, in seconds, to execute the probe."
    )
    timeout_seconds: conint(ge=0) = Field(
        1, description="+usage=Number of seconds after which the probe times out."
    )
    success_threshold: conint(ge=0) = Field(
        1,
        description="+usage=Minimum consecutive successes for the probe to be considered successful after having failed.",
    )
    failure_threshold: conint(ge=0) = Field(
        3,
        description="+usage=Number of consecutive failures required to determine the container is not alive (liveness probe) or not ready (readiness probe).",
    )


class Service(Command, Cpu, Memory):
    type: constr(regex=r"service")
    build: Optional[Build] = None
    image: Optional[Image] = None
    replicas: conint(ge=1, lt=5) = Field(
        1, description="+usage=Number of service instances/replicas you want to run."
    )
    image_pull_policy: ImagePullPolicy = Field(
        "IfNotPresent",
        description="+usage=Image pull policy for the service.\nhttps://kubernetes.io/docs/concepts/containers/images/#image-pull-policy",
    )
    gpu: Optional[Gpu] = None
    env: Optional[List[Env]] = Field(
        None,
        description="+usage=Configure environment variables to be injected in the service.",
    )
    ports: Optional[List[Port]] = Field(
        None, description="+usage=Which ports do you want customer traffic sent to."
    )
    liveness_probe: Optional[HealthProbe] = None
    readiness_probe: Optional[HealthProbe] = None
