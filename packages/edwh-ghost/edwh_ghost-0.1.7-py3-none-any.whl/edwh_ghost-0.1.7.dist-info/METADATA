Metadata-Version: 2.1
Name: edwh-ghost
Version: 0.1.7
Summary: Python client for Ghost API v3/v4/v5
Home-page: https://github.com/educationwarehouse/edwh-ghost
Author: Education Warehouse
Author-email: remco.b@educationwarehouse.nl
License: MIT
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: certifi (==2022.5.18.1)
Requires-Dist: charset-normalizer (==2.1.0)
Requires-Dist: idna (==3.3)
Requires-Dist: multidict (==6.0.2)
Requires-Dist: pyjwt (==2.4.0)
Requires-Dist: requests (==2.28.1)
Requires-Dist: urllib3 (==1.26.11)
Requires-Dist: yarl (==1.7.2)
Provides-Extra: dev
Requires-Dist: attrs (==21.4.0) ; extra == 'dev'
Requires-Dist: black (==22.3.0) ; extra == 'dev'
Requires-Dist: bleach (==5.0.1) ; extra == 'dev'
Requires-Dist: build (==0.8.0) ; extra == 'dev'
Requires-Dist: certifi (==2022.6.15) ; extra == 'dev'
Requires-Dist: cffi (==1.15.1) ; extra == 'dev'
Requires-Dist: charset-normalizer (==2.1.0) ; extra == 'dev'
Requires-Dist: click (==8.1.3) ; extra == 'dev'
Requires-Dist: commonmark (==0.9.1) ; extra == 'dev'
Requires-Dist: coverage (==6.4.1) ; extra == 'dev'
Requires-Dist: cryptography (==37.0.4) ; extra == 'dev'
Requires-Dist: docutils (==0.19) ; extra == 'dev'
Requires-Dist: faker (==13.12.1) ; extra == 'dev'
Requires-Dist: idna (==3.3) ; extra == 'dev'
Requires-Dist: importlib-metadata (==4.12.0) ; extra == 'dev'
Requires-Dist: iniconfig (==1.1.1) ; extra == 'dev'
Requires-Dist: jeepney (==0.8.0) ; extra == 'dev'
Requires-Dist: keyring (==23.7.0) ; extra == 'dev'
Requires-Dist: mypy-extensions (==0.4.3) ; extra == 'dev'
Requires-Dist: packaging (==21.3) ; extra == 'dev'
Requires-Dist: pathspec (==0.9.0) ; extra == 'dev'
Requires-Dist: pep517 (==0.12.0) ; extra == 'dev'
Requires-Dist: pip-tools (==6.6.2) ; extra == 'dev'
Requires-Dist: pkginfo (==1.8.3) ; extra == 'dev'
Requires-Dist: platformdirs (==2.5.2) ; extra == 'dev'
Requires-Dist: pluggy (==1.0.0) ; extra == 'dev'
Requires-Dist: py (==1.11.0) ; extra == 'dev'
Requires-Dist: pycparser (==2.21) ; extra == 'dev'
Requires-Dist: pygments (==2.12.0) ; extra == 'dev'
Requires-Dist: pyparsing (==3.0.9) ; extra == 'dev'
Requires-Dist: pytest (==7.1.2) ; extra == 'dev'
Requires-Dist: python-dateutil (==2.8.2) ; extra == 'dev'
Requires-Dist: python-dotenv (==0.20.0) ; extra == 'dev'
Requires-Dist: readme-renderer (==35.0) ; extra == 'dev'
Requires-Dist: requests (==2.28.1) ; extra == 'dev'
Requires-Dist: requests-toolbelt (==0.9.1) ; extra == 'dev'
Requires-Dist: rfc3986 (==2.0.0) ; extra == 'dev'
Requires-Dist: rich (==12.5.1) ; extra == 'dev'
Requires-Dist: secretstorage (==3.3.2) ; extra == 'dev'
Requires-Dist: six (==1.16.0) ; extra == 'dev'
Requires-Dist: tomli (==2.0.1) ; extra == 'dev'
Requires-Dist: twine (==4.0.1) ; extra == 'dev'
Requires-Dist: typing-extensions (==4.2.0) ; extra == 'dev'
Requires-Dist: urllib3 (==1.26.11) ; extra == 'dev'
Requires-Dist: webencodings (==0.5.1) ; extra == 'dev'
Requires-Dist: wheel (==0.37.1) ; extra == 'dev'
Requires-Dist: zipp (==3.8.1) ; extra == 'dev'

# EDWH Ghost Client

This Client is compatible with v3 and v4 of the Ghost CMS [Admin](https://ghost.org/docs/admin-api)
and [Content](https://ghost.org/docs/content-api/) API's.

### Installation

```bash
pip install edwh-ghost
```

### Usage

The `GhostAdmin` class can be instantiated as follows:

```python
from ghost import GhostAdmin
from dotenv import dotenv_values

config = dotenv_values(".env")

# .env can be used, but config values can also be simply hardcoded
ga = GhostAdmin(
    config["GHOST_SITE"],
    adminAPIKey=config["GHOST_ADMIN_KEY"],
    contentAPIKey=config["GHOST_CONTENT_KEY"],
    api_version="v4",  # works like a train
)
print(ga.site())
```

If no admin API key is available, the `GhostContent` class can be used, which has read-only access to public endpoints.

After creating a `GhostClient` instance, the different Resources can be used:

```python
from ghost.resources import *

posts: PostResource = ga.posts

# READ
multiple = posts(limit=5)  # Ghost Result Set
# alias for
posts.get(limit=5)  # Ghost Result Set

some_post = posts.get("some_id")  # Ghost Result 

for post in posts.paginate():
    # iterate without limit
    print(post)  # Ghost Result

# UPDATE
some_post.update({...})  # response dict  
# alias:
posts.update("some_id", {...})  # response dict  
# bulk:
multiple.update({...})  # response dict 

# DELETE
some_post.delete()  # bool of success
# alias:
posts.delete("some_id")  # bool of success
# bulk:
multiple.delete()  # list of bools of success

# CREATE
# one:
posts.create(title="...", etc="...")  # response dict
# bulk:
posts.create({...}, {...})  # list of response dicts

# some resources are read only:
authors: AuthorResource = ga.authors

authors()  # Ghost Result Set

authors.delete()  # error
```

# Available Resources:

| Resource Class[^1] | Ghost Path | Method[^2]                                     | Related Tests                                               | Admin?  | Content? |
|--------------------|------------|------------------------------------------------|-------------------------------------------------------------|---------|----------|
| Posts              | /posts     | ghost.posts(), ghost.post()                    | test_1_posts, test_10_ghost_content, test_11_ghost_paginate | &check; | &check;  |
| Pages              | /pages     | ghost.pages(), ghost.page()                    | test_2_pages                                                | &check; | &check;  |
| Authors            | /authors   | ghost.authors(), ghost.author()                | test_4_authors                                              | ~[^3]   | &check;  |
| Tags               | /tags      | ghost.tags(), ghost.tag()                      | test_3_tags                                                 | &check; | &check;  |
| Members            | /members   | ghost.members(), ghost.member()                | test_9_members                                              | &check; | &cross;  |
| Images             | /images    | ghost.images.upload()                          | test_6_images                                               | &check; | &cross;  |
| Themes             | /themes    | ghost.themes.upload(), ghost.themes.activate() | test_7_themes                                               | &check; | &cross;  |
| Site               | /site      | ghost.site()                                   | test_8_site_and_settings                                    | &check; | &cross;  |
| Settings           | /settings  | ghost.settings()                               | test_8_site_and_settings                                    | ~[^3]   | &check;  |
| Users              | /users     | ghost.user(), ghost.users()                    | test_12_users, test_13_users_content                        | &check; | &cross;  |

[^1]: these classes live in `ghost.resources`
[^2]: where `ghost` is an instance of a `GhostClient` subclass (`GhostContent` or `GhostAdmin`)
[^3]: Content APIs are also accessible through the `GhostAdmin` client, they are however read-only

## Unavailable Resources:

| Resource Name | Ghost Path | Admin?  | Content? | Reason         |
|---------------|------------|---------|----------|----------------|
| Tiers         | /tiers     | &check; | &check;  | Testing Failed | <!-- test_5_tiers -->
| Offers        | /offers    | &check; | &cross;  | Testing Failed |
| Webhooks      | /webhooks  | &check; | &cross;  | TODO           |
