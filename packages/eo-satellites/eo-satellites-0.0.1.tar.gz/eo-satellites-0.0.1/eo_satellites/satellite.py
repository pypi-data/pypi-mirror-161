# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_satellite.ipynb.

# %% auto 0
__all__ = ['acceptable_key_list', 'get_attrs', 'Satellite']

# %% ../nbs/00_satellite.ipynb 4
from fastcore.all import store_attr
from datetime import datetime

# %% ../nbs/00_satellite.ipynb 5
def get_attrs(cls): 
    """helper function to get attributes from a class"""
    return [i for i in cls.__dict__.keys() if i[:1] != '_']

# %% ../nbs/00_satellite.ipynb 6
# list of optional info for our satellite class
acceptable_key_list = ['orbit_type', 'provider', 'description']
# some extra annoying stuff just to play around with doc rendering
class Satellite:
    """A class for logging and viewing information about earth observation satellites"""
    def __init__(self, 
                 name: str, # the name of the satellite
                 launch_date: str, # the date of launch (maybe start of operations)
                 sensor_type:str='Multispectral', # type of sensor (Multispectral, radar, lidar) 
                 is_active:bool=False, # emits its own radiation or not?
                 end_date:str=None # if it has one, when it died
                 ,**kwargs): # other info
        store_attr()
        for k in kwargs.keys():
            if k in acceptable_key_list:
                self.__setattr__(k, kwargs[k])
                
        if isinstance(launch_date, str):
            self.launch_date = datetime(*[int(i) for i in launch_date.split('-')]) 
            
    def __str__(self): 
        if not self.end_date: return f'{self.name}, rocking since {self.launch_date}'
        else                : return f'{self.name}, rocked from {self.launch_date} to {self.end_date}, rest in peace'
    def __repr__(self): return self.__str__()

    def info(self):
        for attr in get_attrs(self):
            print(f'{attr :>12}',': ', self.__dict__[attr])
