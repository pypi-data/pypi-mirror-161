# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class V1GetConfigResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ga_id': 'str',
        'hotjar_side_id': 'str',
        'sentry_dsn': 'str',
        'stripe_publishable_key': 'str'
    }

    attribute_map = {
        'ga_id': 'gaId',
        'hotjar_side_id': 'hotjarSideId',
        'sentry_dsn': 'sentryDsn',
        'stripe_publishable_key': 'stripePublishableKey'
    }

    def __init__(self, ga_id: 'str' = None, hotjar_side_id: 'str' = None, sentry_dsn: 'str' = None, stripe_publishable_key: 'str' = None, _configuration=None):  # noqa: E501
        """V1GetConfigResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ga_id = None
        self._hotjar_side_id = None
        self._sentry_dsn = None
        self._stripe_publishable_key = None
        self.discriminator = None

        if ga_id is not None:
            self.ga_id = ga_id
        if hotjar_side_id is not None:
            self.hotjar_side_id = hotjar_side_id
        if sentry_dsn is not None:
            self.sentry_dsn = sentry_dsn
        if stripe_publishable_key is not None:
            self.stripe_publishable_key = stripe_publishable_key

    @property
    def ga_id(self) -> 'str':
        """Gets the ga_id of this V1GetConfigResponse.  # noqa: E501


        :return: The ga_id of this V1GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._ga_id

    @ga_id.setter
    def ga_id(self, ga_id: 'str'):
        """Sets the ga_id of this V1GetConfigResponse.


        :param ga_id: The ga_id of this V1GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._ga_id = ga_id

    @property
    def hotjar_side_id(self) -> 'str':
        """Gets the hotjar_side_id of this V1GetConfigResponse.  # noqa: E501


        :return: The hotjar_side_id of this V1GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._hotjar_side_id

    @hotjar_side_id.setter
    def hotjar_side_id(self, hotjar_side_id: 'str'):
        """Sets the hotjar_side_id of this V1GetConfigResponse.


        :param hotjar_side_id: The hotjar_side_id of this V1GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._hotjar_side_id = hotjar_side_id

    @property
    def sentry_dsn(self) -> 'str':
        """Gets the sentry_dsn of this V1GetConfigResponse.  # noqa: E501


        :return: The sentry_dsn of this V1GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._sentry_dsn

    @sentry_dsn.setter
    def sentry_dsn(self, sentry_dsn: 'str'):
        """Sets the sentry_dsn of this V1GetConfigResponse.


        :param sentry_dsn: The sentry_dsn of this V1GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._sentry_dsn = sentry_dsn

    @property
    def stripe_publishable_key(self) -> 'str':
        """Gets the stripe_publishable_key of this V1GetConfigResponse.  # noqa: E501


        :return: The stripe_publishable_key of this V1GetConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._stripe_publishable_key

    @stripe_publishable_key.setter
    def stripe_publishable_key(self, stripe_publishable_key: 'str'):
        """Sets the stripe_publishable_key of this V1GetConfigResponse.


        :param stripe_publishable_key: The stripe_publishable_key of this V1GetConfigResponse.  # noqa: E501
        :type: str
        """

        self._stripe_publishable_key = stripe_publishable_key

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetConfigResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1GetConfigResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1GetConfigResponse') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GetConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
