# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class Externalv1DatastoreSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'fsx_spec': 'V1DatastoreFSxSpec',
        'size_mib': 'int',
        'source': 'str',
        'source_type': 'V1DatastoreSourceType',
        'uploaded_at': 'datetime',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'fsx_spec': 'fsxSpec',
        'size_mib': 'sizeMib',
        'source': 'source',
        'source_type': 'sourceType',
        'uploaded_at': 'uploadedAt',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, cluster_id: 'str' = None, fsx_spec: 'V1DatastoreFSxSpec' = None, size_mib: 'int' = None, source: 'str' = None, source_type: 'V1DatastoreSourceType' = None, uploaded_at: 'datetime' = None, user_id: 'str' = None, version: 'int' = None, _configuration=None):  # noqa: E501
        """Externalv1DatastoreSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_id = None
        self._fsx_spec = None
        self._size_mib = None
        self._source = None
        self._source_type = None
        self._uploaded_at = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if fsx_spec is not None:
            self.fsx_spec = fsx_spec
        if size_mib is not None:
            self.size_mib = size_mib
        if source is not None:
            self.source = source
        if source_type is not None:
            self.source_type = source_type
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The cluster_id of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this Externalv1DatastoreSpec.


        :param cluster_id: The cluster_id of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def fsx_spec(self) -> 'V1DatastoreFSxSpec':
        """Gets the fsx_spec of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The fsx_spec of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: V1DatastoreFSxSpec
        """
        return self._fsx_spec

    @fsx_spec.setter
    def fsx_spec(self, fsx_spec: 'V1DatastoreFSxSpec'):
        """Sets the fsx_spec of this Externalv1DatastoreSpec.


        :param fsx_spec: The fsx_spec of this Externalv1DatastoreSpec.  # noqa: E501
        :type: V1DatastoreFSxSpec
        """

        self._fsx_spec = fsx_spec

    @property
    def size_mib(self) -> 'int':
        """Gets the size_mib of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The size_mib of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: int
        """
        return self._size_mib

    @size_mib.setter
    def size_mib(self, size_mib: 'int'):
        """Sets the size_mib of this Externalv1DatastoreSpec.


        :param size_mib: The size_mib of this Externalv1DatastoreSpec.  # noqa: E501
        :type: int
        """

        self._size_mib = size_mib

    @property
    def source(self) -> 'str':
        """Gets the source of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The source of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: 'str'):
        """Sets the source of this Externalv1DatastoreSpec.


        :param source: The source of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_type(self) -> 'V1DatastoreSourceType':
        """Gets the source_type of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The source_type of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: V1DatastoreSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: 'V1DatastoreSourceType'):
        """Sets the source_type of this Externalv1DatastoreSpec.


        :param source_type: The source_type of this Externalv1DatastoreSpec.  # noqa: E501
        :type: V1DatastoreSourceType
        """

        self._source_type = source_type

    @property
    def uploaded_at(self) -> 'datetime':
        """Gets the uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at: 'datetime'):
        """Sets the uploaded_at of this Externalv1DatastoreSpec.


        :param uploaded_at: The uploaded_at of this Externalv1DatastoreSpec.  # noqa: E501
        :type: datetime
        """

        self._uploaded_at = uploaded_at

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The user_id of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this Externalv1DatastoreSpec.


        :param user_id: The user_id of this Externalv1DatastoreSpec.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self) -> 'int':
        """Gets the version of this Externalv1DatastoreSpec.  # noqa: E501


        :return: The version of this Externalv1DatastoreSpec.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: 'int'):
        """Sets the version of this Externalv1DatastoreSpec.


        :param version: The version of this Externalv1DatastoreSpec.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Externalv1DatastoreSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Externalv1DatastoreSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Externalv1DatastoreSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'Externalv1DatastoreSpec') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, Externalv1DatastoreSpec):
            return True

        return self.to_dict() != other.to_dict()
