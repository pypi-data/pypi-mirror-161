# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class V1CreateRunRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'local_dir': 'bool',
        'name': 'str',
        'spec': 'V1RunSpec'
    }

    attribute_map = {
        'description': 'description',
        'local_dir': 'localDir',
        'name': 'name',
        'spec': 'spec'
    }

    def __init__(self, description: 'str' = None, local_dir: 'bool' = None, name: 'str' = None, spec: 'V1RunSpec' = None, _configuration=None):  # noqa: E501
        """V1CreateRunRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._local_dir = None
        self._name = None
        self._spec = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if local_dir is not None:
            self.local_dir = local_dir
        if name is not None:
            self.name = name
        if spec is not None:
            self.spec = spec

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CreateRunRequest.  # noqa: E501


        :return: The description of this V1CreateRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CreateRunRequest.


        :param description: The description of this V1CreateRunRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def local_dir(self) -> 'bool':
        """Gets the local_dir of this V1CreateRunRequest.  # noqa: E501

        Indicates that the client wishes to upload the directory that has the source code. In this case, run status is populated with the presigned URL and the run spec is set by the server to the S3 tarball that holds the sourcecode.  # noqa: E501

        :return: The local_dir of this V1CreateRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._local_dir

    @local_dir.setter
    def local_dir(self, local_dir: 'bool'):
        """Sets the local_dir of this V1CreateRunRequest.

        Indicates that the client wishes to upload the directory that has the source code. In this case, run status is populated with the presigned URL and the run spec is set by the server to the S3 tarball that holds the sourcecode.  # noqa: E501

        :param local_dir: The local_dir of this V1CreateRunRequest.  # noqa: E501
        :type: bool
        """

        self._local_dir = local_dir

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CreateRunRequest.  # noqa: E501


        :return: The name of this V1CreateRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CreateRunRequest.


        :param name: The name of this V1CreateRunRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def spec(self) -> 'V1RunSpec':
        """Gets the spec of this V1CreateRunRequest.  # noqa: E501


        :return: The spec of this V1CreateRunRequest.  # noqa: E501
        :rtype: V1RunSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1RunSpec'):
        """Sets the spec of this V1CreateRunRequest.


        :param spec: The spec of this V1CreateRunRequest.  # noqa: E501
        :type: V1RunSpec
        """

        self._spec = spec

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CreateRunRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CreateRunRequest') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CreateRunRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1CreateRunRequest') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1CreateRunRequest):
            return True

        return self.to_dict() != other.to_dict()
