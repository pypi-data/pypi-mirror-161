# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class Externalv1ImageSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependency_file_info': 'V1DependencyFileInfo',
        'dockerfile': 'str',
        'framework': 'str'
    }

    attribute_map = {
        'dependency_file_info': 'dependencyFileInfo',
        'dockerfile': 'dockerfile',
        'framework': 'framework'
    }

    def __init__(self, dependency_file_info: 'V1DependencyFileInfo' = None, dockerfile: 'str' = None, framework: 'str' = None, _configuration=None):  # noqa: E501
        """Externalv1ImageSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dependency_file_info = None
        self._dockerfile = None
        self._framework = None
        self.discriminator = None

        if dependency_file_info is not None:
            self.dependency_file_info = dependency_file_info
        if dockerfile is not None:
            self.dockerfile = dockerfile
        if framework is not None:
            self.framework = framework

    @property
    def dependency_file_info(self) -> 'V1DependencyFileInfo':
        """Gets the dependency_file_info of this Externalv1ImageSpec.  # noqa: E501


        :return: The dependency_file_info of this Externalv1ImageSpec.  # noqa: E501
        :rtype: V1DependencyFileInfo
        """
        return self._dependency_file_info

    @dependency_file_info.setter
    def dependency_file_info(self, dependency_file_info: 'V1DependencyFileInfo'):
        """Sets the dependency_file_info of this Externalv1ImageSpec.


        :param dependency_file_info: The dependency_file_info of this Externalv1ImageSpec.  # noqa: E501
        :type: V1DependencyFileInfo
        """

        self._dependency_file_info = dependency_file_info

    @property
    def dockerfile(self) -> 'str':
        """Gets the dockerfile of this Externalv1ImageSpec.  # noqa: E501


        :return: The dockerfile of this Externalv1ImageSpec.  # noqa: E501
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile: 'str'):
        """Sets the dockerfile of this Externalv1ImageSpec.


        :param dockerfile: The dockerfile of this Externalv1ImageSpec.  # noqa: E501
        :type: str
        """

        self._dockerfile = dockerfile

    @property
    def framework(self) -> 'str':
        """Gets the framework of this Externalv1ImageSpec.  # noqa: E501

        name & tag of the base image (containing any runtime / system dependencies) which are used when building the experiment image.  # noqa: E501

        :return: The framework of this Externalv1ImageSpec.  # noqa: E501
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework: 'str'):
        """Sets the framework of this Externalv1ImageSpec.

        name & tag of the base image (containing any runtime / system dependencies) which are used when building the experiment image.  # noqa: E501

        :param framework: The framework of this Externalv1ImageSpec.  # noqa: E501
        :type: str
        """

        self._framework = framework

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Externalv1ImageSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'Externalv1ImageSpec') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Externalv1ImageSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'Externalv1ImageSpec') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, Externalv1ImageSpec):
            return True

        return self.to_dict() != other.to_dict()
