# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class V1UpdateSessionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost': 'float',
        'created_at': 'datetime',
        'hourly_cost': 'float',
        'id': 'str',
        'name': 'str',
        'spec': 'V1SessionSpec',
        'status': 'V1SessionStatus'
    }

    attribute_map = {
        'cost': 'cost',
        'created_at': 'createdAt',
        'hourly_cost': 'hourlyCost',
        'id': 'id',
        'name': 'name',
        'spec': 'spec',
        'status': 'status'
    }

    def __init__(self, cost: 'float' = None, created_at: 'datetime' = None, hourly_cost: 'float' = None, id: 'str' = None, name: 'str' = None, spec: 'V1SessionSpec' = None, status: 'V1SessionStatus' = None, _configuration=None):  # noqa: E501
        """V1UpdateSessionResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cost = None
        self._created_at = None
        self._hourly_cost = None
        self._id = None
        self._name = None
        self._spec = None
        self._status = None
        self.discriminator = None

        if cost is not None:
            self.cost = cost
        if created_at is not None:
            self.created_at = created_at
        if hourly_cost is not None:
            self.hourly_cost = hourly_cost
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status

    @property
    def cost(self) -> 'float':
        """Gets the cost of this V1UpdateSessionResponse.  # noqa: E501


        :return: The cost of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: 'float'):
        """Sets the cost of this V1UpdateSessionResponse.


        :param cost: The cost of this V1UpdateSessionResponse.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def created_at(self) -> 'datetime':
        """Gets the created_at of this V1UpdateSessionResponse.  # noqa: E501


        :return: The created_at of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: 'datetime'):
        """Sets the created_at of this V1UpdateSessionResponse.


        :param created_at: The created_at of this V1UpdateSessionResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def hourly_cost(self) -> 'float':
        """Gets the hourly_cost of this V1UpdateSessionResponse.  # noqa: E501


        :return: The hourly_cost of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: float
        """
        return self._hourly_cost

    @hourly_cost.setter
    def hourly_cost(self, hourly_cost: 'float'):
        """Sets the hourly_cost of this V1UpdateSessionResponse.


        :param hourly_cost: The hourly_cost of this V1UpdateSessionResponse.  # noqa: E501
        :type: float
        """

        self._hourly_cost = hourly_cost

    @property
    def id(self) -> 'str':
        """Gets the id of this V1UpdateSessionResponse.  # noqa: E501


        :return: The id of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1UpdateSessionResponse.


        :param id: The id of this V1UpdateSessionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1UpdateSessionResponse.  # noqa: E501


        :return: The name of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1UpdateSessionResponse.


        :param name: The name of this V1UpdateSessionResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def spec(self) -> 'V1SessionSpec':
        """Gets the spec of this V1UpdateSessionResponse.  # noqa: E501


        :return: The spec of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: V1SessionSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'V1SessionSpec'):
        """Sets the spec of this V1UpdateSessionResponse.


        :param spec: The spec of this V1UpdateSessionResponse.  # noqa: E501
        :type: V1SessionSpec
        """

        self._spec = spec

    @property
    def status(self) -> 'V1SessionStatus':
        """Gets the status of this V1UpdateSessionResponse.  # noqa: E501


        :return: The status of this V1UpdateSessionResponse.  # noqa: E501
        :rtype: V1SessionStatus
        """
        return self._status

    @status.setter
    def status(self, status: 'V1SessionStatus'):
        """Sets the status of this V1UpdateSessionResponse.


        :param status: The status of this V1UpdateSessionResponse.  # noqa: E501
        :type: V1SessionStatus
        """

        self._status = status

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UpdateSessionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UpdateSessionResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UpdateSessionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1UpdateSessionResponse') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1UpdateSessionResponse):
            return True

        return self.to_dict() != other.to_dict()
