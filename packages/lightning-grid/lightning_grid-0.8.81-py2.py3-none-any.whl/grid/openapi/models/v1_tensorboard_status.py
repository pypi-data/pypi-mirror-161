# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from grid.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from grid.openapi.models import *

class V1TensorboardStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'phase': 'V1TensorboardState',
        'updated_at': 'datetime',
        'url': 'str'
    }

    attribute_map = {
        'message': 'message',
        'phase': 'phase',
        'updated_at': 'updatedAt',
        'url': 'url'
    }

    def __init__(self, message: 'str' = None, phase: 'V1TensorboardState' = None, updated_at: 'datetime' = None, url: 'str' = None, _configuration=None):  # noqa: E501
        """V1TensorboardStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._phase = None
        self._updated_at = None
        self._url = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if phase is not None:
            self.phase = phase
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url

    @property
    def message(self) -> 'str':
        """Gets the message of this V1TensorboardStatus.  # noqa: E501


        :return: The message of this V1TensorboardStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: 'str'):
        """Sets the message of this V1TensorboardStatus.


        :param message: The message of this V1TensorboardStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phase(self) -> 'V1TensorboardState':
        """Gets the phase of this V1TensorboardStatus.  # noqa: E501


        :return: The phase of this V1TensorboardStatus.  # noqa: E501
        :rtype: V1TensorboardState
        """
        return self._phase

    @phase.setter
    def phase(self, phase: 'V1TensorboardState'):
        """Sets the phase of this V1TensorboardStatus.


        :param phase: The phase of this V1TensorboardStatus.  # noqa: E501
        :type: V1TensorboardState
        """

        self._phase = phase

    @property
    def updated_at(self) -> 'datetime':
        """Gets the updated_at of this V1TensorboardStatus.  # noqa: E501


        :return: The updated_at of this V1TensorboardStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: 'datetime'):
        """Sets the updated_at of this V1TensorboardStatus.


        :param updated_at: The updated_at of this V1TensorboardStatus.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self) -> 'str':
        """Gets the url of this V1TensorboardStatus.  # noqa: E501


        :return: The url of this V1TensorboardStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: 'str'):
        """Sets the url of this V1TensorboardStatus.


        :param url: The url of this V1TensorboardStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TensorboardStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1TensorboardStatus') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TensorboardStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1TensorboardStatus') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1TensorboardStatus):
            return True

        return self.to_dict() != other.to_dict()
