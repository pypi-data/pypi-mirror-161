# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, access_control_policy_reference_lists=None, api_version=None, categories=None, directory_service_users=None, display_name=None, id=None, identity_provider_users=None, metadata=None, owner_reference=None, project_reference=None, project_reference_lists=None, state=None, user_id=None, user_name=None, user_type=None):
        if access_control_policy_reference_lists and not isinstance(access_control_policy_reference_lists, list):
            raise TypeError("Expected argument 'access_control_policy_reference_lists' to be a list")
        pulumi.set(__self__, "access_control_policy_reference_lists", access_control_policy_reference_lists)
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if directory_service_users and not isinstance(directory_service_users, list):
            raise TypeError("Expected argument 'directory_service_users' to be a list")
        pulumi.set(__self__, "directory_service_users", directory_service_users)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_provider_users and not isinstance(identity_provider_users, list):
            raise TypeError("Expected argument 'identity_provider_users' to be a list")
        pulumi.set(__self__, "identity_provider_users", identity_provider_users)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if project_reference_lists and not isinstance(project_reference_lists, list):
            raise TypeError("Expected argument 'project_reference_lists' to be a list")
        pulumi.set(__self__, "project_reference_lists", project_reference_lists)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="accessControlPolicyReferenceLists")
    def access_control_policy_reference_lists(self) -> Sequence['outputs.GetUserAccessControlPolicyReferenceListResult']:
        return pulumi.get(self, "access_control_policy_reference_lists")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        * `state`: - The state of the entity.
        * `name`: - The name of the user.
        * `user_type`: - The name of the user.
        * `display_name`: - The display name of the user (common name) provided by the directory service.
        * `project_reference_list`: - A list of projects the user is part of. See #reference for more details.
        * `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.
        * `directory_service_user`: - (Optional) The directory service user configuration. See below for more information.
        * `identity_provider_user`: - (Optional) (Optional) The identity provider user configuration. See below for more information.
        * `categories`: - (Optional) Categories for the Access Control Policy.
        * `project_reference`: - (Optional) The reference to a project.
        * `owner_reference`: - (Optional) The reference to a user.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetUserCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="directoryServiceUsers")
    def directory_service_users(self) -> Sequence['outputs.GetUserDirectoryServiceUserResult']:
        return pulumi.get(self, "directory_service_users")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviderUsers")
    def identity_provider_users(self) -> Sequence['outputs.GetUserIdentityProviderUserResult']:
        return pulumi.get(self, "identity_provider_users")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="projectReferenceLists")
    def project_reference_lists(self) -> Sequence['outputs.GetUserProjectReferenceListResult']:
        return pulumi.get(self, "project_reference_lists")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        return pulumi.get(self, "user_type")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            access_control_policy_reference_lists=self.access_control_policy_reference_lists,
            api_version=self.api_version,
            categories=self.categories,
            directory_service_users=self.directory_service_users,
            display_name=self.display_name,
            id=self.id,
            identity_provider_users=self.identity_provider_users,
            metadata=self.metadata,
            owner_reference=self.owner_reference,
            project_reference=self.project_reference,
            project_reference_lists=self.project_reference_lists,
            state=self.state,
            user_id=self.user_id,
            user_name=self.user_name,
            user_type=self.user_type)


def get_user(categories: Optional[Sequence[pulumi.InputType['GetUserCategoryArgs']]] = None,
             owner_reference: Optional[Mapping[str, str]] = None,
             project_reference: Optional[Mapping[str, str]] = None,
             user_id: Optional[str] = None,
             user_name: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Provides a datasource to retrieve a user based on the input parameters.
    """
    __args__ = dict()
    __args__['categories'] = categories
    __args__['ownerReference'] = owner_reference
    __args__['projectReference'] = project_reference
    __args__['userId'] = user_id
    __args__['userName'] = user_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nutanix:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        access_control_policy_reference_lists=__ret__.access_control_policy_reference_lists,
        api_version=__ret__.api_version,
        categories=__ret__.categories,
        directory_service_users=__ret__.directory_service_users,
        display_name=__ret__.display_name,
        id=__ret__.id,
        identity_provider_users=__ret__.identity_provider_users,
        metadata=__ret__.metadata,
        owner_reference=__ret__.owner_reference,
        project_reference=__ret__.project_reference,
        project_reference_lists=__ret__.project_reference_lists,
        state=__ret__.state,
        user_id=__ret__.user_id,
        user_name=__ret__.user_name,
        user_type=__ret__.user_type)


@_utilities.lift_output_func(get_user)
def get_user_output(categories: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUserCategoryArgs']]]]] = None,
                    owner_reference: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                    project_reference: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                    user_id: Optional[pulumi.Input[Optional[str]]] = None,
                    user_name: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    Provides a datasource to retrieve a user based on the input parameters.
    """
    ...
