# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUsersResult',
    'AwaitableGetUsersResult',
    'get_users',
    'get_users_output',
]

@pulumi.output_type
class GetUsersResult:
    """
    A collection of values returned by getUsers.
    """
    def __init__(__self__, api_version=None, entities=None, id=None, metadatas=None):
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The version of the API.
        * `state`: - The state of the entity.
        * `name`: - The name of the user.
        * `user_type`: - The name of the user.
        * `display_name`: - The display name of the user (common name) provided by the directory service.
        * `project_reference_list`: - A list of projects the user is part of. See #reference for more details.
        * `access_control_policy_reference_list`: - List of ACP references. See #reference for more details.
        * `directory_service_user`: - (Optional) The directory service user configuration. See below for more information.
        * `identity_provider_user`: - (Optional) (Optional) The identity provider user configuration. See below for more information.
        * `categories`: - (Optional) Categories for the user.
        * `project_reference`: - (Optional) The reference to a project.
        * `owner_reference`: - (Optional) The reference to a user.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetUsersEntityResult']:
        return pulumi.get(self, "entities")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetUsersMetadataResult']:
        return pulumi.get(self, "metadatas")


class AwaitableGetUsersResult(GetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsersResult(
            api_version=self.api_version,
            entities=self.entities,
            id=self.id,
            metadatas=self.metadatas)


def get_users(metadatas: Optional[Sequence[pulumi.InputType['GetUsersMetadataArgs']]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsersResult:
    """
    Provides a datasource to retrieve all the users.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    user = nutanix.User("user", directory_service_user=nutanix.UserDirectoryServiceUserArgs(
        directory_service_reference=nutanix.UserDirectoryServiceUserDirectoryServiceReferenceArgs(
            uuid="<directory-service-uuid>",
        ),
        user_principal_name="test-user@ntnxlab.local",
    ))
    users = nutanix.get_user()
    ```
    """
    __args__ = dict()
    __args__['metadatas'] = metadatas
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nutanix:index/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult).value

    return AwaitableGetUsersResult(
        api_version=__ret__.api_version,
        entities=__ret__.entities,
        id=__ret__.id,
        metadatas=__ret__.metadatas)


@_utilities.lift_output_func(get_users)
def get_users_output(metadatas: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUsersMetadataArgs']]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsersResult]:
    """
    Provides a datasource to retrieve all the users.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_nutanix as nutanix

    user = nutanix.User("user", directory_service_user=nutanix.UserDirectoryServiceUserArgs(
        directory_service_reference=nutanix.UserDirectoryServiceUserDirectoryServiceReferenceArgs(
            uuid="<directory-service-uuid>",
        ),
        user_principal_name="test-user@ntnxlab.local",
    ))
    users = nutanix.get_user()
    ```
    """
    ...
