# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetHostResult',
    'AwaitableGetHostResult',
    'get_host',
    'get_host_output',
]

@pulumi.output_type
class GetHostResult:
    """
    A collection of values returned by getHost.
    """
    def __init__(__self__, api_version=None, block=None, categories=None, cluster_reference=None, controller_vm=None, cpu_capacity_hz=None, cpu_model=None, failover_cluster=None, gpu_driver_version=None, gpu_lists=None, host_disks_reference_lists=None, host_id=None, host_nics_id_lists=None, host_type=None, hypervisor=None, id=None, ipmi=None, memory_capacity_mib=None, metadata=None, monitoring_state=None, name=None, num_cpu_cores=None, num_cpu_sockets=None, owner_reference=None, project_reference=None, rackable_unit_reference=None, serial_number=None, windows_domain=None):
        if api_version and not isinstance(api_version, str):
            raise TypeError("Expected argument 'api_version' to be a str")
        pulumi.set(__self__, "api_version", api_version)
        if block and not isinstance(block, dict):
            raise TypeError("Expected argument 'block' to be a dict")
        pulumi.set(__self__, "block", block)
        if categories and not isinstance(categories, list):
            raise TypeError("Expected argument 'categories' to be a list")
        pulumi.set(__self__, "categories", categories)
        if cluster_reference and not isinstance(cluster_reference, dict):
            raise TypeError("Expected argument 'cluster_reference' to be a dict")
        pulumi.set(__self__, "cluster_reference", cluster_reference)
        if controller_vm and not isinstance(controller_vm, dict):
            raise TypeError("Expected argument 'controller_vm' to be a dict")
        pulumi.set(__self__, "controller_vm", controller_vm)
        if cpu_capacity_hz and not isinstance(cpu_capacity_hz, int):
            raise TypeError("Expected argument 'cpu_capacity_hz' to be a int")
        pulumi.set(__self__, "cpu_capacity_hz", cpu_capacity_hz)
        if cpu_model and not isinstance(cpu_model, str):
            raise TypeError("Expected argument 'cpu_model' to be a str")
        pulumi.set(__self__, "cpu_model", cpu_model)
        if failover_cluster and not isinstance(failover_cluster, dict):
            raise TypeError("Expected argument 'failover_cluster' to be a dict")
        pulumi.set(__self__, "failover_cluster", failover_cluster)
        if gpu_driver_version and not isinstance(gpu_driver_version, str):
            raise TypeError("Expected argument 'gpu_driver_version' to be a str")
        pulumi.set(__self__, "gpu_driver_version", gpu_driver_version)
        if gpu_lists and not isinstance(gpu_lists, list):
            raise TypeError("Expected argument 'gpu_lists' to be a list")
        pulumi.set(__self__, "gpu_lists", gpu_lists)
        if host_disks_reference_lists and not isinstance(host_disks_reference_lists, list):
            raise TypeError("Expected argument 'host_disks_reference_lists' to be a list")
        pulumi.set(__self__, "host_disks_reference_lists", host_disks_reference_lists)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_nics_id_lists and not isinstance(host_nics_id_lists, list):
            raise TypeError("Expected argument 'host_nics_id_lists' to be a list")
        pulumi.set(__self__, "host_nics_id_lists", host_nics_id_lists)
        if host_type and not isinstance(host_type, str):
            raise TypeError("Expected argument 'host_type' to be a str")
        pulumi.set(__self__, "host_type", host_type)
        if hypervisor and not isinstance(hypervisor, dict):
            raise TypeError("Expected argument 'hypervisor' to be a dict")
        pulumi.set(__self__, "hypervisor", hypervisor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipmi and not isinstance(ipmi, dict):
            raise TypeError("Expected argument 'ipmi' to be a dict")
        pulumi.set(__self__, "ipmi", ipmi)
        if memory_capacity_mib and not isinstance(memory_capacity_mib, int):
            raise TypeError("Expected argument 'memory_capacity_mib' to be a int")
        pulumi.set(__self__, "memory_capacity_mib", memory_capacity_mib)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if monitoring_state and not isinstance(monitoring_state, str):
            raise TypeError("Expected argument 'monitoring_state' to be a str")
        pulumi.set(__self__, "monitoring_state", monitoring_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if num_cpu_cores and not isinstance(num_cpu_cores, int):
            raise TypeError("Expected argument 'num_cpu_cores' to be a int")
        pulumi.set(__self__, "num_cpu_cores", num_cpu_cores)
        if num_cpu_sockets and not isinstance(num_cpu_sockets, int):
            raise TypeError("Expected argument 'num_cpu_sockets' to be a int")
        pulumi.set(__self__, "num_cpu_sockets", num_cpu_sockets)
        if owner_reference and not isinstance(owner_reference, dict):
            raise TypeError("Expected argument 'owner_reference' to be a dict")
        pulumi.set(__self__, "owner_reference", owner_reference)
        if project_reference and not isinstance(project_reference, dict):
            raise TypeError("Expected argument 'project_reference' to be a dict")
        pulumi.set(__self__, "project_reference", project_reference)
        if rackable_unit_reference and not isinstance(rackable_unit_reference, dict):
            raise TypeError("Expected argument 'rackable_unit_reference' to be a dict")
        pulumi.set(__self__, "rackable_unit_reference", rackable_unit_reference)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if windows_domain and not isinstance(windows_domain, dict):
            raise TypeError("Expected argument 'windows_domain' to be a dict")
        pulumi.set(__self__, "windows_domain", windows_domain)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        The API version.
        * `gpu_driver_version`: - Host GPU driver version.
        * `failover_cluster`: - Hyper-V failover cluster.
        * `ipmi`: - Host IPMI info.
        * `cpu_model`: - Host CPU model.
        * `host_nics_id_list`: - Host NICs.
        * `num_cpu_sockets`: - Number of CPU sockets.
        * `windows_domain`: - The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.
        * `gpu_list`: - List of GPUs on the host.
        * `serial_number`: - Node serial number.
        * `cpu_capacity_hz`: - Host CPU capacity.
        * `memory_capacity_mib`: - Host memory capacity in MiB.
        * `host_disks_reference_list`: - The reference to a disk.
        * `monitoring_state`: - Host monitoring status.
        * `hypervisor`: - Host Hypervisor information.
        * `host_type`: - Host type.
        * `num_cpu_cores`: - Number of CPU cores on Host.
        * `rackable_unit_reference`: - The reference to a rackable_unit.
        * `controller_vm`: - Host controller vm information.
        * `block`: - Host block config info.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def block(self) -> Mapping[str, str]:
        return pulumi.get(self, "block")

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetHostCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="clusterReference")
    def cluster_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "cluster_reference")

    @property
    @pulumi.getter(name="controllerVm")
    def controller_vm(self) -> Mapping[str, str]:
        return pulumi.get(self, "controller_vm")

    @property
    @pulumi.getter(name="cpuCapacityHz")
    def cpu_capacity_hz(self) -> int:
        return pulumi.get(self, "cpu_capacity_hz")

    @property
    @pulumi.getter(name="cpuModel")
    def cpu_model(self) -> str:
        return pulumi.get(self, "cpu_model")

    @property
    @pulumi.getter(name="failoverCluster")
    def failover_cluster(self) -> Mapping[str, str]:
        return pulumi.get(self, "failover_cluster")

    @property
    @pulumi.getter(name="gpuDriverVersion")
    def gpu_driver_version(self) -> str:
        return pulumi.get(self, "gpu_driver_version")

    @property
    @pulumi.getter(name="gpuLists")
    def gpu_lists(self) -> Sequence['outputs.GetHostGpuListResult']:
        return pulumi.get(self, "gpu_lists")

    @property
    @pulumi.getter(name="hostDisksReferenceLists")
    def host_disks_reference_lists(self) -> Sequence['outputs.GetHostHostDisksReferenceListResult']:
        return pulumi.get(self, "host_disks_reference_lists")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="hostNicsIdLists")
    def host_nics_id_lists(self) -> Sequence[str]:
        return pulumi.get(self, "host_nics_id_lists")

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> str:
        return pulumi.get(self, "host_type")

    @property
    @pulumi.getter
    def hypervisor(self) -> Mapping[str, str]:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipmi(self) -> Mapping[str, str]:
        return pulumi.get(self, "ipmi")

    @property
    @pulumi.getter(name="memoryCapacityMib")
    def memory_capacity_mib(self) -> int:
        return pulumi.get(self, "memory_capacity_mib")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> str:
        return pulumi.get(self, "monitoring_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numCpuCores")
    def num_cpu_cores(self) -> int:
        return pulumi.get(self, "num_cpu_cores")

    @property
    @pulumi.getter(name="numCpuSockets")
    def num_cpu_sockets(self) -> int:
        return pulumi.get(self, "num_cpu_sockets")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "project_reference")

    @property
    @pulumi.getter(name="rackableUnitReference")
    def rackable_unit_reference(self) -> Mapping[str, str]:
        return pulumi.get(self, "rackable_unit_reference")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="windowsDomain")
    def windows_domain(self) -> Mapping[str, str]:
        return pulumi.get(self, "windows_domain")


class AwaitableGetHostResult(GetHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostResult(
            api_version=self.api_version,
            block=self.block,
            categories=self.categories,
            cluster_reference=self.cluster_reference,
            controller_vm=self.controller_vm,
            cpu_capacity_hz=self.cpu_capacity_hz,
            cpu_model=self.cpu_model,
            failover_cluster=self.failover_cluster,
            gpu_driver_version=self.gpu_driver_version,
            gpu_lists=self.gpu_lists,
            host_disks_reference_lists=self.host_disks_reference_lists,
            host_id=self.host_id,
            host_nics_id_lists=self.host_nics_id_lists,
            host_type=self.host_type,
            hypervisor=self.hypervisor,
            id=self.id,
            ipmi=self.ipmi,
            memory_capacity_mib=self.memory_capacity_mib,
            metadata=self.metadata,
            monitoring_state=self.monitoring_state,
            name=self.name,
            num_cpu_cores=self.num_cpu_cores,
            num_cpu_sockets=self.num_cpu_sockets,
            owner_reference=self.owner_reference,
            project_reference=self.project_reference,
            rackable_unit_reference=self.rackable_unit_reference,
            serial_number=self.serial_number,
            windows_domain=self.windows_domain)


def get_host(categories: Optional[Sequence[pulumi.InputType['GetHostCategoryArgs']]] = None,
             host_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostResult:
    """
    Describes a Host
    """
    __args__ = dict()
    __args__['categories'] = categories
    __args__['hostId'] = host_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('nutanix:index/getHost:getHost', __args__, opts=opts, typ=GetHostResult).value

    return AwaitableGetHostResult(
        api_version=__ret__.api_version,
        block=__ret__.block,
        categories=__ret__.categories,
        cluster_reference=__ret__.cluster_reference,
        controller_vm=__ret__.controller_vm,
        cpu_capacity_hz=__ret__.cpu_capacity_hz,
        cpu_model=__ret__.cpu_model,
        failover_cluster=__ret__.failover_cluster,
        gpu_driver_version=__ret__.gpu_driver_version,
        gpu_lists=__ret__.gpu_lists,
        host_disks_reference_lists=__ret__.host_disks_reference_lists,
        host_id=__ret__.host_id,
        host_nics_id_lists=__ret__.host_nics_id_lists,
        host_type=__ret__.host_type,
        hypervisor=__ret__.hypervisor,
        id=__ret__.id,
        ipmi=__ret__.ipmi,
        memory_capacity_mib=__ret__.memory_capacity_mib,
        metadata=__ret__.metadata,
        monitoring_state=__ret__.monitoring_state,
        name=__ret__.name,
        num_cpu_cores=__ret__.num_cpu_cores,
        num_cpu_sockets=__ret__.num_cpu_sockets,
        owner_reference=__ret__.owner_reference,
        project_reference=__ret__.project_reference,
        rackable_unit_reference=__ret__.rackable_unit_reference,
        serial_number=__ret__.serial_number,
        windows_domain=__ret__.windows_domain)


@_utilities.lift_output_func(get_host)
def get_host_output(categories: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetHostCategoryArgs']]]]] = None,
                    host_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHostResult]:
    """
    Describes a Host
    """
    ...
