# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Twiplies']

# %% ../nbs/00_core.ipynb 5
import tweepy
from fastcore.utils import *
from fastcore.test import *
from .io.build_dataframe import build_dataframe

class Twiplies:
    "Instantiate a Tweepy object to fetch tweets replies."
    def __init__(self, 
                 username: str, # twitter's account username
                 consumer_key: str, # twitter's account consumer_key
                 consumer_secret: str, # twiter's account consumer_secret
                 access_token: str, # twitter's account access_token
                 access_token_secret: str): # twitter's account access_token_secret 
        store_attr()
        self.auth = tweepy.OAuthHandler(self.consumer_key, self.consumer_secret)
        self.auth.set_access_token(self.access_token, self.access_token_secret)
        self.api = tweepy.API(self.auth)
    __repr__ = basic_repr('username')
    def __str__(self): return f"Twiplies(username='{self.username}')"
    def __eq__(self, a): return self.username == a.username

    def get_replies_from_tweet(self, 
                               tweet_id: str, # tweet id, you can get it from the last part of the tweet url
                               n_tweets: int): # number of tweets to fetch 
        "Get replies from a specfic tweet."
        tweet_ids = []
        replies = []
        for tweet in tweepy.Cursor(self.api.search_tweets, q='to:'+self.username, result_type='recent').items(n_tweets):
            if hasattr(tweet, 'in_reply_to_status_id_str'):
                if (tweet.in_reply_to_status_id_str==tweet_id):
                    tweet_ids.append(tweet.in_reply_to_status_id_str)
                    replies.append(tweet)

        df = build_dataframe(tweet_ids, replies)
        return df

    def get_all_replies(self,
                        n_tweets: int): # number of tweets to fetch
        "Get all replies from `n_tweets`"
        tweet_ids = []
        replies = []
        for tweet in tweepy.Cursor(self.api.search_tweets, q='to:'+self.username, result_type='recent').items(n_tweets):
            if hasattr(tweet, 'in_reply_to_status_id_str'):
                tweet_ids.append(tweet.in_reply_to_status_id_str)
                replies.append(tweet)

        df = build_dataframe(tweet_ids, replies)
        return df
