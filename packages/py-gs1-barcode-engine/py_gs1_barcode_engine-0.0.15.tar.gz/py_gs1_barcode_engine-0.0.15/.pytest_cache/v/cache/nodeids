[
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Dot scaling: resolution probably out of range]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Huge X undercut]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Huge Y undercut]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Huge number of columns]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Huge number of rows]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Unreasonable/impossible dot scaling constraints]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Unreasonable/impossible pixel scaling constraints0]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Unreasonable/impossible pixel scaling constraints1]",
  "test_generate_gs1_datamatrix.py::test_bad_generation_params[Unreasonable/impossible pixel scaling constraints]",
  "test_generate_gs1_datamatrix.py::test_bad_input",
  "test_generate_gs1_datamatrix.py::test_bad_input[Complete nonsense]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-No params]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-Standard]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-dm_cols only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-dm_rows only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-x undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string-y undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Empty string]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-No params]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-Standard]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-dm_cols only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-dm_rows only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-x undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text-y undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text0]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text1]",
  "test_generate_gs1_datamatrix.py::test_bad_input[Nonsense in middle of valid barcode text]",
  "test_generate_gs1_datamatrix.py::test_bad_input[THis is complete nonsense]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-No params]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-Standard]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-dm_cols only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-dm_rows only]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-x undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense-y undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_bad_input[This is complete nonsense]",
  "test_generate_gs1_datamatrix.py::test_barcode_generation",
  "test_generate_gs1_datamatrix.py::test_crazy_params",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge X undercut]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge Y undercut0]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge Y undercut1]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge Y undercut]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of columns0]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of columns1]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of columns2]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of columns]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of rows0]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of rows1]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Huge number of rows]",
  "test_generate_gs1_datamatrix.py::test_crazy_params[Valid number of Data Matrix rows range is]",
  "test_generate_gs1_datamatrix.py::test_good_params",
  "test_generate_gs1_datamatrix.py::test_good_params[Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_generate_gs1_datamatrix.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_generate_gs1_datamatrix.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_generate_gs1_datamatrix.py::test_good_params[Device dot scaling, only target_x_dim defined]",
  "test_generate_gs1_datamatrix.py::test_good_params[Device dot scaling]",
  "test_generate_gs1_datamatrix.py::test_good_params[No params]",
  "test_generate_gs1_datamatrix.py::test_good_params[Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_generate_gs1_datamatrix.py::test_good_params[Standard0]",
  "test_generate_gs1_datamatrix.py::test_good_params[Standard1]",
  "test_generate_gs1_datamatrix.py::test_good_params[Standard]",
  "test_generate_gs1_datamatrix.py::test_good_params[dm_cols only]",
  "test_generate_gs1_datamatrix.py::test_good_params[dm_rows only]",
  "test_generate_gs1_datamatrix.py::test_good_params[x undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_good_params[x_undercut only]",
  "test_generate_gs1_datamatrix.py::test_good_params[y undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_good_params[y_undercut only]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[No params]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[Standard]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[dm_cols only]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[dm_rows only]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[x undercut only (default scaling overwritten to make this possible)]",
  "test_generate_gs1_datamatrix.py::test_memory_isnt_leaky[y undercut only (default scaling overwritten to make this possible)]",
  "test_gs1.py::test_barcode_generation",
  "test_gs1.py::test_treepoem",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge X undercut]",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge Y undercut]",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge number of columns]",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge number of rows]",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Unreasonable/impossible dot scaling constraints]",
  "test_py_gs1_barcode_engine.py::test_bad_generation_params[Unreasonable/impossible pixel scaling constraints]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-No params]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Standard]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-dm_cols only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-dm_rows only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-x undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Empty string-y undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-No params]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Standard]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-dm_cols only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-dm_rows only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-x undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-y undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-No params]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Standard]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-dm_cols only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-dm_rows only]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-x undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-y undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_good_params[Both x and y undercut (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "test_py_gs1_barcode_engine.py::test_good_params[No params]",
  "test_py_gs1_barcode_engine.py::test_good_params[Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "test_py_gs1_barcode_engine.py::test_good_params[Standard]",
  "test_py_gs1_barcode_engine.py::test_good_params[dm_cols only]",
  "test_py_gs1_barcode_engine.py::test_good_params[dm_rows only]",
  "test_py_gs1_barcode_engine.py::test_good_params[x undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_good_params[y undercut only (default scaling overwritten to make this possible)]",
  "test_py_gs1_barcode_engine.py::test_memory_isnt_leaky",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge X undercut]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge Y undercut]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge number of columns]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Huge number of rows]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Unreasonable/impossible dot scaling constraints]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_generation_params[Unreasonable/impossible pixel scaling constraints]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Both x and y undercut (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-No params]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-Standard]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-dm_cols only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-dm_rows only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-x undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Empty string-y undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Both x and y undercut (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-No params]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-Standard]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-dm_cols only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-dm_rows only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-x undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[Nonsense in middle of valid barcode text-y undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Both x and y undercut (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-No params]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-Standard]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-dm_cols only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-dm_rows only]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-x undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_bad_input[This is complete nonsense-y undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Both x and y undercut (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling with a huge DPI. This is fine - the library will attempt to attacin the target but fail but this is okay]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined0]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Device dot (i.e. physical dimensions e.g. inches) scaling, only target_x_dim defined1]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[No params]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Pixel-based (i.e. pixels only, not physical dimensions) scaling scaling only]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[Standard]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[dm_cols only]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[dm_rows only]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[x undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_good_params[y undercut only (default scaling overwritten to make this possible)]",
  "tests/test_py_gs1_barcode_engine.py::test_memory_isnt_leaky"
]