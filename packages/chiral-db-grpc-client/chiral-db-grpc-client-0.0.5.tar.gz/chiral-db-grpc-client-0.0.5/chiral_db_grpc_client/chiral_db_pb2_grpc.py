# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import chiral_db_pb2 as chiral__db__pb2


class ChiralDbStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDescription = channel.unary_unary(
                '/chiraldb.ChiralDb/GetDescription',
                request_serializer=chiral__db__pb2.RequestDescription.SerializeToString,
                response_deserializer=chiral__db__pb2.ReplyDescription.FromString,
                )
        self.QuerySimilarity = channel.unary_unary(
                '/chiraldb.ChiralDb/QuerySimilarity',
                request_serializer=chiral__db__pb2.RequestSimilarity.SerializeToString,
                response_deserializer=chiral__db__pb2.ReplySimilarity.FromString,
                )
        self.QuerySubstructure = channel.unary_unary(
                '/chiraldb.ChiralDb/QuerySubstructure',
                request_serializer=chiral__db__pb2.RequestSubstructure.SerializeToString,
                response_deserializer=chiral__db__pb2.ReplySubstructure.FromString,
                )


class ChiralDbServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDescription(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySimilarity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySubstructure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChiralDbServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDescription': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDescription,
                    request_deserializer=chiral__db__pb2.RequestDescription.FromString,
                    response_serializer=chiral__db__pb2.ReplyDescription.SerializeToString,
            ),
            'QuerySimilarity': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySimilarity,
                    request_deserializer=chiral__db__pb2.RequestSimilarity.FromString,
                    response_serializer=chiral__db__pb2.ReplySimilarity.SerializeToString,
            ),
            'QuerySubstructure': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySubstructure,
                    request_deserializer=chiral__db__pb2.RequestSubstructure.FromString,
                    response_serializer=chiral__db__pb2.ReplySubstructure.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chiraldb.ChiralDb', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChiralDb(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDescription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiraldb.ChiralDb/GetDescription',
            chiral__db__pb2.RequestDescription.SerializeToString,
            chiral__db__pb2.ReplyDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySimilarity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiraldb.ChiralDb/QuerySimilarity',
            chiral__db__pb2.RequestSimilarity.SerializeToString,
            chiral__db__pb2.ReplySimilarity.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySubstructure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiraldb.ChiralDb/QuerySubstructure',
            chiral__db__pb2.RequestSubstructure.SerializeToString,
            chiral__db__pb2.ReplySubstructure.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
