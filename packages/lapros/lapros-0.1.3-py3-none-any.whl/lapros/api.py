# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_api.ipynb.

# %% auto 0
__all__ = ['suspect', 'to_numpy']

# %% ../nbs/10_api.ipynb 2
import numpy as np
import pandas as pd
from plum import dispatch
from lapros.util import set_logger

logger = set_logger();

# %% ../nbs/10_api.ipynb 11
@dispatch
def suspect(
    probas: np.ndarray,
    *,
    labels: np.ndarray,
) -> pd.DataFrame:
    """Rank the suspicious labels given probas from a classifier.

    Params:
        labels: Numpy Array of shape n x 1, label 0 for negative, 1 for positive cases.
        probas: Numpy Array of shape n x m, probabilites for possible classes.

    Return:
        ranks: Pandas DataFrame of one column, the magnitude of suspicious labels, valued between [0, 1], the larger the more suspicious. The index of the DataFrame indicates the index of suspicious samples.
    """
    logger.debug(
        f"Numpy arrays labels and probas must have same length {len(labels)} vs {len(probas)}"
    )
    if len(labels) != len(probas):
        logger.debug("Trying to reshape probas")
        probas = probas.reshape((len(labels), -1))
    logger.debug(f"Shape of labels and probas: {labels.shape} vs {probas.shape}")
    from lapros.alg import suspect

    ranks = suspect(ys=labels, ps=probas)

    return ranks

# %% ../nbs/10_api.ipynb 16
def to_numpy(
    labels: pd.Series,
    *,
    index: pd.Index,
) -> np.ndarray:
    """ Converting a Pandas series of string labels to a Numpy integer array, 
    given the index of the unique labels.
    """
    if index.is_integer():
        return labels.to_numpy()

    lab2int = {col: i for i, col in enumerate(index)}
    # logger.debug(lab2int)
    try:
        # logger.debug(labels.values)
        int_labels = [lab2int[lab] for lab in labels.values]
        labels = np.array(int_labels)
        # logger.debug(labels)
    except Exception as err:
        logger.error("Can not convert labels from strings to integers")
        raise err
    return labels


@dispatch
def suspect(
    probas: pd.DataFrame,
    *,
    labels: pd.Series,
) -> pd.DataFrame:
    """Rank the suspicious using Pandas series and dataframes.

    We can use string labels, assuming that the probability dataframe's columns are indexed by the same label set.
    """
    logger.debug(
        f"Pandas series labels and dataframe probas must have same length {len(labels)} vs {len(probas)}"
    )
    labels = to_numpy(labels, index=probas.columns)
    ranks = suspect(
        probas.to_numpy(),
        labels=labels,
    )
    return ranks

# %% ../nbs/10_api.ipynb 27
@dispatch
def suspect(
    probas: list,
    *,
    labels: list,
) -> pd.DataFrame:
    """Rank the  suspicious using normal Python lists"""
    logger.debug("Normal Python lists")
    ranks = suspect(
        np.array(probas),
        labels=np.array(labels),
    )
    return ranks
