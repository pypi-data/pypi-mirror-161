# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single parameter group of an axis transformation
class KinCfgAxsTrafoParamGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoParamGroup(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoParamGroup()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoParamGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter group
    # KinCfgAxsTrafoParamGroup
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # all configuration parameter of this group
    # KinCfgAxsTrafoParamGroup
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoSingleParam import KinCfgAxsTrafoSingleParam
            obj = KinCfgAxsTrafoSingleParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoParamGroup
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoParamGroup
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinCfgAxsTrafoParamGroupStart(builder): builder.StartObject(2)
def KinCfgAxsTrafoParamGroupAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def KinCfgAxsTrafoParamGroupAddParam(builder, param): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)
def KinCfgAxsTrafoParamGroupStartParamVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoParamGroupEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoSingleParam
try:
    from typing import List
except:
    pass

class KinCfgAxsTrafoParamGroupT(object):

    # KinCfgAxsTrafoParamGroupT
    def __init__(self):
        self.name = None  # type: str
        self.param = None  # type: List[motion.core.fbtypes.KinCfgAxsTrafoSingleParam.KinCfgAxsTrafoSingleParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoParamGroup = KinCfgAxsTrafoParamGroup()
        kinCfgAxsTrafoParamGroup.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoParamGroup)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoParamGroup):
        x = KinCfgAxsTrafoParamGroupT()
        x._UnPack(kinCfgAxsTrafoParamGroup)
        return x

    # KinCfgAxsTrafoParamGroupT
    def _UnPack(self, kinCfgAxsTrafoParamGroup):
        if kinCfgAxsTrafoParamGroup is None:
            return
        self.name = kinCfgAxsTrafoParamGroup.Name()
        if not kinCfgAxsTrafoParamGroup.ParamIsNone():
            self.param = []
            for i in range(kinCfgAxsTrafoParamGroup.ParamLength()):
                if kinCfgAxsTrafoParamGroup.Param(i) is None:
                    self.param.append(None)
                else:
                    kinCfgAxsTrafoSingleParam_ = motion.core.fbtypes.KinCfgAxsTrafoSingleParam.KinCfgAxsTrafoSingleParamT.InitFromObj(kinCfgAxsTrafoParamGroup.Param(i))
                    self.param.append(kinCfgAxsTrafoSingleParam_)

    # KinCfgAxsTrafoParamGroupT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.param is not None:
            paramlist = []
            for i in range(len(self.param)):
                paramlist.append(self.param[i].Pack(builder))
            KinCfgAxsTrafoParamGroupStartParamVector(builder, len(self.param))
            for i in reversed(range(len(self.param))):
                builder.PrependUOffsetTRelative(paramlist[i])
            param = builder.EndVector(len(self.param))
        KinCfgAxsTrafoParamGroupStart(builder)
        if self.name is not None:
            KinCfgAxsTrafoParamGroupAddName(builder, name)
        if self.param is not None:
            KinCfgAxsTrafoParamGroupAddParam(builder, param)
        kinCfgAxsTrafoParamGroup = KinCfgAxsTrafoParamGroupEnd(builder)
        return kinCfgAxsTrafoParamGroup
