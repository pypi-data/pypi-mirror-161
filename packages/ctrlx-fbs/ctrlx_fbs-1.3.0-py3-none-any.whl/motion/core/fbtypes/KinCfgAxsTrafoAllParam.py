# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration parameter of a single axis transformation
class KinCfgAxsTrafoAllParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoAllParam(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoAllParam()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoAllParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # axis assignment 
    # KinCfgAxsTrafoAllParam
    def AxisAssignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgAxsTrafoAxisAssignment import KinCfgAxsTrafoAxisAssignment
            obj = KinCfgAxsTrafoAxisAssignment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # all configuration parameter groups of this axis transformation
    # KinCfgAxsTrafoAllParam
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoParamGroup import KinCfgAxsTrafoParamGroup
            obj = KinCfgAxsTrafoParamGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoAllParam
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoAllParam
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # all general parameter of this axis transformation
    # KinCfgAxsTrafoAllParam
    def General(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgAxsTrafoParamGroup import KinCfgAxsTrafoParamGroup
            obj = KinCfgAxsTrafoParamGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgAxsTrafoAllParamStart(builder): builder.StartObject(3)
def KinCfgAxsTrafoAllParamAddAxisAssignment(builder, axisAssignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axisAssignment), 0)
def KinCfgAxsTrafoAllParamAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def KinCfgAxsTrafoAllParamStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoAllParamAddGeneral(builder, general): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(general), 0)
def KinCfgAxsTrafoAllParamEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoAxisAssignment
import motion.core.fbtypes.KinCfgAxsTrafoParamGroup
try:
    from typing import List, Optional
except:
    pass

class KinCfgAxsTrafoAllParamT(object):

    # KinCfgAxsTrafoAllParamT
    def __init__(self):
        self.axisAssignment = None  # type: Optional[motion.core.fbtypes.KinCfgAxsTrafoAxisAssignment.KinCfgAxsTrafoAxisAssignmentT]
        self.groups = None  # type: List[motion.core.fbtypes.KinCfgAxsTrafoParamGroup.KinCfgAxsTrafoParamGroupT]
        self.general = None  # type: Optional[motion.core.fbtypes.KinCfgAxsTrafoParamGroup.KinCfgAxsTrafoParamGroupT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoAllParam = KinCfgAxsTrafoAllParam()
        kinCfgAxsTrafoAllParam.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoAllParam)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoAllParam):
        x = KinCfgAxsTrafoAllParamT()
        x._UnPack(kinCfgAxsTrafoAllParam)
        return x

    # KinCfgAxsTrafoAllParamT
    def _UnPack(self, kinCfgAxsTrafoAllParam):
        if kinCfgAxsTrafoAllParam is None:
            return
        if kinCfgAxsTrafoAllParam.AxisAssignment() is not None:
            self.axisAssignment = motion.core.fbtypes.KinCfgAxsTrafoAxisAssignment.KinCfgAxsTrafoAxisAssignmentT.InitFromObj(kinCfgAxsTrafoAllParam.AxisAssignment())
        if not kinCfgAxsTrafoAllParam.GroupsIsNone():
            self.groups = []
            for i in range(kinCfgAxsTrafoAllParam.GroupsLength()):
                if kinCfgAxsTrafoAllParam.Groups(i) is None:
                    self.groups.append(None)
                else:
                    kinCfgAxsTrafoParamGroup_ = motion.core.fbtypes.KinCfgAxsTrafoParamGroup.KinCfgAxsTrafoParamGroupT.InitFromObj(kinCfgAxsTrafoAllParam.Groups(i))
                    self.groups.append(kinCfgAxsTrafoParamGroup_)
        if kinCfgAxsTrafoAllParam.General() is not None:
            self.general = motion.core.fbtypes.KinCfgAxsTrafoParamGroup.KinCfgAxsTrafoParamGroupT.InitFromObj(kinCfgAxsTrafoAllParam.General())

    # KinCfgAxsTrafoAllParamT
    def Pack(self, builder):
        if self.axisAssignment is not None:
            axisAssignment = self.axisAssignment.Pack(builder)
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(self.groups[i].Pack(builder))
            KinCfgAxsTrafoAllParamStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector(len(self.groups))
        if self.general is not None:
            general = self.general.Pack(builder)
        KinCfgAxsTrafoAllParamStart(builder)
        if self.axisAssignment is not None:
            KinCfgAxsTrafoAllParamAddAxisAssignment(builder, axisAssignment)
        if self.groups is not None:
            KinCfgAxsTrafoAllParamAddGroups(builder, groups)
        if self.general is not None:
            KinCfgAxsTrafoAllParamAddGeneral(builder, general)
        kinCfgAxsTrafoAllParam = KinCfgAxsTrafoAllParamEnd(builder)
        return kinCfgAxsTrafoAllParam
