# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a all axis assignments for an axis transformation
class KinCfgAxsTrafoAxisAssignment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoAxisAssignment(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoAxisAssignment()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoAxisAssignment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # assignment as pairs of <axis name; ACS index>
    # KinCfgAxsTrafoAxisAssignment
    def Assignment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoSingleAxisAssignment import KinCfgAxsTrafoSingleAxisAssignment
            obj = KinCfgAxsTrafoSingleAxisAssignment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoAxisAssignment
    def AssignmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoAxisAssignment
    def AssignmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgAxsTrafoAxisAssignmentStart(builder): builder.StartObject(1)
def KinCfgAxsTrafoAxisAssignmentAddAssignment(builder, assignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assignment), 0)
def KinCfgAxsTrafoAxisAssignmentStartAssignmentVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoAxisAssignmentEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoSingleAxisAssignment
try:
    from typing import List
except:
    pass

class KinCfgAxsTrafoAxisAssignmentT(object):

    # KinCfgAxsTrafoAxisAssignmentT
    def __init__(self):
        self.assignment = None  # type: List[motion.core.fbtypes.KinCfgAxsTrafoSingleAxisAssignment.KinCfgAxsTrafoSingleAxisAssignmentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoAxisAssignment = KinCfgAxsTrafoAxisAssignment()
        kinCfgAxsTrafoAxisAssignment.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoAxisAssignment)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoAxisAssignment):
        x = KinCfgAxsTrafoAxisAssignmentT()
        x._UnPack(kinCfgAxsTrafoAxisAssignment)
        return x

    # KinCfgAxsTrafoAxisAssignmentT
    def _UnPack(self, kinCfgAxsTrafoAxisAssignment):
        if kinCfgAxsTrafoAxisAssignment is None:
            return
        if not kinCfgAxsTrafoAxisAssignment.AssignmentIsNone():
            self.assignment = []
            for i in range(kinCfgAxsTrafoAxisAssignment.AssignmentLength()):
                if kinCfgAxsTrafoAxisAssignment.Assignment(i) is None:
                    self.assignment.append(None)
                else:
                    kinCfgAxsTrafoSingleAxisAssignment_ = motion.core.fbtypes.KinCfgAxsTrafoSingleAxisAssignment.KinCfgAxsTrafoSingleAxisAssignmentT.InitFromObj(kinCfgAxsTrafoAxisAssignment.Assignment(i))
                    self.assignment.append(kinCfgAxsTrafoSingleAxisAssignment_)

    # KinCfgAxsTrafoAxisAssignmentT
    def Pack(self, builder):
        if self.assignment is not None:
            assignmentlist = []
            for i in range(len(self.assignment)):
                assignmentlist.append(self.assignment[i].Pack(builder))
            KinCfgAxsTrafoAxisAssignmentStartAssignmentVector(builder, len(self.assignment))
            for i in reversed(range(len(self.assignment))):
                builder.PrependUOffsetTRelative(assignmentlist[i])
            assignment = builder.EndVector(len(self.assignment))
        KinCfgAxsTrafoAxisAssignmentStart(builder)
        if self.assignment is not None:
            KinCfgAxsTrafoAxisAssignmentAddAssignment(builder, assignment)
        kinCfgAxsTrafoAxisAssignment = KinCfgAxsTrafoAxisAssignmentEnd(builder)
        return kinCfgAxsTrafoAxisAssignment
