# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single axis assignment for an axis transformation
class KinCfgAxsTrafoSingleAxisAssignment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoSingleAxisAssignment(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoSingleAxisAssignment()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoSingleAxisAssignment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # axis name referring to the axis transformation
    # KinCfgAxsTrafoSingleAxisAssignment
    def AxisName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # index of the ACS array
    # KinCfgAxsTrafoSingleAxisAssignment
    def IndexACS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def KinCfgAxsTrafoSingleAxisAssignmentStart(builder): builder.StartObject(2)
def KinCfgAxsTrafoSingleAxisAssignmentAddAxisName(builder, axisName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axisName), 0)
def KinCfgAxsTrafoSingleAxisAssignmentAddIndexACS(builder, indexACS): builder.PrependUint8Slot(1, indexACS, 0)
def KinCfgAxsTrafoSingleAxisAssignmentEnd(builder): return builder.EndObject()


class KinCfgAxsTrafoSingleAxisAssignmentT(object):

    # KinCfgAxsTrafoSingleAxisAssignmentT
    def __init__(self):
        self.axisName = None  # type: str
        self.indexACS = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoSingleAxisAssignment = KinCfgAxsTrafoSingleAxisAssignment()
        kinCfgAxsTrafoSingleAxisAssignment.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoSingleAxisAssignment)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoSingleAxisAssignment):
        x = KinCfgAxsTrafoSingleAxisAssignmentT()
        x._UnPack(kinCfgAxsTrafoSingleAxisAssignment)
        return x

    # KinCfgAxsTrafoSingleAxisAssignmentT
    def _UnPack(self, kinCfgAxsTrafoSingleAxisAssignment):
        if kinCfgAxsTrafoSingleAxisAssignment is None:
            return
        self.axisName = kinCfgAxsTrafoSingleAxisAssignment.AxisName()
        self.indexACS = kinCfgAxsTrafoSingleAxisAssignment.IndexACS()

    # KinCfgAxsTrafoSingleAxisAssignmentT
    def Pack(self, builder):
        if self.axisName is not None:
            axisName = builder.CreateString(self.axisName)
        KinCfgAxsTrafoSingleAxisAssignmentStart(builder)
        if self.axisName is not None:
            KinCfgAxsTrafoSingleAxisAssignmentAddAxisName(builder, axisName)
        KinCfgAxsTrafoSingleAxisAssignmentAddIndexACS(builder, self.indexACS)
        kinCfgAxsTrafoSingleAxisAssignment = KinCfgAxsTrafoSingleAxisAssignmentEnd(builder)
        return kinCfgAxsTrafoSingleAxisAssignment
