# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of all registered axis transformations when reading all data of implemented axis transformations
class KinCfgAxsTrafoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoData()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # data of all registered axis transformations
    # KinCfgAxsTrafoData
    def AxsTrafoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoDataSingle import KinCfgAxsTrafoDataSingle
            obj = KinCfgAxsTrafoDataSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoData
    def AxsTrafoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoData
    def AxsTrafoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgAxsTrafoDataStart(builder): builder.StartObject(1)
def KinCfgAxsTrafoDataAddAxsTrafoData(builder, axsTrafoData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsTrafoData), 0)
def KinCfgAxsTrafoDataStartAxsTrafoDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoDataEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoDataSingle
try:
    from typing import List
except:
    pass

class KinCfgAxsTrafoDataT(object):

    # KinCfgAxsTrafoDataT
    def __init__(self):
        self.axsTrafoData = None  # type: List[motion.core.fbtypes.KinCfgAxsTrafoDataSingle.KinCfgAxsTrafoDataSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoData = KinCfgAxsTrafoData()
        kinCfgAxsTrafoData.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoData)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoData):
        x = KinCfgAxsTrafoDataT()
        x._UnPack(kinCfgAxsTrafoData)
        return x

    # KinCfgAxsTrafoDataT
    def _UnPack(self, kinCfgAxsTrafoData):
        if kinCfgAxsTrafoData is None:
            return
        if not kinCfgAxsTrafoData.AxsTrafoDataIsNone():
            self.axsTrafoData = []
            for i in range(kinCfgAxsTrafoData.AxsTrafoDataLength()):
                if kinCfgAxsTrafoData.AxsTrafoData(i) is None:
                    self.axsTrafoData.append(None)
                else:
                    kinCfgAxsTrafoDataSingle_ = motion.core.fbtypes.KinCfgAxsTrafoDataSingle.KinCfgAxsTrafoDataSingleT.InitFromObj(kinCfgAxsTrafoData.AxsTrafoData(i))
                    self.axsTrafoData.append(kinCfgAxsTrafoDataSingle_)

    # KinCfgAxsTrafoDataT
    def Pack(self, builder):
        if self.axsTrafoData is not None:
            axsTrafoDatalist = []
            for i in range(len(self.axsTrafoData)):
                axsTrafoDatalist.append(self.axsTrafoData[i].Pack(builder))
            KinCfgAxsTrafoDataStartAxsTrafoDataVector(builder, len(self.axsTrafoData))
            for i in reversed(range(len(self.axsTrafoData))):
                builder.PrependUOffsetTRelative(axsTrafoDatalist[i])
            axsTrafoData = builder.EndVector(len(self.axsTrafoData))
        KinCfgAxsTrafoDataStart(builder)
        if self.axsTrafoData is not None:
            KinCfgAxsTrafoDataAddAxsTrafoData(builder, axsTrafoData)
        kinCfgAxsTrafoData = KinCfgAxsTrafoDataEnd(builder)
        return kinCfgAxsTrafoData
