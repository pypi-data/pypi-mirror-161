# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single configuration parameter of an axis transformation when reading all data of an implemented axis transformation
class KinCfgAxsTrafoDataAllParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoDataAllParam(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoDataAllParam()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoDataAllParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Names of all axes, that are required for this axis transformation and that require an axis assignment
    # KinCfgAxsTrafoDataAllParam
    def AxsAssignment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinCfgAxsTrafoDataAllParam
    def AxsAssignmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoDataAllParam
    def AxsAssignmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Vector of all configuration parameters of the axis transformation
    # KinCfgAxsTrafoDataAllParam
    def Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxsTrafoDataParam import KinCfgAxsTrafoDataParam
            obj = KinCfgAxsTrafoDataParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgAxsTrafoDataAllParam
    def ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgAxsTrafoDataAllParam
    def ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinCfgAxsTrafoDataAllParamStart(builder): builder.StartObject(2)
def KinCfgAxsTrafoDataAllParamAddAxsAssignment(builder, axsAssignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsAssignment), 0)
def KinCfgAxsTrafoDataAllParamStartAxsAssignmentVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoDataAllParamAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def KinCfgAxsTrafoDataAllParamStartParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinCfgAxsTrafoDataAllParamEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoDataParam
try:
    from typing import List
except:
    pass

class KinCfgAxsTrafoDataAllParamT(object):

    # KinCfgAxsTrafoDataAllParamT
    def __init__(self):
        self.axsAssignment = None  # type: List[str]
        self.parameter = None  # type: List[motion.core.fbtypes.KinCfgAxsTrafoDataParam.KinCfgAxsTrafoDataParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoDataAllParam = KinCfgAxsTrafoDataAllParam()
        kinCfgAxsTrafoDataAllParam.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoDataAllParam)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoDataAllParam):
        x = KinCfgAxsTrafoDataAllParamT()
        x._UnPack(kinCfgAxsTrafoDataAllParam)
        return x

    # KinCfgAxsTrafoDataAllParamT
    def _UnPack(self, kinCfgAxsTrafoDataAllParam):
        if kinCfgAxsTrafoDataAllParam is None:
            return
        if not kinCfgAxsTrafoDataAllParam.AxsAssignmentIsNone():
            self.axsAssignment = []
            for i in range(kinCfgAxsTrafoDataAllParam.AxsAssignmentLength()):
                self.axsAssignment.append(kinCfgAxsTrafoDataAllParam.AxsAssignment(i))
        if not kinCfgAxsTrafoDataAllParam.ParameterIsNone():
            self.parameter = []
            for i in range(kinCfgAxsTrafoDataAllParam.ParameterLength()):
                if kinCfgAxsTrafoDataAllParam.Parameter(i) is None:
                    self.parameter.append(None)
                else:
                    kinCfgAxsTrafoDataParam_ = motion.core.fbtypes.KinCfgAxsTrafoDataParam.KinCfgAxsTrafoDataParamT.InitFromObj(kinCfgAxsTrafoDataAllParam.Parameter(i))
                    self.parameter.append(kinCfgAxsTrafoDataParam_)

    # KinCfgAxsTrafoDataAllParamT
    def Pack(self, builder):
        if self.axsAssignment is not None:
            axsAssignmentlist = []
            for i in range(len(self.axsAssignment)):
                axsAssignmentlist.append(builder.CreateString(self.axsAssignment[i]))
            KinCfgAxsTrafoDataAllParamStartAxsAssignmentVector(builder, len(self.axsAssignment))
            for i in reversed(range(len(self.axsAssignment))):
                builder.PrependUOffsetTRelative(axsAssignmentlist[i])
            axsAssignment = builder.EndVector(len(self.axsAssignment))
        if self.parameter is not None:
            parameterlist = []
            for i in range(len(self.parameter)):
                parameterlist.append(self.parameter[i].Pack(builder))
            KinCfgAxsTrafoDataAllParamStartParameterVector(builder, len(self.parameter))
            for i in reversed(range(len(self.parameter))):
                builder.PrependUOffsetTRelative(parameterlist[i])
            parameter = builder.EndVector(len(self.parameter))
        KinCfgAxsTrafoDataAllParamStart(builder)
        if self.axsAssignment is not None:
            KinCfgAxsTrafoDataAllParamAddAxsAssignment(builder, axsAssignment)
        if self.parameter is not None:
            KinCfgAxsTrafoDataAllParamAddParameter(builder, parameter)
        kinCfgAxsTrafoDataAllParam = KinCfgAxsTrafoDataAllParamEnd(builder)
        return kinCfgAxsTrafoDataAllParam
