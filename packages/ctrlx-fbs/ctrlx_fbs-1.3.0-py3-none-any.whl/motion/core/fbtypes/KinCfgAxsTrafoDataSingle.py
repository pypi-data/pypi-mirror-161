# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single registered axis transformation when reading all data of an implemented axis transformation
class KinCfgAxsTrafoDataSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgAxsTrafoDataSingle(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxsTrafoDataSingle()
        x.Init(buf, n + offset)
        return x

    # KinCfgAxsTrafoDataSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image (link) of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to the documentation of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def DocRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version string of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point of work of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Pow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # All configuration parameters of the axis transformation
    # KinCfgAxsTrafoDataSingle
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgAxsTrafoDataAllParam import KinCfgAxsTrafoDataAllParam
            obj = KinCfgAxsTrafoDataAllParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgAxsTrafoDataSingleStart(builder): builder.StartObject(7)
def KinCfgAxsTrafoDataSingleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def KinCfgAxsTrafoDataSingleAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def KinCfgAxsTrafoDataSingleAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def KinCfgAxsTrafoDataSingleAddDocRef(builder, docRef): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(docRef), 0)
def KinCfgAxsTrafoDataSingleAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def KinCfgAxsTrafoDataSingleAddPow(builder, pow): builder.PrependInt8Slot(5, pow, 1)
def KinCfgAxsTrafoDataSingleAddParameters(builder, parameters): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def KinCfgAxsTrafoDataSingleEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinCfgAxsTrafoDataAllParam
try:
    from typing import Optional
except:
    pass

class KinCfgAxsTrafoDataSingleT(object):

    # KinCfgAxsTrafoDataSingleT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.image = None  # type: str
        self.docRef = None  # type: str
        self.version = None  # type: str
        self.pow = 1  # type: int
        self.parameters = None  # type: Optional[motion.core.fbtypes.KinCfgAxsTrafoDataAllParam.KinCfgAxsTrafoDataAllParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxsTrafoDataSingle = KinCfgAxsTrafoDataSingle()
        kinCfgAxsTrafoDataSingle.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxsTrafoDataSingle)

    @classmethod
    def InitFromObj(cls, kinCfgAxsTrafoDataSingle):
        x = KinCfgAxsTrafoDataSingleT()
        x._UnPack(kinCfgAxsTrafoDataSingle)
        return x

    # KinCfgAxsTrafoDataSingleT
    def _UnPack(self, kinCfgAxsTrafoDataSingle):
        if kinCfgAxsTrafoDataSingle is None:
            return
        self.name = kinCfgAxsTrafoDataSingle.Name()
        self.description = kinCfgAxsTrafoDataSingle.Description()
        self.image = kinCfgAxsTrafoDataSingle.Image()
        self.docRef = kinCfgAxsTrafoDataSingle.DocRef()
        self.version = kinCfgAxsTrafoDataSingle.Version()
        self.pow = kinCfgAxsTrafoDataSingle.Pow()
        if kinCfgAxsTrafoDataSingle.Parameters() is not None:
            self.parameters = motion.core.fbtypes.KinCfgAxsTrafoDataAllParam.KinCfgAxsTrafoDataAllParamT.InitFromObj(kinCfgAxsTrafoDataSingle.Parameters())

    # KinCfgAxsTrafoDataSingleT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.image is not None:
            image = builder.CreateString(self.image)
        if self.docRef is not None:
            docRef = builder.CreateString(self.docRef)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.parameters is not None:
            parameters = self.parameters.Pack(builder)
        KinCfgAxsTrafoDataSingleStart(builder)
        if self.name is not None:
            KinCfgAxsTrafoDataSingleAddName(builder, name)
        if self.description is not None:
            KinCfgAxsTrafoDataSingleAddDescription(builder, description)
        if self.image is not None:
            KinCfgAxsTrafoDataSingleAddImage(builder, image)
        if self.docRef is not None:
            KinCfgAxsTrafoDataSingleAddDocRef(builder, docRef)
        if self.version is not None:
            KinCfgAxsTrafoDataSingleAddVersion(builder, version)
        KinCfgAxsTrafoDataSingleAddPow(builder, self.pow)
        if self.parameters is not None:
            KinCfgAxsTrafoDataSingleAddParameters(builder, parameters)
        kinCfgAxsTrafoDataSingle = KinCfgAxsTrafoDataSingleEnd(builder)
        return kinCfgAxsTrafoDataSingle
