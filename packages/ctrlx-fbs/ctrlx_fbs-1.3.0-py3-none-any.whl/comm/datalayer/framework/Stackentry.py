# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Stackentry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStackentry(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stackentry()
        x.Init(buf, n + offset)
        return x

    # Stackentry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Stackentry
    def Frame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Stackentry
    def Stack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StackentryStart(builder): builder.StartObject(2)
def StackentryAddFrame(builder, frame): builder.PrependUint32Slot(0, frame, 0)
def StackentryAddStack(builder, stack): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stack), 0)
def StackentryEnd(builder): return builder.EndObject()


class StackentryT(object):

    # StackentryT
    def __init__(self):
        self.frame = 0  # type: int
        self.stack = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stackentry = Stackentry()
        stackentry.Init(buf, pos)
        return cls.InitFromObj(stackentry)

    @classmethod
    def InitFromObj(cls, stackentry):
        x = StackentryT()
        x._UnPack(stackentry)
        return x

    # StackentryT
    def _UnPack(self, stackentry):
        if stackentry is None:
            return
        self.frame = stackentry.Frame()
        self.stack = stackentry.Stack()

    # StackentryT
    def Pack(self, builder):
        if self.stack is not None:
            stack = builder.CreateString(self.stack)
        StackentryStart(builder)
        StackentryAddFrame(builder, self.frame)
        if self.stack is not None:
            StackentryAddStack(builder, stack)
        stackentry = StackentryEnd(builder)
        return stackentry
