# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Register(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRegister(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Register()
        x.Init(buf, n + offset)
        return x

    # Register
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Register
    def IP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Register
    def SP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Register
    def BP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RegisterStart(builder): builder.StartObject(3)
def RegisterAddIP(builder, IP): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(IP), 0)
def RegisterAddSP(builder, SP): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(SP), 0)
def RegisterAddBP(builder, BP): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(BP), 0)
def RegisterEnd(builder): return builder.EndObject()


class RegisterT(object):

    # RegisterT
    def __init__(self):
        self.iP = None  # type: str
        self.sP = None  # type: str
        self.bP = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        register = Register()
        register.Init(buf, pos)
        return cls.InitFromObj(register)

    @classmethod
    def InitFromObj(cls, register):
        x = RegisterT()
        x._UnPack(register)
        return x

    # RegisterT
    def _UnPack(self, register):
        if register is None:
            return
        self.iP = register.IP()
        self.sP = register.SP()
        self.bP = register.BP()

    # RegisterT
    def Pack(self, builder):
        if self.iP is not None:
            iP = builder.CreateString(self.iP)
        if self.sP is not None:
            sP = builder.CreateString(self.sP)
        if self.bP is not None:
            bP = builder.CreateString(self.bP)
        RegisterStart(builder)
        if self.iP is not None:
            RegisterAddIP(builder, iP)
        if self.sP is not None:
            RegisterAddSP(builder, sP)
        if self.bP is not None:
            RegisterAddBP(builder, bP)
        register = RegisterEnd(builder)
        return register
